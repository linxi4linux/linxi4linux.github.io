<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林夕水共</title>
  
  <subtitle>关于技术，关于生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.rebootcat.com/"/>
  <updated>2020-09-03T13:37:48.019Z</updated>
  <id>http://www.rebootcat.com/</id>
  
  <author>
    <name>Smaug</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cmake教程|cmake入门实战</title>
    <link href="http://www.rebootcat.com/2020/09/02/cmake/"/>
    <id>http://www.rebootcat.com/2020/09/02/cmake/</id>
    <published>2020-09-02T03:23:58.000Z</published>
    <updated>2020-09-03T13:37:48.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我是一个 linux c++ 开发者，但是一直对 Makefile 的语法很是头痛，每次都记不住，所以每次写 Makefile 都很痛苦，Makefile 里需要你自己编写依赖和推导规则，这个过程能不能简单点呢？</p><p>对于编译一个 C++ 工程来说，也许需要的就是头文件路径、库路径、编译参数，剩下的东西基本也不重要，这三样足够去编译一个工程了。所以有没有一个工具能简单点的去实现 C++ 项目的构建呢？</p><p>答案是有的，上一篇博文 <a href="http://rebootcat.com/2020/08/30/scons/" target="_blank" rel="noopener">scons构建C++项目</a> 介绍了 使用 scons 来构建 C++ 项目，大大提高了编写构建脚本的效率，使用起来也极为方便，对于熟悉 python 的童鞋来说真的是大大的福音；但 scons 的问题就是在大型项目的时候构建起来可能会很慢（听说的）。那么有没有其他的工具呢？</p><p>当然有，cmake 就是这样的一个工具，既能满足跨平台的编译，并且屏蔽了 Makefile 蛋疼的语法，使用一种更加简单的语法编写构建脚本，用在大型项目也毫无压力。</p><p>当然，对于我个人来说，cmake 的使用还是有门槛的，刚接触 cmake 可能还是会被它的语法搞的头疼（cmake 的语法也还是挺折腾的）。但是别急，沉下心来，本篇博文就带你从 cmake 入门到编写一个复杂工程的实战。</p><h1 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h1><h2 id="什么是-cmake"><a href="#什么是-cmake" class="headerlink" title="什么是 cmake"></a>什么是 cmake</h2><p>这里直接引用官网的解释：</p><blockquote><p>CMake is an open-source, cross-platform family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice. The suite of CMake tools were created by Kitware in response to the need for a powerful, cross-platform build environment for open-source projects such as ITK and VTK.</p></blockquote><p>CMake 是一个开源你跨平台的构建工具，语法简单，编译独立，并且很多知名大型项目也在用 CMake,比如 KDE、Netflix 、ReactOS等。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/cmake/1.png" alt=""></p><a id="more"></a><p>OK，话不多说，如何使用呢？</p><h2 id="安装-cmake"><a href="#安装-cmake" class="headerlink" title="安装 cmake"></a>安装 cmake</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span>  cmake3.x86_64</span><br></pre></td></tr></table></figure><p>现在最新版的 cmake 已经到 3.18.2 了。我使用的是 3.17.2 版本。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cmake <span class="comment">--version</span></span><br><span class="line">cmake <span class="built_in">version</span> <span class="number">3.17</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line">CMake suite maintained <span class="keyword">and</span> supported <span class="keyword">by</span> Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure><h2 id="初识-cmake"><a href="#初识-cmake" class="headerlink" title="初识 cmake"></a>初识 cmake</h2><p>使用 cmake 来构建 C++ 项目，需要先编写 cmake 构建脚本，文件名为  CMakeLists.txt，项目顶层目录需要放一个 CMakeLists.txt，同时子目录可以根据需要放置 CMakeLists.txt。</p><p>那么先来看看 CMakeLists.txt 长啥样?</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.8</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_EXTENSIONS <span class="keyword">OFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_STANDARD <span class="number">99</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_EXTENSIONS <span class="keyword">OFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(MUX CXX C)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_definitions</span>(</span><br><span class="line">    -DTEST1   <span class="comment"># define marco</span></span><br><span class="line">    -DTEST2   <span class="comment"># define marco</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># common compiling options</span></span><br><span class="line"><span class="keyword">add_compile_options</span>(</span><br><span class="line">    -Wl,--no-as-needed</span><br><span class="line">    -fno-strict-aliasing</span><br><span class="line">    -fthreadsafe-statics</span><br><span class="line">    -pthread</span><br><span class="line">    <span class="comment">#-fstack-protector-strong</span></span><br><span class="line">    -fno-short-enums</span><br><span class="line">    -fPIC</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span>(XENABLE_TEST3  <span class="string">"enable test3 marco"</span> <span class="keyword">OFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;MUX_BINARY_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;MUX_BINARY_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (XENABLE_TEST3)</span><br><span class="line">    <span class="keyword">add_definitions</span>(-DTEST3)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">NOT</span> CMAKE_BUILD_TYPE)</span><br><span class="line">    <span class="keyword">set</span>(CMAKE_BUILD_TYPE Debug)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"CMAKE_BUILD_TYPE:"</span> <span class="variable">$&#123;CMAKE_BUILD_TYPE&#125;</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"CMAKE_SYSTEM_NAME:"</span> <span class="variable">$&#123;CMAKE_SYSTEM_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"XENABLE_TEST3:"</span> <span class="variable">$&#123;XENABLE_TEST3&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Threads REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># include header dirs</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>)   <span class="comment"># project dir</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/third-party/<span class="keyword">include</span>)   <span class="comment"># project dir</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>)  <span class="comment"># current CMakeLists.txt dir (including sub dir)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># link lib dirs</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/third-party/lib)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;LIBRARY_OUTPUT_PATH&#125;</span>)  <span class="comment"># generate in building</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(demo/bench)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(demo/echo)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(epoll)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(mbase)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(message_handle)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(transport)</span><br></pre></td></tr></table></figure><p>完整的 CMakeLists.txt 见 <a href="https://github.com/smaugx/mux/blob/master/CMakeLists.txt" target="_blank" rel="noopener">我的github</a>，同时我也会以我的github项目 <a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">mux</a> 为例，介绍 cmake 的使用。</p><p>上面的 CMakeLists.txt 乍一看，好多内容，但是别慌，我们来一个个说。</p><h2 id="详解-cmake"><a href="#详解-cmake" class="headerlink" title="详解 cmake"></a>详解 cmake</h2><p>注意：<strong>cmake 的语法可以分为命令(函数）和参数。 命令不缺分大小写，参数区分大小写</strong>。</p><p>注意：<strong>cmake 的语法可以分为命令(函数）和参数。 命令不缺分大小写，参数区分大小写</strong>。</p><h3 id="设置-cmake-版本的要求"><a href="#设置-cmake-版本的要求" class="headerlink" title="设置 cmake 版本的要求"></a>设置 cmake 版本的要求</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">cmake_minimum_required</span><span class="params">(VERSION <span class="number">3.8</span>.<span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure><h3 id="在-cmake-中设置-c-标准，启用-c-11-或以上-根据项目的需求来）"><a href="#在-cmake-中设置-c-标准，启用-c-11-或以上-根据项目的需求来）" class="headerlink" title="在 cmake 中设置 c++ 标准，启用 c++11 或以上(根据项目的需求来）"></a>在 cmake 中设置 c++ 标准，启用 c++11 或以上(根据项目的需求来）</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_CXX_STANDARD <span class="number">11</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_CXX_STANDARD_REQUIRED ON)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_CXX_EXTENSIONS OFF)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_C_STANDARD <span class="number">99</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_C_STANDARD_REQUIRED ON)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_C_EXTENSIONS OFF)</span></span></span><br></pre></td></tr></table></figure><h3 id="设置项目名以及项目语言"><a href="#设置项目名以及项目语言" class="headerlink" title="设置项目名以及项目语言"></a>设置项目名以及项目语言</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">project</span><span class="params">(MUX CXX C)</span></span></span><br></pre></td></tr></table></figure><p>设置完项目名称之后，会自动创建两个变量 <code>&lt;PROJECT-NAME&gt;_SOURCE_DIR</code> 和 <code>&lt;PROJECT-NAME&gt;_BINARY_DIR</code>，对于 <a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">mux</a> 这个项目来说，也就是 <code>MUX_SOURCE_DIR</code> 和 <code>MUX_BINARY_DIR</code>。</p><p><code>MUX_SOURCE_DIR</code> 表示工程顶层目录； <code>MUX_BINARY_DIR</code> 表示 cmake 构建发生的目录。</p><p>因为你一定熟悉或者用过下面的命令或步骤：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mkdir</span> <span class="string">cbuild</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">cbuild</span></span><br><span class="line"><span class="attr">cmake</span> <span class="string">..</span></span><br><span class="line"><span class="attr">make</span></span><br><span class="line"><span class="attr">make</span> <span class="string">test</span></span><br><span class="line"><span class="attr">make</span> <span class="string">install</span></span><br></pre></td></tr></table></figure><p>通常我们会单独新建一个  cbuild 目录，用来构建项目，并且存放过程中产生的文件。那么 cbuild 目录就是 <code>MUX_BINARY_DIR</code> 表示的目录，cbuild 的上一级目录也就是项目顶层目录就是 <code>MUX_SOURCE_DIR</code> 表示的目录。</p><blockquote><p>如果你没有单独新建 <code>cbuild</code> 目录，而是直接在项目顶层目录使用 <code>cmake ..</code> ，那么上面两个变量均指项目顶层目录。</p></blockquote><p>详见 <a href="https://cmake.org/cmake/help/latest/command/project.html" target="_blank" rel="noopener">https://cmake.org/cmake/help/latest/command/project.html</a></p><h3 id="添加编译宏"><a href="#添加编译宏" class="headerlink" title="添加编译宏"></a>添加编译宏</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_definitions(</span><br><span class="line">    -DTEST1   <span class="meta"># <span class="meta-keyword">define</span> marco</span></span><br><span class="line">    -DTEST2   <span class="meta"># <span class="meta-keyword">define</span> marco</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上面是我随便写的两个宏 <code>TEST1</code> 和 <code>TEST2</code>，那么在c++代码中通常是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TEST1</span></span><br><span class="line">    <span class="comment">// do something about test1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TEST2</span></span><br><span class="line">   <span class="comment">// do something about test2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>当然要开启这个宏也可以不用写在 CMakeLists.txt 文件中，可以直接这样使用：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> cbuild &amp;&amp; <span class="built_in">cd</span> cbuild </span><br><span class="line">cmake .. -DTEST1</span><br></pre></td></tr></table></figure><p>这个根据你的项目需求来操作。</p><h3 id="定义一些用户自定义的可选项"><a href="#定义一些用户自定义的可选项" class="headerlink" title="定义一些用户自定义的可选项"></a>定义一些用户自定义的可选项</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">option(<span class="name">XENABLE_TEST3</span>  <span class="string">"enable test3 marco"</span> OFF)</span><br><span class="line"></span><br><span class="line">if (<span class="name">XENABLE_TEST3</span>)</span><br><span class="line">    add_definitions(<span class="name">-DTEST3</span>)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">if (<span class="name">NOT</span> CMAKE_BUILD_TYPE)</span><br><span class="line">    set(<span class="name">CMAKE_BUILD_TYPE</span> Debug)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure><p>使用 option 命令可以自定义一些变量的值，作为一些条件判断的开关很方便。</p><p>详见 <a href="https://cmake.org/cmake/help/latest/command/option.html" target="_blank" rel="noopener">https://cmake.org/cmake/help/latest/command/option.html</a></p><h3 id="添加编译选项"><a href="#添加编译选项" class="headerlink" title="添加编译选项"></a>添加编译选项</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># common compiling options</span><br><span class="line">add_compile_options(</span><br><span class="line">    -<span class="ruby">Wl,--no-as-needed</span></span><br><span class="line"><span class="ruby">    -fno-strict-aliasing</span></span><br><span class="line"><span class="ruby">    -fthreadsafe-statics</span></span><br><span class="line"><span class="ruby">    -pthread</span></span><br><span class="line"><span class="ruby">    <span class="comment">#-fstack-protector-strong</span></span></span><br><span class="line"><span class="ruby">    -fno-short-enums</span></span><br><span class="line"><span class="ruby">    -fPIC</span></span><br><span class="line"><span class="ruby">)</span></span><br></pre></td></tr></table></figure><p>这里就是一些编译选项，根据自己的项目需求修改。</p><h3 id="设置编译二进制-binary-executable-和-binary-lib）存放路径"><a href="#设置编译二进制-binary-executable-和-binary-lib）存放路径" class="headerlink" title="设置编译二进制(binary-executable 和 binary-lib）存放路径"></a>设置编译二进制(binary-executable 和 binary-lib）存放路径</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;MUX_BINARY_DIR&#125;/bin)</span><br><span class="line">set(LIBRARY_OUTPUT_PATH $&#123;MUX_BINARY_DIR&#125;/<span class="class"><span class="keyword">lib</span>)</span></span><br></pre></td></tr></table></figure><p>可以看到上面用到了 <code>MUX_BINARY_DIR</code> 这个变量，也就是说最终编译出来的二进制程序和lib 库会存放在 <code>cbuild/bin</code> 和 <code>cbuild/lib</code> 中。</p><h3 id="打印一些信息到终端"><a href="#打印一些信息到终端" class="headerlink" title="打印一些信息到终端"></a>打印一些信息到终端</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">message</span><span class="params">(STATUS <span class="string">"CMAKE_BUILD_TYPE:"</span> $&#123;CMAKE_BUILD_TYPE&#125;)</span></span></span><br><span class="line"><span class="function"><span class="title">message</span><span class="params">(STATUS <span class="string">"CMAKE_SYSTEM_NAME:"</span> $&#123;CMAKE_SYSTEM_NAME&#125;)</span></span></span><br><span class="line"><span class="function"><span class="title">message</span><span class="params">(STATUS <span class="string">"XENABLE_TEST3:"</span> $&#123;XENABLE_TEST3&#125;)</span></span></span><br></pre></td></tr></table></figure><p>打印一些调试信息，或者编译信息到终端，使用的是 message 命令。</p><p>详见 <a href="https://cmake.org/cmake/help/latest/command/message.html" target="_blank" rel="noopener">https://cmake.org/cmake/help/latest/command/message.html</a>。</p><h3 id="设置头文件路径"><a href="#设置头文件路径" class="headerlink" title="设置头文件路径"></a>设置头文件路径</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">include</span> header dirs</span><br><span class="line"><span class="keyword">include</span><span class="constructor">_directories($&#123;CMAKE_SOURCE_DIR&#125;)</span>   # project dir</span><br><span class="line"><span class="keyword">include</span><span class="constructor">_directories($&#123;CMAKE_SOURCE_DIR&#125;<span class="operator">/</span><span class="params">third</span>-<span class="params">party</span><span class="operator">/</span><span class="params">include</span>)</span>   # project dir</span><br><span class="line"><span class="keyword">include</span><span class="constructor">_directories($&#123;CMAKE_CURRENT_BINARY_DIR&#125;)</span>  # current <span class="module-access"><span class="module"><span class="identifier">CMakeLists</span>.</span></span>txt dir (including sub dir)</span><br></pre></td></tr></table></figure><p>分别解释一下：</p><p><code>CMAKE_SOURCE_DIR</code> 表示工程顶层目录，也就是 <code>MUX_SOURCE_DIR</code>；</p><p><code>CMAKE_CURRENT_BINARY_DIR</code> 表示当前处理的 CMakeLists.txt 所在的目录，对于子目录中的 CMakeLists.txt 来说，即表示这个子目录。</p><p>通常这两个是常用的，必须的。然后使用 <code>include_directories</code> 命令包含其他的一些头文件路径。</p><h3 id="设置依赖库的路径"><a href="#设置依赖库的路径" class="headerlink" title="设置依赖库的路径"></a>设置依赖库的路径</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># link lib dirs</span></span><br><span class="line">link_directories($&#123;CMAKE_SOURCE_DIR&#125;/third-party/<span class="class"><span class="keyword">lib</span>)</span></span><br><span class="line">link_directories($&#123;LIBRARY_OUTPUT_PATH&#125;)  <span class="comment"># generate in building</span></span><br></pre></td></tr></table></figure><p><code>LIBRARY_OUTPUT_PATH</code> 就是上面设置的编译目标二进制库的存放路径，因为实际项目中，子模块之间可能会有一些依赖，子模块单独编译成一个库，然后让其他模块链接。这个目录也就是 <code>cbuild/lib</code> 目录。</p><h3 id="引入子模块-子目录）"><a href="#引入子模块-子目录）" class="headerlink" title="引入子模块(子目录）"></a>引入子模块(子目录）</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">add_subdirectory</span><span class="params">(demo/bench)</span></span></span><br><span class="line"><span class="function"><span class="title">add_subdirectory</span><span class="params">(demo/echo)</span></span></span><br><span class="line"><span class="function"><span class="title">add_subdirectory</span><span class="params">(epoll)</span></span></span><br><span class="line"><span class="function"><span class="title">add_subdirectory</span><span class="params">(mbase)</span></span></span><br><span class="line"><span class="function"><span class="title">add_subdirectory</span><span class="params">(message_handle)</span></span></span><br><span class="line"><span class="function"><span class="title">add_subdirectory</span><span class="params">(transport)</span></span></span><br></pre></td></tr></table></figure><p>使用 <code>add_subdirectory</code> 命令把子模块包含进来，必须确保每个子目录下面有一个 CMakeLists.txt 文件，不然会报错。</p><p><strong>以上就是工程顶层目录的 CMakeLists.txt 的内容，分析下来是不是很清楚呢</strong>？</p><p>那么工程顶层目录的 CMakeLists.txt 其实做的事情就是设置一些基本的变量，宏开关，编译参数，头文件路径，依赖库路径，编译目标保存路径等等，子目录中的 CMakeLists.txt 才是真正产生编译目标的（exe和lib)。</p><h3 id="生成静态库-动态库"><a href="#生成静态库-动态库" class="headerlink" title="生成静态库/动态库"></a>生成静态库/动态库</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># keep all cpp files in varibale $&#123;epoll_src&#125;</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(./src epoll_src)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(epoll STATIC <span class="variable">$&#123;epoll_src&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_dependencies</span>(epoll mbase )</span><br><span class="line"><span class="keyword">target_link_libraries</span>(epoll mbase pthread)</span><br></pre></td></tr></table></figure><p>源文件在这：<a href="https://github.com/smaugx/mux/blob/master/epoll/CMakeLists.txt" target="_blank" rel="noopener">戳我</a></p><p>使用 <code>aux_source_directory</code> 添加源文件，相当于把 src 目录下的所有 c++ 文件保存到 <code>epoll_src</code> 这个变量中；</p><p>使用 <code>add_library</code> 生成目标库（根据需要可以生成静态库和动态库，分别使用 STATIC 和 SHARED)</p><p>然后就是添加这个模块需要依赖到的其他模块，以及链接参数。</p><p>上面的代码最终就会在 <code>cbuild/lib</code> 目录下生成一个 <code>libepoll.a</code> 文件。</p><h3 id="生成二进制可执行文件"><a href="#生成二进制可执行文件" class="headerlink" title="生成二进制可执行文件"></a>生成二进制可执行文件</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># build target echo_server</span><br><span class="line">add<span class="constructor">_executable(<span class="params">echo_server</span> <span class="params">echo_server</span>.<span class="params">cc</span>)</span></span><br><span class="line">add<span class="constructor">_dependencies(<span class="params">echo_server</span> <span class="params">transport</span> <span class="params">msghandler</span> <span class="params">mbase</span>)</span></span><br><span class="line">target<span class="constructor">_link_libraries(<span class="params">echo_server</span> <span class="params">transport</span> <span class="params">msghandler</span> <span class="params">mbase</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># build target echo_client</span><br><span class="line">add<span class="constructor">_executable(<span class="params">echo_client</span> <span class="params">client</span>.<span class="params">cc</span>)</span></span><br><span class="line">add<span class="constructor">_dependencies(<span class="params">echo_client</span> <span class="params">transport</span> <span class="params">msghandler</span> <span class="params">mbase</span>)</span></span><br><span class="line">target<span class="constructor">_link_libraries(<span class="params">echo_client</span> <span class="params">transport</span> <span class="params">msghandler</span> <span class="params">mbase</span>)</span></span><br></pre></td></tr></table></figure><p>源文件在这：<a href="https://github.com/smaugx/mux/blob/master/demo/echo/CMakeLists.txt" target="_blank" rel="noopener">戳我</a></p><p>和生成库大体是类似的，区别是使用的是 <code>add_executable</code> 这个命令。</p><p>其他子模块的 CMakeLists.txt 见<a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">我的github</a>.</p><h2 id="cmake-编译构建"><a href="#cmake-编译构建" class="headerlink" title="cmake 编译构建"></a>cmake 编译构建</h2><p>上面详细的介绍了 CMakeLists.txt 的写法，如果仿照本文，应该也能写出适合你项目的构建脚本，但是可能还不够，其他语法自行 google 学习。</p><p>上面其实是以我的项目 <a href=""></a> 进行的演示，有必要解读一下这个项目的结构层次：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ tree mux -d</span><br><span class="line">mux</span><br><span class="line">├── demo</span><br><span class="line">│   ├── bench</span><br><span class="line">│   └── echo</span><br><span class="line">├── epoll</span><br><span class="line">│   ├── <span class="keyword">include</span></span><br><span class="line">│   └── src</span><br><span class="line">├── mbase</span><br><span class="line">│   └── src</span><br><span class="line">├── message_handle</span><br><span class="line">│   ├── <span class="keyword">include</span></span><br><span class="line">│   └── src</span><br><span class="line">├── third-party</span><br><span class="line">│   ├── <span class="keyword">include</span></span><br><span class="line">│   │   ├── nlohmann</span><br><span class="line">│   │   └── spdlog</span><br><span class="line">│   │       ├── cfg</span><br><span class="line">│   │       ├── details</span><br><span class="line">│   │       ├── fmt</span><br><span class="line">│   │       │   └── bundled</span><br><span class="line">│   │       └── sinks</span><br><span class="line">│   └── <span class="class"><span class="keyword">lib</span></span></span><br><span class="line">└── transport</span><br><span class="line">    ├── <span class="keyword">include</span></span><br><span class="line">    └── src</span><br><span class="line"></span><br><span class="line"><span class="number">24</span> directories</span><br></pre></td></tr></table></figure><p>mux 是工程顶层目录，下面包含的 <code>epoll</code>、<code>mbase</code>、<code>message_handle</code>、<code>transport</code> 这几个目录，均打包成一个静态库； <code>demo</code> 目录下分别包含 <code>bench</code> 和 <code>echo</code> 两个目录，这两个目录下需要构建可执行程序。</p><p>所以首先是<code>epoll</code>、<code>mbase</code>、<code>message_handle</code>、<code>transport</code> 这几个目录生成静态库，然后 <code>bench</code> 和 <code>echo</code> 下的代码依赖于前面的几个模块，生成可执行程序。</p><p>前面其实已经提到了，基本的构建命令如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mkdir</span> <span class="string">cbuild</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">cbuild</span></span><br><span class="line"><span class="attr">cmake</span> <span class="string">..</span></span><br><span class="line"><span class="attr">make</span> <span class="string">-j4</span></span><br></pre></td></tr></table></figure><p>其中注意，如果你没有单独构建 cbuild 目录的话，可能会生成一些中间临时文件污染了目录。并且注意，cmake 后面的 <code>..</code> 表示的是工程顶层的 CMakeLists.txt 的目录。所以如果直接使用的是工程顶层目录构建的话，就应该是 <code>cmake .</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">$ cmake ..</span><br><span class="line">-- The CXX compiler identification is GNU <span class="number">4.8</span><span class="number">.5</span></span><br><span class="line">-- The C compiler identification is GNU <span class="number">4.8</span><span class="number">.5</span></span><br><span class="line">-- Check <span class="keyword">for</span> working CXX <span class="string">compiler:</span> <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>c++</span><br><span class="line">-- Check <span class="keyword">for</span> working CXX <span class="string">compiler:</span> <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>c++ - works</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">-- Check <span class="keyword">for</span> working C <span class="string">compiler:</span> <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>gcc</span><br><span class="line">-- Check <span class="keyword">for</span> working C <span class="string">compiler:</span> <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>gcc - works</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- <span class="string">CMAKE_BUILD_TYPE:</span>Debug</span><br><span class="line">-- <span class="string">CMAKE_SYSTEM_NAME:</span>Linux</span><br><span class="line">-- <span class="string">XENABLE_TEST3:</span>OFF</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread.h</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread.h - found</span><br><span class="line">-- Performing Test CMAKE_HAVE_LIBC_PTHREAD</span><br><span class="line">-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread_create <span class="keyword">in</span> pthreads</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread_create <span class="keyword">in</span> pthreads - not found</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread_create <span class="keyword">in</span> pthread</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread_create <span class="keyword">in</span> pthread - found</span><br><span class="line">-- Found <span class="string">Threads:</span> TRUE</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written <span class="string">to:</span> <span class="regexp">/mnt/</span>centos-share<span class="regexp">/workspace/</span>mux/cbuild</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ make -j4</span><br><span class="line">Scanning dependencies of target mbase</span><br><span class="line">[  <span class="number">5</span>%] Building CXX object mbase<span class="regexp">/CMakeFiles/</span>mbase.dir<span class="regexp">/src/</span>packet.cc.o</span><br><span class="line">[ <span class="number">11</span>%] Linking CXX <span class="keyword">static</span> library ..<span class="regexp">/lib/</span>libmbase.a</span><br><span class="line">[ <span class="number">11</span>%] Built target mbase</span><br><span class="line">Scanning dependencies of target msghandler</span><br><span class="line">Scanning dependencies of target epoll</span><br><span class="line">[ <span class="number">17</span>%] Building CXX object message_handle<span class="regexp">/CMakeFiles/</span>msghandler.dir<span class="regexp">/src/</span>message_handler.cc.o</span><br><span class="line">[ <span class="number">23</span>%] Building CXX object epoll<span class="regexp">/CMakeFiles/</span>epoll.dir<span class="regexp">/src/</span>epoll_tcp_client.cc.o</span><br><span class="line">[ <span class="number">29</span>%] Building CXX object epoll<span class="regexp">/CMakeFiles/</span>epoll.dir<span class="regexp">/src/</span>epoll_tcp_server.cc.o</span><br><span class="line">[ <span class="number">35</span>%] Linking CXX <span class="keyword">static</span> library ..<span class="regexp">/lib/</span>libepoll.a</span><br><span class="line">[ <span class="number">41</span>%] Linking CXX <span class="keyword">static</span> library ..<span class="regexp">/lib/</span>libmsghandler.a</span><br><span class="line">[ <span class="number">41</span>%] Built target msghandler</span><br><span class="line">[ <span class="number">41</span>%] Built target epoll</span><br><span class="line">Scanning dependencies of target transport</span><br><span class="line">[ <span class="number">47</span>%] Building CXX object transport<span class="regexp">/CMakeFiles/</span>transport.dir<span class="regexp">/src/</span>tcp_transport.cc.o</span><br><span class="line">[ <span class="number">52</span>%] Linking CXX <span class="keyword">static</span> library ..<span class="regexp">/lib/</span>libtransport.a</span><br><span class="line">[ <span class="number">52</span>%] Built target transport</span><br><span class="line">Scanning dependencies of target echo_client</span><br><span class="line">Scanning dependencies of target echo_server</span><br><span class="line">Scanning dependencies of target bench_client</span><br><span class="line">Scanning dependencies of target bench_server</span><br><span class="line">[ <span class="number">58</span>%] Building CXX object demo<span class="regexp">/echo/</span>CMakeFiles<span class="regexp">/echo_client.dir/</span>client.cc.o</span><br><span class="line">[ <span class="number">64</span>%] Building CXX object demo<span class="regexp">/bench/</span>CMakeFiles<span class="regexp">/bench_client.dir/</span>client.cc.o</span><br><span class="line">[ <span class="number">70</span>%] Building CXX object demo<span class="regexp">/echo/</span>CMakeFiles<span class="regexp">/echo_server.dir/</span>echo_server.cc.o</span><br><span class="line">[ <span class="number">76</span>%] Building CXX object demo<span class="regexp">/bench/</span>CMakeFiles<span class="regexp">/bench_server.dir/</span>bench_server.cc.o</span><br><span class="line">[ <span class="number">82</span>%] Linking CXX executable ..<span class="regexp">/../</span>bin/echo_client</span><br><span class="line">[ <span class="number">88</span>%] Linking CXX executable ..<span class="regexp">/../</span>bin/echo_server</span><br><span class="line">[ <span class="number">94</span>%] Linking CXX executable ..<span class="regexp">/../</span>bin/bench_server</span><br><span class="line">[<span class="number">100</span>%] Linking CXX executable ..<span class="regexp">/../</span>bin/bench_client</span><br><span class="line">[<span class="number">100</span>%] Built target echo_client</span><br><span class="line">[<span class="number">100</span>%] Built target echo_server</span><br><span class="line">[<span class="number">100</span>%] Built target bench_client</span><br><span class="line">[<span class="number">100</span>%] Built target bench_server</span><br></pre></td></tr></table></figure><p>看看生成了啥：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ls cbuild/bin/</span><br><span class="line">bench_client  bench_server  echo_client  echo_server</span><br><span class="line"></span><br><span class="line">$ ls cbuild/<span class="class"><span class="keyword">lib</span>/</span></span><br><span class="line">libepoll.a  libmbase.a  libmsghandler.a  libtransport.a</span><br></pre></td></tr></table></figure><p>Over!</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>cmake 的构建其实认真熟悉之后，也还是能快速上手的，不要产生排斥心理，不然学起来就很慢很费劲。所以建议第一次接触 cmake 的或者以前一直抵触 cmake 的童鞋，静下心来，认认真真的看完本文或者其他的入门例子，那么你也能快速写一个多目录，多层次结构的 cmake 工程。</p><p>cmake 中其他的一些用法，建议随时查看官方的 <a href="https://cmake.org/cmake/help/latest/index.html" target="_blank" rel="noopener">cook book</a>.</p><p>加油，少年，别怕！</p><p>另外，文中涉及到的项目可以在<a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">我的github</a> 找到。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://aiden-dong.github.io/2019/07/20/CMake%E6%95%99%E7%A8%8B%E4%B9%8BCMake%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BA%94%E7%94%A8/" target="_blank" rel="noopener">CMake 教程 | CMake 从入门到应用</a></p><p><a href="https://juejin.im/post/6844903558861553672" target="_blank" rel="noopener">cmake使用教程</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#105;&#x6e;&#x75;&#x78;&#99;&#x6f;&#100;&#101;&#x32;&#110;&#105;&#x6b;&#x69;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;">&#x6c;&#105;&#x6e;&#x75;&#x78;&#99;&#x6f;&#100;&#101;&#x32;&#110;&#105;&#x6b;&#x69;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;</a></p></li></ul><p>2020-09-02 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我是一个 linux c++ 开发者，但是一直对 Makefile 的语法很是头痛，每次都记不住，所以每次写 Makefile 都很痛苦，Makefile 里需要你自己编写依赖和推导规则，这个过程能不能简单点呢？&lt;/p&gt;
&lt;p&gt;对于编译一个 C++ 工程来说，也许需要的就是头文件路径、库路径、编译参数，剩下的东西基本也不重要，这三样足够去编译一个工程了。所以有没有一个工具能简单点的去实现 C++ 项目的构建呢？&lt;/p&gt;
&lt;p&gt;答案是有的，上一篇博文 &lt;a href=&quot;http://rebootcat.com/2020/08/30/scons/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;scons构建C++项目&lt;/a&gt; 介绍了 使用 scons 来构建 C++ 项目，大大提高了编写构建脚本的效率，使用起来也极为方便，对于熟悉 python 的童鞋来说真的是大大的福音；但 scons 的问题就是在大型项目的时候构建起来可能会很慢（听说的）。那么有没有其他的工具呢？&lt;/p&gt;
&lt;p&gt;当然有，cmake 就是这样的一个工具，既能满足跨平台的编译，并且屏蔽了 Makefile 蛋疼的语法，使用一种更加简单的语法编写构建脚本，用在大型项目也毫无压力。&lt;/p&gt;
&lt;p&gt;当然，对于我个人来说，cmake 的使用还是有门槛的，刚接触 cmake 可能还是会被它的语法搞的头疼（cmake 的语法也还是挺折腾的）。但是别急，沉下心来，本篇博文就带你从 cmake 入门到编写一个复杂工程的实战。&lt;/p&gt;
&lt;h1 id=&quot;CMake&quot;&gt;&lt;a href=&quot;#CMake&quot; class=&quot;headerlink&quot; title=&quot;CMake&quot;&gt;&lt;/a&gt;CMake&lt;/h1&gt;&lt;h2 id=&quot;什么是-cmake&quot;&gt;&lt;a href=&quot;#什么是-cmake&quot; class=&quot;headerlink&quot; title=&quot;什么是 cmake&quot;&gt;&lt;/a&gt;什么是 cmake&lt;/h2&gt;&lt;p&gt;这里直接引用官网的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CMake is an open-source, cross-platform family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice. The suite of CMake tools were created by Kitware in response to the need for a powerful, cross-platform build environment for open-source projects such as ITK and VTK.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CMake 是一个开源你跨平台的构建工具，语法简单，编译独立，并且很多知名大型项目也在用 CMake,比如 KDE、Netflix 、ReactOS等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/cmake/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.rebootcat.com/categories/c/"/>
    
    
      <category term="c++" scheme="http://www.rebootcat.com/tags/c/"/>
    
      <category term="linux" scheme="http://www.rebootcat.com/tags/linux/"/>
    
      <category term="cmake" scheme="http://www.rebootcat.com/tags/cmake/"/>
    
      <category term="CMakeLists.txt" scheme="http://www.rebootcat.com/tags/CMakeLists-txt/"/>
    
      <category term="scons" scheme="http://www.rebootcat.com/tags/scons/"/>
    
      <category term="c" scheme="http://www.rebootcat.com/tags/c/"/>
    
      <category term="makefile" scheme="http://www.rebootcat.com/tags/makefile/"/>
    
      <category term="compile" scheme="http://www.rebootcat.com/tags/compile/"/>
    
      <category term="build" scheme="http://www.rebootcat.com/tags/build/"/>
    
  </entry>
  
  <entry>
    <title>Scons构建C++项目</title>
    <link href="http://www.rebootcat.com/2020/08/30/scons/"/>
    <id>http://www.rebootcat.com/2020/08/30/scons/</id>
    <published>2020-08-30T03:23:58.000Z</published>
    <updated>2020-09-03T13:37:57.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我是一个 linux c++ 开发者，但是一直对 Makefile 的语法很是头痛，每次都记不住，所以每次写 Makefile 都很痛苦，Makefile 里需要你自己编写依赖和推导规则，这个过程能不能简单点呢？</p><p>对于编译一个 C++ 工程来说，也许需要的就是头文件路径、库路径、编译参数，剩下的东西基本也不重要，这三样足够去编译一个工程了。所以有没有一个工具能简单点的去实现 C++ 项目的构建呢？</p><p>答案是有的，Scons 就是答案。</p><h1 id="Scons"><a href="#Scons" class="headerlink" title="Scons"></a>Scons</h1><h2 id="什么是-scons"><a href="#什么是-scons" class="headerlink" title="什么是 scons"></a>什么是 scons</h2><p>这里直接引用官网的解释：</p><blockquote><p>What is SCons?</p><blockquote><p>SCons is an Open Source software construction tool—that is, a next-generation build tool. Think of SCons as an improved, cross-platform substitute for the classic Make utility with integrated functionality similar to autoconf/automake and compiler caches such as ccache. In short, SCons is an easier, more reliable and faster way to build software.</p></blockquote></blockquote><blockquote><p>What makes SCons better?</p></blockquote><blockquote><blockquote></blockquote></blockquote><ul><li>Configuration files are Python scripts–use the power of a real programming language to solve build problems.</li><li>Reliable, automatic dependency analysis built-in for C, C++ and Fortran–no more “make depend” or “make clean” to get all of the dependencies. Dependency analysis is easily extensible through user-defined dependency Scanners for other languages or file types.</li><li>Built-in support for C, C++, D, Java, Fortran, Yacc, Lex, Qt and SWIG, and building TeX and LaTeX documents. Easily extensible through user-defined Builders for other languages or file types.</li><li>Building from central repositories of source code and/or pre-built targets.</li><li>Built-in support for fetching source files from SCCS, RCS, CVS, BitKeeper and Perforce.</li><li>Built-in support for Microsoft Visual Studio .NET and past Visual Studio versions, including generation of .dsp, .dsw, .sln and .vcproj files.</li><li>Reliable detection of build changes using MD5 signatures; optional, configurable support for traditional timestamps.</li><li>Improved support for parallel builds–like make -j but keeps N jobs running simultaneously regardless of directory hierarchy.</li><li>Integrated Autoconf-like support for finding #include files, libraries, functions and typedefs.</li><li>Global view of all dependencies–no more multiple build passes or reordering targets to build everything.</li><li>Ability to share built files in a cache to speed up multiple builds–like ccache but for any type of target file, not just C/C++ compilation.</li><li>Designed from the ground up for cross-platform builds, and known to work on Linux, other POSIX systems (including AIX, BSD systems, HP/UX, IRIX and Solaris), Windows NT, Mac OS X, and OS/2.</li></ul><p>最大特点就是使用 Python 语法来编写编译构建脚本，并且支持依赖自动推导，支持编译 C/C++/D/Java/Fortran等项目，并且是跨平台的(因为 python 是跨平台的）。</p><a id="more"></a><p>所以如果你对 python 熟悉的话，而且你和我对 C++  Makefile 有一样的烦恼，那么这对你将是一个好消息。 你将可以用 python 来编写构建脚本，而且会很简单，对于复杂的大型项目也能快速构建好。（也许只要 30 分钟）</p><h2 id="安装-scons"><a href="#安装-scons" class="headerlink" title="安装 scons"></a>安装 scons</h2><p>因为 scons 是基于 python 来构建的，所以毋容置疑，首先是需要准备好 python 环境，然后使用下述命令安装 scons 工具。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> scons</span><br></pre></td></tr></table></figure><h2 id="scons-使用语法"><a href="#scons-使用语法" class="headerlink" title="scons 使用语法"></a>scons 使用语法</h2><p>scons 构建脚本由一个 SConstruct 文件和多个 SConscript 文件构成。</p><p>SConstruct 通常位于项目顶层目录，然后 SConscript 通常位于子目录（子模块）。</p><p>那么来看一下 SConstruct 脚本长啥样?</p><h3 id="SConstruct"><a href="#SConstruct" class="headerlink" title="SConstruct"></a>SConstruct</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf-<span class="number">8</span> -*-</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import platform</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">env = Environment()</span><br><span class="line">abs_path = os.getcwd()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'workspace path:&#123;0&#125;'</span>.format(abs_path)</span></span>)</span><br><span class="line"></span><br><span class="line">sbuild_dir = <span class="string">'sbuild'</span></span><br><span class="line"></span><br><span class="line">headers = [<span class="string">'.'</span>, <span class="string">'third-party/include'</span>]</span><br><span class="line">libs = [<span class="string">'./third-party/lib'</span>]</span><br><span class="line"></span><br><span class="line">abs_headers = []</span><br><span class="line">abs_libs = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> headers:</span><br><span class="line">    abs_item = os<span class="selector-class">.path</span>.join(abs_path, item)</span><br><span class="line">    abs_headers.append(abs_item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> libs:</span><br><span class="line">    abs_item = os<span class="selector-class">.path</span>.join(abs_path, item)</span><br><span class="line">    abs_libs.append(abs_item)</span><br><span class="line"></span><br><span class="line">build_dir = os<span class="selector-class">.path</span>.join(abs_path, sbuild_dir)</span><br><span class="line">abs_libs.append(os<span class="selector-class">.path</span>.join(build_dir, <span class="string">'lib'</span>))</span><br><span class="line"></span><br><span class="line">CCFLAGS = <span class="string">'-ggdb -std=c++11'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'\nheaders path:'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(abs_headers)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'\n'</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'libs path:'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(abs_libs)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'\n'</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"begin load SConscript"</span>)</span></span></span><br><span class="line"></span><br><span class="line">env[<span class="string">"headers"</span>] = abs_headers</span><br><span class="line">env[<span class="string">"libs"</span>]    = abs_libs</span><br><span class="line">env[<span class="string">"MUX_DIR"</span>] = abs_path</span><br><span class="line">env[<span class="string">'ccflags'</span>] = CCFLAGS</span><br><span class="line">env[<span class="string">'build_dir'</span>] = build_dir</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">Export</span><span class="params">(<span class="string">'env'</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">SConscript</span><span class="params">([<span class="string">'./mbase/SConscript'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">SConscript</span><span class="params">([<span class="string">'./message_handle/SConscript'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">SConscript</span><span class="params">([<span class="string">'./epoll/SConscript'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">SConscript</span><span class="params">([<span class="string">'./transport/SConscript'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">SConscript</span><span class="params">([<span class="string">'./demo/bench/SConscript'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">SConscript</span><span class="params">([<span class="string">'./demo/echo/SConscript'</span>])</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"\n All Done, Please Check &#123;0&#125;"</span>.format(env[<span class="string">'build_dir'</span>])</span></span>)</span><br></pre></td></tr></table></figure><p>来分析一下这个文件，源文件可以直接在 <a href="https://github.com/smaugx/mux/blob/master/SConstruct" target="_blank" rel="noopener">我的github</a>下载。</p><p>SConstruct 文件主要做了两件事：</p><ul><li>env 环境变量的构造，主要是头文件路径，库路径，编译参数，自定义的一些变量等</li><li>使用 SConscript 函数解析执行子模块的 SConscript 文件 </li></ul><p>需要注意的是 SConstruct 和 SConscript 共享变量使用的就是 env 这个变量，你可以看到上面有一句：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Export</span><span class="params">(<span class="string">'env'</span>)</span></span></span><br></pre></td></tr></table></figure><p>这句很重要。</p><h3 id="SConscript"><a href="#SConscript" class="headerlink" title="SConscript"></a>SConscript</h3><p>那么位于子模块或者子目录的 SConscript 文件长啥样呢？</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf<span class="number">-8</span> -*-</span><br><span class="line"></span><br><span class="line">import <span class="built_in">os</span></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">Import(<span class="string">'env'</span>)</span><br><span class="line">project_dir  = env[<span class="string">'MUX_DIR'</span>]</span><br><span class="line"></span><br><span class="line">epoll_lib  = <span class="string">'epoll'</span></span><br><span class="line"></span><br><span class="line">epoll_src_path = <span class="built_in">os</span>.<span class="built_in">path</span>.join(project_dir, <span class="string">'epoll/src'</span>)</span><br><span class="line">epoll_sources = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">os</span>.listdir(epoll_src_path):</span><br><span class="line">    <span class="keyword">if</span> item.endswith(<span class="string">'.cc'</span>) <span class="keyword">or</span> item.endswith(<span class="string">'.cpp'</span>) <span class="keyword">or</span> item.endswith(<span class="string">'.cxx'</span>):</span><br><span class="line">        abs_item = <span class="built_in">os</span>.<span class="built_in">path</span>.join(epoll_src_path, item)</span><br><span class="line">        epoll_sources.append(abs_item)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'\nbuild target:lib&#123;0&#125;.a'</span>.<span class="built_in">format</span>(epoll_lib))</span><br><span class="line"><span class="built_in">print</span>(epoll_sources)</span><br><span class="line"></span><br><span class="line">lib_dir = <span class="built_in">os</span>.<span class="built_in">path</span>.join(env[<span class="string">'build_dir'</span>], <span class="string">'lib'</span>)</span><br><span class="line"></span><br><span class="line">link_libraries = [<span class="string">'mbase'</span>]</span><br><span class="line"><span class="keyword">for</span> lib_name <span class="keyword">in</span> link_libraries:</span><br><span class="line">    lib_name = <span class="string">"&#123;0&#125;&#123;1&#125;&#123;2&#125;"</span>.<span class="built_in">format</span>(env[<span class="string">'LIBPREFIX'</span>], lib_name, env[<span class="string">'LIBSUFFIX'</span>])</span><br><span class="line">    abs_lib_name = <span class="built_in">os</span>.<span class="built_in">path</span>.join(lib_dir, lib_name)</span><br><span class="line">    epoll_sources.append(abs_lib_name)</span><br><span class="line"></span><br><span class="line">env.StaticLibrary(target = <span class="built_in">os</span>.<span class="built_in">path</span>.join(lib_dir, epoll_lib),</span><br><span class="line">        source  = epoll_sources,</span><br><span class="line">        CPPPATH = env[<span class="string">'headers'</span>], # include</span><br><span class="line">        LIBPATH = env[<span class="string">'libs'</span>],    # lib <span class="built_in">path</span></span><br><span class="line">        LIBS    = [<span class="string">'pthread'</span>],    # link lib</span><br><span class="line">        CCFLAGS = env[<span class="string">'ccflags'</span>]</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>来分析一下这个文件，源文件可以直接在 <a href="https://github.com/smaugx/mux/blob/master/epoll/SConscript" target="_blank" rel="noopener">我的github</a>下载。</p><p>SConscript 主要做了两件事：</p><ul><li>构造一个源文件列表（用来构建 target 所需要使用的源文件）</li><li>根据需要构建 static_lib/dynamic_lib/binary</li></ul><p>当然，还有一点很重要，上面其实提到了，SConscript 和 SConstruct 用来共享变量使用的是 env 这个变量，所以你可以看到一句很重要的：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Import</span><span class="params">(<span class="string">'env'</span>)</span></span></span><br></pre></td></tr></table></figure><p>构造源文件列表，对于 Python 来说，简直是小菜一碟，太简单了；</p><p>然后如何生成目标文件呢？</p><p>1 生成二进制文件</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">env</span>.Program(target = os.path.join(bin_dir, echo_server_bin),</span><br><span class="line">        <span class="keyword">source</span>  = echo_server_sources,</span><br><span class="line">        CPPPATH = <span class="keyword">env</span>[<span class="string">'headers'</span>],</span><br><span class="line">        LIBPATH = <span class="keyword">env</span>[<span class="string">'libs'</span>],</span><br><span class="line">        LIBS    = [<span class="string">'transport'</span>,<span class="string">'msghandler'</span>,<span class="string">'epoll'</span>, <span class="string">'mbase'</span>, <span class="string">'pthread'</span>],</span><br><span class="line">        CCFLAGS = <span class="keyword">env</span>[<span class="string">'ccflags'</span>]</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>2  生成静态库</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">env</span>.StaticLibrary(target = os.path.join(lib_dir, epoll_lib),</span><br><span class="line">        source  = epoll_sources,</span><br><span class="line">        CPPPATH = <span class="keyword">env</span>[<span class="string">'headers'</span>], <span class="comment"># include</span></span><br><span class="line">        LIBPATH = <span class="keyword">env</span>[<span class="string">'libs'</span>],    <span class="comment"># lib path</span></span><br><span class="line">        LIBS    = [<span class="string">'pthread'</span>],    <span class="comment"># link lib</span></span><br><span class="line">        CCFLAGS = <span class="keyword">env</span>[<span class="string">'ccflags'</span>]</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>3 生成动态库</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">env</span>.SharedLibrary(target = os.path.join(lib_dir, epoll_lib),</span><br><span class="line">        source  = epoll_sources,</span><br><span class="line">        CPPPATH = <span class="keyword">env</span>[<span class="string">'headers'</span>], <span class="comment"># include</span></span><br><span class="line">        LIBPATH = <span class="keyword">env</span>[<span class="string">'libs'</span>],    <span class="comment"># lib path</span></span><br><span class="line">        LIBS    = [<span class="string">'pthread'</span>],    <span class="comment"># link lib</span></span><br><span class="line">        CCFLAGS = <span class="keyword">env</span>[<span class="string">'ccflags'</span>]</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>上面 3 个函数的参数都是类似的：</p><ul><li>target: 指定需要生成的目标文件，通常我自己会写一个绝对路径；对于 lib 来说只需要写名字就行，前缀和后缀不需要写。(eg. target = ‘/root/scons_repo/sbuild/lib/test’ ，会生成 /root/scons_repo/sbuild/lib/libtest.a)</li><li>source: 编译目标文件需要的源文件列表</li><li>CPPPATH: 通常就是需要 Include 的头文件路径</li><li>LIBPATH: 通常就是需要链接的库路径</li><li>LIBS: 需要链接的库列表</li><li>CCFLAGS: 编译参数</li></ul><p><strong>attention:</strong></p><p><strong>上面有一个坑我自己碰到的，当我构建目标生成一个静态库的时候，需要链接其他的静态库，如果使用 $LIBPATH 和 $LIBS 指定链接库的话，scons 并没有链接这些库。尝试了很多方法，搜索了很多，也没有解决这个问题</strong>。</p><p><strong>最后是这样解决的。把需要链接的静态库添加到 source 参数中，和其他 cc/cpp 源文件一样放在一起，并且这些库需要使用绝对路径</strong>。</p><p>通常为了跨平台的方便，需要考虑lib 的前后缀，可以这样写：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">link_libraries = [<span class="string">'test1'</span>, <span class="string">'test2'</span>]</span><br><span class="line"><span class="keyword">for</span> lib_name <span class="keyword">in</span> link_libraries:</span><br><span class="line">    lib_name = <span class="string">"&#123;0&#125;&#123;1&#125;&#123;2&#125;"</span>.<span class="built_in">format</span>(env[<span class="string">'LIBPREFIX'</span>], lib_name, env[<span class="string">'LIBSUFFIX'</span>])</span><br><span class="line">    abs_lib_name = <span class="built_in">os</span>.<span class="built_in">path</span>.join(lib_dir, lib_name)</span><br><span class="line">    sources.append(abs_lib_name)</span><br></pre></td></tr></table></figure><h2 id="scons-命令"><a href="#scons-命令" class="headerlink" title="scons 命令"></a>scons 命令</h2><p>上面详细讲解了如何使用 python 编写构建脚本，那么写好之后怎么用呢？</p><p>常用的几个命令：</p><p><strong>编译</strong>：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scons</span></span><br></pre></td></tr></table></figure><p>如果需要并行编译：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">scons </span>-<span class="keyword">j4</span></span><br></pre></td></tr></table></figure><p><strong>清理</strong>：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scons -c</span></span><br></pre></td></tr></table></figure><p>然后就会按照你脚本里写的方式去构建目标了。</p><p>这里贴一下 <a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">我的项目</a> 编译的输出：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">$ scons</span><br><span class="line"><span class="symbol">scons:</span> Reading SConscript files ...</span><br><span class="line">workspace <span class="symbol">path:</span>/mnt/centos-share/workspace/mux</span><br><span class="line"></span><br><span class="line">headers <span class="symbol">path:</span></span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/.'</span>, <span class="string">'/mnt/centos-share/workspace/mux/third-party/include'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libs <span class="symbol">path:</span></span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/./third-party/lib'</span>, <span class="string">'/mnt/centos-share/workspace/mux/sbuild/lib'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span> load SConscript</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>libmbase.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/mbase/src/packet.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>libmsghandler.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/message_handle/src/message_handler.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>libepoll.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/epoll/src/epoll_tcp_client.cc'</span>, <span class="string">'/mnt/centos-share/workspace/mux/epoll/src/epoll_tcp_server.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>libtransport.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/transport/src/tcp_transport.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>bench_server</span><br><span class="line">[<span class="string">'bench_server.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>bench_client</span><br><span class="line">[<span class="string">'client.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>echo_server</span><br><span class="line">[<span class="string">'echo_server.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>echo_client</span><br><span class="line">[<span class="string">'client.cc'</span>]</span><br><span class="line"></span><br><span class="line"> All Done, Please Check /mnt/centos-share/workspace/mux/sbuild</span><br><span class="line"><span class="symbol">scons:</span> done reading SConscript files.</span><br><span class="line"><span class="symbol">scons:</span> Building targets ...</span><br><span class="line">g++ -o demo/bench/bench_server.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> demo/bench/bench_server.cc</span><br><span class="line">g++ -o demo/bench/client.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> demo/bench/client.cc</span><br><span class="line">g++ -o demo/echo/client.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> demo/echo/client.cc</span><br><span class="line">g++ -o demo/echo/echo_server.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> demo/echo/echo_server.cc</span><br><span class="line">g++ -o epoll/src/epoll_tcp_client.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> epoll/src/epoll_tcp_client.cc</span><br><span class="line">g++ -o epoll/src/epoll_tcp_server.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> epoll/src/epoll_tcp_server.cc</span><br><span class="line">g++ -o mbase/src/packet.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> mbase/src/packet.cc</span><br><span class="line">g++ -o message_handle/src/message_handler.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> message_handle/src/message_handler.cc</span><br><span class="line">g++ -o transport/src/tcp_transport.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> transport/src/tcp_transport.cc</span><br><span class="line">ar rc sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libmbase</span>.<span class="title">a</span> <span class="title">mbase</span>/<span class="title">src</span>/<span class="title">packet</span>.<span class="title">o</span></span></span><br><span class="line">ranlib sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libmbase</span>.<span class="title">a</span></span></span><br><span class="line">ar rc sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libepoll</span>.<span class="title">a</span> <span class="title">epoll</span>/<span class="title">src</span>/<span class="title">epoll_tcp_client</span>.<span class="title">o</span> <span class="title">epoll</span>/<span class="title">src</span>/<span class="title">epoll_tcp_server</span>.<span class="title">o</span> <span class="title">sbuild</span>/<span class="title">lib</span>/<span class="title">libmbase</span>.<span class="title">a</span></span></span><br><span class="line">ranlib sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libepoll</span>.<span class="title">a</span></span></span><br><span class="line">ar rc sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libtransport</span>.<span class="title">a</span> <span class="title">transport</span>/<span class="title">src</span>/<span class="title">tcp_transport</span>.<span class="title">o</span> <span class="title">sbuild</span>/<span class="title">lib</span>/<span class="title">libepoll</span>.<span class="title">a</span> <span class="title">sbuild</span>/<span class="title">lib</span>/<span class="title">libmbase</span>.<span class="title">a</span></span></span><br><span class="line">ranlib sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libtransport</span>.<span class="title">a</span></span></span><br><span class="line">ar rc sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libmsghandler</span>.<span class="title">a</span> <span class="title">message_handle</span>/<span class="title">src</span>/<span class="title">message_handler</span>.<span class="title">o</span> <span class="title">sbuild</span>/<span class="title">lib</span>/<span class="title">libmbase</span>.<span class="title">a</span></span></span><br><span class="line">ranlib sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libmsghandler</span>.<span class="title">a</span></span></span><br><span class="line">g++ -o sbuild/bin/bench_client demo/bench/client.o -Lthird-party/<span class="class"><span class="keyword">lib</span> -<span class="title">Lsbuild</span>/<span class="title">lib</span> -<span class="title">ltransport</span> -<span class="title">lmsghandler</span> -<span class="title">lepoll</span> -<span class="title">lmbase</span> -<span class="title">lpthread</span></span></span><br><span class="line">g++ -o sbuild/bin/bench_server demo/bench/bench_server.o -Lthird-party/<span class="class"><span class="keyword">lib</span> -<span class="title">Lsbuild</span>/<span class="title">lib</span> -<span class="title">ltransport</span> -<span class="title">lmsghandler</span> -<span class="title">lepoll</span> -<span class="title">lmbase</span> -<span class="title">lpthread</span></span></span><br><span class="line">g++ -o sbuild/bin/echo_client demo/echo/client.o -Lthird-party/<span class="class"><span class="keyword">lib</span> -<span class="title">Lsbuild</span>/<span class="title">lib</span> -<span class="title">ltransport</span> -<span class="title">lmsghandler</span> -<span class="title">lepoll</span> -<span class="title">lmbase</span> -<span class="title">lpthread</span></span></span><br><span class="line">g++ -o sbuild/bin/echo_server demo/echo/echo_server.o -Lthird-party/<span class="class"><span class="keyword">lib</span> -<span class="title">Lsbuild</span>/<span class="title">lib</span> -<span class="title">ltransport</span> -<span class="title">lmsghandler</span> -<span class="title">lepoll</span> -<span class="title">lmbase</span> -<span class="title">lpthread</span></span></span><br><span class="line"><span class="symbol">scons:</span> done building targets.</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">$ scons -c</span><br><span class="line"><span class="string">scons:</span> Reading SConscript files ...</span><br><span class="line">workspace <span class="string">path:</span><span class="regexp">/mnt/</span>centos-share<span class="regexp">/workspace/</span>mux</span><br><span class="line"></span><br><span class="line">headers <span class="string">path:</span></span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/.'</span>, <span class="string">'/mnt/centos-share/workspace/mux/third-party/include'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libs <span class="string">path:</span></span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/./third-party/lib'</span>, <span class="string">'/mnt/centos-share/workspace/mux/sbuild/lib'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">begin load SConscript</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>libmbase.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/mbase/src/packet.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>libmsghandler.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/message_handle/src/message_handler.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>libepoll.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/epoll/src/epoll_tcp_client.cc'</span>, <span class="string">'/mnt/centos-share/workspace/mux/epoll/src/epoll_tcp_server.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>libtransport.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/transport/src/tcp_transport.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>bench_server</span><br><span class="line">[<span class="string">'bench_server.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>bench_client</span><br><span class="line">[<span class="string">'client.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>echo_server</span><br><span class="line">[<span class="string">'echo_server.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>echo_client</span><br><span class="line">[<span class="string">'client.cc'</span>]</span><br><span class="line"></span><br><span class="line"> All Done, Please Check <span class="regexp">/mnt/</span>centos-share<span class="regexp">/workspace/</span>mux/sbuild</span><br><span class="line"><span class="string">scons:</span> done reading SConscript files.</span><br><span class="line"><span class="string">scons:</span> Cleaning targets ...</span><br><span class="line">Removed demo<span class="regexp">/bench/</span>bench_server.o</span><br><span class="line">Removed demo<span class="regexp">/bench/</span>client.o</span><br><span class="line">Removed demo<span class="regexp">/echo/</span>client.o</span><br><span class="line">Removed demo<span class="regexp">/echo/</span>echo_server.o</span><br><span class="line">Removed epoll<span class="regexp">/src/</span>epoll_tcp_client.o</span><br><span class="line">Removed epoll<span class="regexp">/src/</span>epoll_tcp_server.o</span><br><span class="line">Removed mbase<span class="regexp">/src/</span>packet.o</span><br><span class="line">Removed message_handle<span class="regexp">/src/</span>message_handler.o</span><br><span class="line">Removed transport<span class="regexp">/src/</span>tcp_transport.o</span><br><span class="line">Removed sbuild<span class="regexp">/lib/</span>libmbase.a</span><br><span class="line">Removed sbuild<span class="regexp">/lib/</span>libepoll.a</span><br><span class="line">Removed sbuild<span class="regexp">/lib/</span>libtransport.a</span><br><span class="line">Removed sbuild<span class="regexp">/lib/</span>libmsghandler.a</span><br><span class="line">Removed sbuild<span class="regexp">/bin/</span>bench_client</span><br><span class="line">Removed sbuild<span class="regexp">/bin/</span>bench_server</span><br><span class="line">Removed sbuild<span class="regexp">/bin/</span>echo_client</span><br><span class="line">Removed sbuild<span class="regexp">/bin/</span>echo_server</span><br><span class="line"><span class="string">scons:</span> done cleaning targets.</span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>scons 使用 python 脚本来构建项目，如果对 python 熟悉的话，那么编写编译构建脚本将会大大提高效率，再也不用局限在 Makefile 的蛋疼语法里面了。</p><p>当然 scons 的缺点也有，据说在大型项目的时候，可能会很慢。这个我还没碰到过，因为没有用到大型项目中。</p><p>下一篇，分享下 cmake 构建 C++ 项目的一些语法和步骤。</p><p><a href="http://rebootcat.com/2020/09/02/cmake/" target="_blank" rel="noopener">cmake教程|cmake入门实战</a></p><p>另外，文中涉及到的项目可以在<a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">我的github</a> 找到。</p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#105;&#x6e;&#x75;&#x78;&#99;&#111;&#100;&#101;&#x32;&#110;&#105;&#107;&#x69;&#64;&#103;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;">&#x6c;&#105;&#x6e;&#x75;&#x78;&#99;&#111;&#100;&#101;&#x32;&#110;&#105;&#107;&#x69;&#64;&#103;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;</a></p></li></ul><p>2020-08-30 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我是一个 linux c++ 开发者，但是一直对 Makefile 的语法很是头痛，每次都记不住，所以每次写 Makefile 都很痛苦，Makefile 里需要你自己编写依赖和推导规则，这个过程能不能简单点呢？&lt;/p&gt;
&lt;p&gt;对于编译一个 C++ 工程来说，也许需要的就是头文件路径、库路径、编译参数，剩下的东西基本也不重要，这三样足够去编译一个工程了。所以有没有一个工具能简单点的去实现 C++ 项目的构建呢？&lt;/p&gt;
&lt;p&gt;答案是有的，Scons 就是答案。&lt;/p&gt;
&lt;h1 id=&quot;Scons&quot;&gt;&lt;a href=&quot;#Scons&quot; class=&quot;headerlink&quot; title=&quot;Scons&quot;&gt;&lt;/a&gt;Scons&lt;/h1&gt;&lt;h2 id=&quot;什么是-scons&quot;&gt;&lt;a href=&quot;#什么是-scons&quot; class=&quot;headerlink&quot; title=&quot;什么是 scons&quot;&gt;&lt;/a&gt;什么是 scons&lt;/h2&gt;&lt;p&gt;这里直接引用官网的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is SCons?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SCons is an Open Source software construction tool—that is, a next-generation build tool. Think of SCons as an improved, cross-platform substitute for the classic Make utility with integrated functionality similar to autoconf/automake and compiler caches such as ccache. In short, SCons is an easier, more reliable and faster way to build software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What makes SCons better?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Configuration files are Python scripts–use the power of a real programming language to solve build problems.&lt;/li&gt;
&lt;li&gt;Reliable, automatic dependency analysis built-in for C, C++ and Fortran–no more “make depend” or “make clean” to get all of the dependencies. Dependency analysis is easily extensible through user-defined dependency Scanners for other languages or file types.&lt;/li&gt;
&lt;li&gt;Built-in support for C, C++, D, Java, Fortran, Yacc, Lex, Qt and SWIG, and building TeX and LaTeX documents. Easily extensible through user-defined Builders for other languages or file types.&lt;/li&gt;
&lt;li&gt;Building from central repositories of source code and/or pre-built targets.&lt;/li&gt;
&lt;li&gt;Built-in support for fetching source files from SCCS, RCS, CVS, BitKeeper and Perforce.&lt;/li&gt;
&lt;li&gt;Built-in support for Microsoft Visual Studio .NET and past Visual Studio versions, including generation of .dsp, .dsw, .sln and .vcproj files.&lt;/li&gt;
&lt;li&gt;Reliable detection of build changes using MD5 signatures; optional, configurable support for traditional timestamps.&lt;/li&gt;
&lt;li&gt;Improved support for parallel builds–like make -j but keeps N jobs running simultaneously regardless of directory hierarchy.&lt;/li&gt;
&lt;li&gt;Integrated Autoconf-like support for finding #include files, libraries, functions and typedefs.&lt;/li&gt;
&lt;li&gt;Global view of all dependencies–no more multiple build passes or reordering targets to build everything.&lt;/li&gt;
&lt;li&gt;Ability to share built files in a cache to speed up multiple builds–like ccache but for any type of target file, not just C/C++ compilation.&lt;/li&gt;
&lt;li&gt;Designed from the ground up for cross-platform builds, and known to work on Linux, other POSIX systems (including AIX, BSD systems, HP/UX, IRIX and Solaris), Windows NT, Mac OS X, and OS/2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最大特点就是使用 Python 语法来编写编译构建脚本，并且支持依赖自动推导，支持编译 C/C++/D/Java/Fortran等项目，并且是跨平台的(因为 python 是跨平台的）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.rebootcat.com/categories/c/"/>
    
    
      <category term="c++" scheme="http://www.rebootcat.com/tags/c/"/>
    
      <category term="linux" scheme="http://www.rebootcat.com/tags/linux/"/>
    
      <category term="cmake" scheme="http://www.rebootcat.com/tags/cmake/"/>
    
      <category term="scons" scheme="http://www.rebootcat.com/tags/scons/"/>
    
      <category term="makefile" scheme="http://www.rebootcat.com/tags/makefile/"/>
    
      <category term="make" scheme="http://www.rebootcat.com/tags/make/"/>
    
  </entry>
  
  <entry>
    <title>自动创建阿里云抢占式实例</title>
    <link href="http://www.rebootcat.com/2020/08/24/auto_run_aliyun_spot/"/>
    <id>http://www.rebootcat.com/2020/08/24/auto_run_aliyun_spot/</id>
    <published>2020-08-24T14:23:58.000Z</published>
    <updated>2020-08-24T14:30:23.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="aliyun-spot"><a href="#aliyun-spot" class="headerlink" title="aliyun_spot"></a><a href="https://github.com/smaugx/aliyun_spot" target="_blank" rel="noopener">aliyun_spot</a></h1><p>自动创建阿里云抢占式实例。</p><h1 id="支持一下作者，购买阿里云"><a href="#支持一下作者，购买阿里云" class="headerlink" title="支持一下作者，购买阿里云"></a><a href="https://www.aliyun.com/minisite/goods?userCode=c5nuzwoj" target="_blank" rel="noopener">支持一下作者，购买阿里云</a></h1><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>阿里云抢占式实例应该属于阿里云的一种闲置资源利用，性价比非常高，每小时的价格在 0.01 ~ 0.05 每小时，具体根据不同的配置和地域有差别，流量价格小于 1元/G.</p><p>抢占式实例最高可以以<strong>一折的价格购买 ECS 实例，并能稳定持有该实例至少一个小时</strong>。一个小时后，当市场价格高于您的出价或资源供需关系变化时，<strong>抢占式实例会被自动释放</strong>，请做好数据备份工作。</p><p><strong>非常适合爬虫</strong></p><p><strong>非常适合爬虫</strong></p><p><strong>非常适合爬虫</strong></p><p>也适合程序员个人日常开发使用，上班来创建，下班释放，开销基本可以控制在在 1毛 ~ 2 毛。</p><p>对于我来说，最近在写一个爬虫，看了很多代理都很贵，免费的又不稳定，正好了解到阿里云的抢占式实例，所以非常满足我的需求。</p><p>但是要注意，这个实例是有可能被释放的，但是不用担心，比如<strong>香港地区的释放率最近（2020-08-19）小于 3%. 另外，每个人可以最大创建 100 个实例</strong>，所以还是不用太担心。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/auto_run_aliyun_spot/1.png" alt=""></p><a id="more"></a><h1 id="脚本功能"><a href="#脚本功能" class="headerlink" title="脚本功能"></a>脚本功能</h1><p>脚本仓库: <a href="https://github.com/smaugx/aliyun_spot" target="_blank" rel="noopener">https://github.com/smaugx/aliyun_spot</a></p><h2 id="自动创建阿里云抢占式实例"><a href="#自动创建阿里云抢占式实例" class="headerlink" title="自动创建阿里云抢占式实例"></a>自动创建阿里云抢占式实例</h2><p>支持以下一些参数：</p><ul><li>实例所属地域</li><li>创建的实例数量</li><li>公网出口带宽最大值</li><li>实例付费的策略和每小时最大价格</li><li>系统盘大小</li><li>释放时间（hours）</li><li>实例规格(cpu/mem/localdisk/net/ipv6)</li></ul><h2 id="手动释放一个或者多个实例"><a href="#手动释放一个或者多个实例" class="headerlink" title="手动释放一个或者多个实例"></a>手动释放一个或者多个实例</h2><p>可以使用脚本提前释放一个或者多个实例。</p><p><strong>创建的时候可以设置自动释放时间，当然也支持随时手动释放</strong>。</p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ python run_aliyunspot.py</span><br><span class="line">usage: run_aliyunspot.py [-h] [-c [CREATE]] [-r [RELEASE]] [-l [LIST]] [-s [SPOTID [SPOTID <span class="built_in">..</span>.]]]</span><br><span class="line"></span><br><span class="line">aliyunspot, 自动创建阿里云抢占式实例,支持自动/手动释放</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message <span class="keyword">and</span> exit</span><br><span class="line">  -c [CREATE], --create [CREATE]</span><br><span class="line">                        create aliyun spot<span class="built_in"> instance </span><span class="keyword">and</span> <span class="builtin-name">run</span> instance</span><br><span class="line">  -r [RELEASE], --release [RELEASE]</span><br><span class="line">                        release aliyun spot instance</span><br><span class="line">  -l [LIST], --list [LIST]</span><br><span class="line">                        list local record aliyun spot instance</span><br><span class="line">  -s [SPOTID [SPOTID <span class="built_in">..</span>.]], --spotid [SPOTID [SPOTID <span class="built_in">..</span>.]]</span><br><span class="line">                        aliyun spot instance_id <span class="keyword">for</span> release, you can give more than one</span><br></pre></td></tr></table></figure><h2 id="1-克隆仓库"><a href="#1-克隆仓库" class="headerlink" title="1 克隆仓库"></a>1 克隆仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/smaugx/aliyun_spot.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> aliyun_spot</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> virtualenv -p python3 vv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> vv/bin/activate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure><h2 id="2-调整配置"><a href="#2-调整配置" class="headerlink" title="2  调整配置"></a>2  调整配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">cp</span> test_config.<span class="keyword">py</span> config.<span class="keyword">py</span></span><br><span class="line"># 打开配置文件，根据你自己的需求修改里面的配置选项</span><br><span class="line">$ <span class="keyword">vim</span> config.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>当然你也可以不用修改其他配置，只需要把你的 <strong>access_id</strong> 和 <strong>access_secret</strong> 填进去就可以，以及 <strong>key_pair_name</strong> 填进去。（见后文章节 <strong>#阿里云官网操作#</strong> ）</p><p><strong>默认创建的是香港地区的抢占式实例，内存 500MB, 1 CPU, 系统盘 20GB, 按流量计费（1元/G), 公网出口带宽 10Mbps, 1 小时候自动释放。</strong></p><blockquote><p>2020-08-19 上述默认配置的实例价格在 ￥ 0.018 /时。</p></blockquote><p>如果你觉得这个配置(cpu/mem)无法满足你的要求，那么可以调整 <strong>instance_type</strong> 这个参数，表示实例规格，详细可以查看阿里云官网页面 <a href="https://help.aliyun.com/document_detail/25378.html" target="_blank" rel="noopener">云服务器 ECS &gt; 实例 &gt; 实例规格族</a></p><h2 id="3-创建实例"><a href="#3-创建实例" class="headerlink" title="3 创建实例"></a>3 创建实例</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ python run_aliyunspot.py -c</span><br><span class="line">will create <span class="keyword">and</span> <span class="builtin-name">run</span> aliyun spot instance, please wait<span class="built_in">..</span>.</span><br><span class="line">Success.<span class="built_in"> Instance </span>creation succeed. InstanceIds: i-j6cfhcbb3o2pepduwgfk</span><br><span class="line">Instance boot successfully: i-j6cfhcbb3o2pepduwgfk</span><br><span class="line">Instances all boot successfully</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">InstanceId:i-j6cfhcbb3o2pepduwgfk</span><br><span class="line">InstanceName:smaug-000-aliyun-8242148</span><br><span class="line">HostName:smaug-000-aliyun-8242148</span><br><span class="line">PublicIp:47.242.33.179</span><br><span class="line">KeyPairName:aliyunspot</span><br><span class="line">CreationTime:2020-08-24T13:48Z</span><br><span class="line">AutoReleaseTime:2020-08-24T22:48Z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance <span class="builtin-name">info</span> saved <span class="keyword">in</span> file:./ecs/ecs.i-j6cfhcbb3o2pepduwgfk</span><br><span class="line">now you can use ssh: ssh -i ~/.ssh/aliyunspot.pem root@47.242.33.179</span><br></pre></td></tr></table></figure><p>如上，创建成功。然后接下来就可以使用 ssh 登录：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i ~/.ssh/~/.ssh/aliyunspot.pem <span class="symbol">root@</span><span class="number">8.210</span><span class="number">.245</span><span class="number">.226</span></span><br></pre></td></tr></table></figure><h2 id="4-列出实例"><a href="#4-列出实例" class="headerlink" title="4 列出实例"></a>4 列出实例</h2><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python run_aliyunspot.py -l</span><br><span class="line"><span class="built_in">list</span> all <span class="keyword">local</span> record instance:</span><br><span class="line">[<span class="symbol">'i</span>-j6caz353cisgl3fzenwi', <span class="symbol">'i</span>-j6cbyis12fb1fpzk59fv', <span class="symbol">'i</span>-j6cfhcbb3o2pepduwgfk']</span><br></pre></td></tr></table></figure><p>注意，上面仅仅是把之前创建并保存的实例信息从文件当中读取出来，并没有与 aliyun 交互。</p><h2 id="5-释放实例"><a href="#5-释放实例" class="headerlink" title="5 释放实例"></a>5 释放实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python run_aliyunspot.py -r -s i-j6caz353cisgl3fzenwi i-j6cbyis12fb1fpzk59fv</span><br><span class="line">will <span class="keyword">release</span> aliyun spot <span class="keyword">instance</span>:</span><br><span class="line">[<span class="string">'i-j6caz353cisgl3fzenwi'</span>, <span class="string">'i-j6cbyis12fb1fpzk59fv'</span>]</span><br><span class="line">please wait...</span><br><span class="line"></span><br><span class="line"><span class="keyword">release</span> <span class="keyword">instance</span>:[<span class="string">"i-j6caz353cisgl3fzenwi"</span>, <span class="string">"i-j6cbyis12fb1fpzk59fv"</span>] done</span><br></pre></td></tr></table></figure><h1 id="阿里云官网操作"><a href="#阿里云官网操作" class="headerlink" title="阿里云官网操作"></a><a href="https://www.aliyun.com/minisite/goods?userCode=c5nuzwoj" target="_blank" rel="noopener">阿里云官网操作</a></h1><p>上面提到了几个配置是需要在阿里云官网操作的。</p><p><strong>阿里云官网的使用还是挺复杂的，因为功能太多了，花费了我至少一个上午的时间才熟悉了整个操作，完成了整个脚本</strong></p><p><strong>所以整理了这个脚本方便大家使用，对阿里云的操作只需要下面几个：</strong></p><ul><li>注册一个阿里云账号，这个不用说了吧</li><li>充值 100 元以上，比如 130 元。因为创建实例账号里至少要 100 元</li><li>点击 <a href="https://ram.console.aliyun.com/overview" target="_blank" rel="noopener">https://ram.console.aliyun.com/overview</a> 创建一个用户组，分配权限 AliyunECSFullAccess 和 AliyunVPCFullAccess</li><li>还是上一步的页面，添加 ram 子账号，添加到刚才创建的用户组，这个账号会用来编程访问 aliyun API</li><li>还是上一步的页面，为这个ram 子账号创建 AccessKey。<strong>记得保存好</strong>。</li><li>在 <a href="https://ecs.console.aliyun.com/" target="_blank" rel="noopener">https://ecs.console.aliyun.com/</a> 页面选择 网络与安全-密钥对，创建密钥对 aliyunspot (名字任意），会自动下载这个私钥，<strong>记得保存好，一般要放到 ~/.ssh 目录下，并且记得  <code>chmod 600 aliyunspot.pem</code></strong></li></ul><p>OK, 到这里基本上得到了我们脚本里需要的几个配置：</p><ul><li>access_id</li><li>access_secret</li><li>key_pair_name</li></ul><p>把上述几个配置填到 config.py 中即可。</p><h1 id="然后开始创建和管理你的实例吧！！"><a href="#然后开始创建和管理你的实例吧！！" class="headerlink" title="然后开始创建和管理你的实例吧！！"></a>然后开始创建和管理你的实例吧！！</h1><h1 id="然后开始创建和管理你的实例吧！！-1"><a href="#然后开始创建和管理你的实例吧！！-1" class="headerlink" title="然后开始创建和管理你的实例吧！！"></a>然后开始创建和管理你的实例吧！！</h1><h1 id="然后开始创建和管理你的实例吧！！-2"><a href="#然后开始创建和管理你的实例吧！！-2" class="headerlink" title="然后开始创建和管理你的实例吧！！"></a>然后开始创建和管理你的实例吧！！</h1><p>Blog:</p><ul><li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#105;&#110;&#117;&#120;&#99;&#111;&#100;&#101;&#x32;&#x6e;&#x69;&#107;&#x69;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#108;&#105;&#110;&#117;&#120;&#99;&#111;&#100;&#101;&#x32;&#x6e;&#x69;&#107;&#x69;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></p></li></ul><p>2020-08-24 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p><h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><ul><li><a href="https://www.aliyun.com/minisite/goods?userCode=c5nuzwoj" target="_blank" rel="noopener">阿里云官网</a></li><li><a href="https://api.aliyun.com" target="_blank" rel="noopener">Aliyun OpenAPI Explorer</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;aliyun-spot&quot;&gt;&lt;a href=&quot;#aliyun-spot&quot; class=&quot;headerlink&quot; title=&quot;aliyun_spot&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/smaugx/aliyun_spot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;aliyun_spot&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;自动创建阿里云抢占式实例。&lt;/p&gt;
&lt;h1 id=&quot;支持一下作者，购买阿里云&quot;&gt;&lt;a href=&quot;#支持一下作者，购买阿里云&quot; class=&quot;headerlink&quot; title=&quot;支持一下作者，购买阿里云&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.aliyun.com/minisite/goods?userCode=c5nuzwoj&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;支持一下作者，购买阿里云&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;阿里云抢占式实例应该属于阿里云的一种闲置资源利用，性价比非常高，每小时的价格在 0.01 ~ 0.05 每小时，具体根据不同的配置和地域有差别，流量价格小于 1元/G.&lt;/p&gt;
&lt;p&gt;抢占式实例最高可以以&lt;strong&gt;一折的价格购买 ECS 实例，并能稳定持有该实例至少一个小时&lt;/strong&gt;。一个小时后，当市场价格高于您的出价或资源供需关系变化时，&lt;strong&gt;抢占式实例会被自动释放&lt;/strong&gt;，请做好数据备份工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非常适合爬虫&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非常适合爬虫&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非常适合爬虫&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也适合程序员个人日常开发使用，上班来创建，下班释放，开销基本可以控制在在 1毛 ~ 2 毛。&lt;/p&gt;
&lt;p&gt;对于我来说，最近在写一个爬虫，看了很多代理都很贵，免费的又不稳定，正好了解到阿里云的抢占式实例，所以非常满足我的需求。&lt;/p&gt;
&lt;p&gt;但是要注意，这个实例是有可能被释放的，但是不用担心，比如&lt;strong&gt;香港地区的释放率最近（2020-08-19）小于 3%. 另外，每个人可以最大创建 100 个实例&lt;/strong&gt;，所以还是不用太担心。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/auto_run_aliyun_spot/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.rebootcat.com/categories/python/"/>
    
    
      <category term="python" scheme="http://www.rebootcat.com/tags/python/"/>
    
      <category term="aliyun" scheme="http://www.rebootcat.com/tags/aliyun/"/>
    
      <category term="spot" scheme="http://www.rebootcat.com/tags/spot/"/>
    
      <category term="ecs" scheme="http://www.rebootcat.com/tags/ecs/"/>
    
  </entry>
  
  <entry>
    <title>valgrind massif 分析内存问题</title>
    <link href="http://www.rebootcat.com/2020/06/16/valgrind_massif_memory_analysing/"/>
    <id>http://www.rebootcat.com/2020/06/16/valgrind_massif_memory_analysing/</id>
    <published>2020-06-16T00:23:58.000Z</published>
    <updated>2020-06-16T00:01:55.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Valgrind-Massif"><a href="#Valgrind-Massif" class="headerlink" title="Valgrind Massif"></a>Valgrind Massif</h1><p>valgrind 是什么，这里直接引用其他人的博客：</p><blockquote><p>Valgrind是一套Linux下，开放源代码（GPL<br>V2）的仿真调试工具的集合。Valgrind由内核（core）以及基于内核的其他调试工具组成。</p></blockquote><blockquote><p>内核类似于一个框架（framework），它模拟了一个CPU环境，并提供服务给其他工具；而其他工具则类似于插件 (plug-in)，利用内核提供的服务完成各种特定的内存调试任务。</p><p>Valgrind的体系结构如下图所示：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/valgrind_massif_memory_analysing/1.png" alt=""></p><h1 id="Massif-命令行选项"><a href="#Massif-命令行选项" class="headerlink" title="Massif 命令行选项"></a>Massif 命令行选项</h1><p>关于 massif 命令行选项，可以直接查看 valgrind 的 help 信息：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MASSIF OPTIONS</span><br><span class="line">       <span class="comment">--heap=&lt;yes|no&gt; [default: yes]</span></span><br><span class="line">           Specifies whether heap profiling should be done.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--heap-admin=&lt;size&gt; [default: 8]</span></span><br><span class="line">           If heap profiling <span class="keyword">is</span> enabled, gives <span class="keyword">the</span> <span class="built_in">number</span> <span class="keyword">of</span> administrative bytes per block <span class="keyword">to</span> use. This should be an estimate <span class="keyword">of</span> <span class="keyword">the</span> average, <span class="keyword">since</span> <span class="keyword">it</span> may vary. For example, <span class="keyword">the</span></span><br><span class="line">           allocator used <span class="keyword">by</span> glibc <span class="keyword">on</span> Linux requires somewhere <span class="keyword">between</span> <span class="number">4</span> <span class="keyword">to</span> <span class="number">15</span> bytes per block, depending <span class="keyword">on</span> various factors. That allocator also requires admin <span class="literal">space</span> <span class="keyword">for</span> freed blocks,</span><br><span class="line">           <span class="keyword">but</span> Massif cannot account <span class="keyword">for</span> this.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--stacks=&lt;yes|no&gt; [default: no]</span></span><br><span class="line">           Specifies whether stack profiling should be done. This option slows Massif down greatly, <span class="keyword">and</span> so <span class="keyword">is</span> off <span class="keyword">by</span> default. Note <span class="keyword">that</span> Massif assumes <span class="keyword">that</span> <span class="keyword">the</span> main stack has size zero</span><br><span class="line">           <span class="keyword">at</span> start-up. This <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">true</span>, <span class="keyword">but</span> doing otherwise accurately <span class="keyword">is</span> difficult. Furthermore, starting <span class="keyword">at</span> zero better indicates <span class="keyword">the</span> size <span class="keyword">of</span> <span class="keyword">the</span> part <span class="keyword">of</span> <span class="keyword">the</span> main stack <span class="keyword">that</span> a user</span><br><span class="line">           program actually has control <span class="keyword">over</span>.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--pages-as-heap=&lt;yes|no&gt; [default: no]</span></span><br><span class="line">           Tells Massif <span class="keyword">to</span> profile memory <span class="keyword">at</span> <span class="keyword">the</span> page level rather than <span class="keyword">at</span> <span class="keyword">the</span> malloc'd block level. See <span class="keyword">above</span> <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--depth=&lt;number&gt; [default: 30]</span></span><br><span class="line">           Maximum depth <span class="keyword">of</span> <span class="keyword">the</span> allocation trees recorded <span class="keyword">for</span> detailed snapshots. Increasing <span class="keyword">it</span> will make Massif <span class="built_in">run</span> somewhat more slowly, use more memory, <span class="keyword">and</span> produce bigger output</span><br><span class="line">           files.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--alloc-fn=&lt;name&gt;</span></span><br><span class="line">           Functions specified <span class="keyword">with</span> this option will be treated <span class="keyword">as</span> though they were a heap allocation function such <span class="keyword">as</span> malloc. This <span class="keyword">is</span> useful <span class="keyword">for</span> functions <span class="keyword">that</span> are wrappers <span class="keyword">to</span> malloc <span class="keyword">or</span></span><br><span class="line">           new, which can fill up <span class="keyword">the</span> allocation trees <span class="keyword">with</span> uninteresting information. This option can be specified multiple <span class="keyword">times</span> <span class="keyword">on</span> <span class="keyword">the</span> command line, <span class="keyword">to</span> <span class="built_in">name</span> multiple functions.</span><br><span class="line"></span><br><span class="line">           Note <span class="keyword">that</span> <span class="keyword">the</span> named function will only be treated this way <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">is</span> <span class="keyword">the</span> top entry <span class="keyword">in</span> a stack trace, <span class="keyword">or</span> just <span class="keyword">below</span> another function treated this way. For example, <span class="keyword">if</span> you have a</span><br><span class="line">           function malloc1 <span class="keyword">that</span> wraps malloc, <span class="keyword">and</span> malloc2 <span class="keyword">that</span> wraps malloc1, just specifying <span class="comment">--alloc-fn=malloc2 will have no effect. You need to specify --alloc-fn=malloc1 as well.</span></span><br><span class="line">           This <span class="keyword">is</span> a little inconvenient, <span class="keyword">but</span> <span class="keyword">the</span> reason <span class="keyword">is</span> <span class="keyword">that</span> checking <span class="keyword">for</span> allocation functions <span class="keyword">is</span> slow, <span class="keyword">and</span> <span class="keyword">it</span> saves a lot <span class="keyword">of</span> <span class="built_in">time</span> <span class="keyword">if</span> Massif can stop looking <span class="keyword">through</span> <span class="keyword">the</span> stack trace</span><br><span class="line">           entries <span class="keyword">as</span> soon <span class="keyword">as</span> <span class="keyword">it</span> finds one <span class="keyword">that</span> doesn't match rather than having <span class="keyword">to</span> <span class="keyword">continue</span> <span class="keyword">through</span> all <span class="keyword">the</span> entries.</span><br><span class="line"></span><br><span class="line">           Note <span class="keyword">that</span> C++ names are demangled. Note also <span class="keyword">that</span> overloaded C++ names must be written <span class="keyword">in</span> full. Single quotes may be necessary <span class="keyword">to</span> prevent <span class="keyword">the</span> shell <span class="keyword">from</span> breaking them up. For</span><br><span class="line">           example:</span><br><span class="line"></span><br><span class="line">               <span class="comment">--alloc-fn='operator new(unsigned, std::nothrow_t const&amp;)'</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">--ignore-fn=&lt;name&gt;</span></span><br><span class="line">           Any direct heap allocation (i.e. a call <span class="keyword">to</span> malloc, new, etc, <span class="keyword">or</span> a call <span class="keyword">to</span> a function named <span class="keyword">by</span> an <span class="comment">--alloc-fn option) that occurs in a function specified by this option will be</span></span><br><span class="line">           ignored. This <span class="keyword">is</span> mostly useful <span class="keyword">for</span> testing purposes. This option can be specified multiple <span class="keyword">times</span> <span class="keyword">on</span> <span class="keyword">the</span> command line, <span class="keyword">to</span> <span class="built_in">name</span> multiple functions.</span><br><span class="line"></span><br><span class="line">           Any realloc <span class="keyword">of</span> an ignored block will also be ignored, even <span class="keyword">if</span> <span class="keyword">the</span> realloc call <span class="keyword">does</span> <span class="keyword">not</span> occur <span class="keyword">in</span> an ignored function. This avoids <span class="keyword">the</span> possibility <span class="keyword">of</span> negative heap sizes <span class="keyword">if</span></span><br><span class="line">           ignored blocks are shrunk <span class="keyword">with</span> realloc.</span><br><span class="line"></span><br><span class="line">           The rules <span class="keyword">for</span> writing C++ function names are <span class="keyword">the</span> same <span class="keyword">as</span> <span class="keyword">for</span> <span class="comment">--alloc-fn above.</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">--threshold=&lt;m.n&gt; [default: 1.0]</span></span><br><span class="line">           The significance threshold <span class="keyword">for</span> heap allocations, <span class="keyword">as</span> a percentage <span class="keyword">of</span> total memory size. Allocation tree entries <span class="keyword">that</span> account <span class="keyword">for</span> <span class="keyword">less than</span> this will be aggregated. Note <span class="keyword">that</span></span><br><span class="line">           this should be specified <span class="keyword">in</span> tandem <span class="keyword">with</span> ms_print's option <span class="keyword">of</span> <span class="keyword">the</span> same <span class="built_in">name</span>.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--peak-inaccuracy=&lt;m.n&gt; [default: 1.0]</span></span><br><span class="line">           Massif <span class="keyword">does</span> <span class="keyword">not</span> necessarily <span class="built_in">record</span> <span class="keyword">the</span> actual <span class="keyword">global</span> memory allocation peak; <span class="keyword">by</span> default <span class="keyword">it</span> records a peak only when <span class="keyword">the</span> <span class="keyword">global</span> memory allocation size exceeds <span class="keyword">the</span> previous peak</span><br><span class="line">           <span class="keyword">by</span> <span class="keyword">at</span> least <span class="number">1.0</span>%. This <span class="keyword">is</span> because there can be many <span class="keyword">local</span> allocation peaks along <span class="keyword">the</span> way, <span class="keyword">and</span> doing a detailed snapshot <span class="keyword">for</span> <span class="keyword">every</span> one would be expensive <span class="keyword">and</span> wasteful, <span class="keyword">as</span> all</span><br><span class="line">           <span class="keyword">but</span> one <span class="keyword">of</span> them will be later discarded. This inaccuracy can be changed (even <span class="keyword">to</span> <span class="number">0.0</span>%) via this option, <span class="keyword">but</span> Massif will <span class="built_in">run</span> drastically slower <span class="keyword">as</span> <span class="keyword">the</span> <span class="built_in">number</span> approaches zero.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--time-unit=&lt;i|ms|B&gt; [default: i]</span></span><br><span class="line">           The <span class="built_in">time</span> unit used <span class="keyword">for</span> <span class="keyword">the</span> profiling. There are three possibilities: instructions executed (i), which <span class="keyword">is</span> good <span class="keyword">for</span> most cases; <span class="built_in">real</span> (wallclock) <span class="built_in">time</span> (ms, i.e. milliseconds),</span><br><span class="line">           which <span class="keyword">is</span> sometimes useful; <span class="keyword">and</span> bytes allocated/deallocated <span class="keyword">on</span> <span class="keyword">the</span> heap <span class="keyword">and</span>/<span class="keyword">or</span> stack (B), which <span class="keyword">is</span> useful <span class="keyword">for</span> very short-<span class="built_in">run</span> programs, <span class="keyword">and</span> <span class="keyword">for</span> testing purposes, because <span class="keyword">it</span> <span class="keyword">is</span></span><br><span class="line">           <span class="keyword">the</span> most reproducible across different machines.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--detailed-freq=&lt;n&gt; [default: 10]</span></span><br><span class="line">           Frequency <span class="keyword">of</span> detailed snapshots. With <span class="comment">--detailed-freq=1, every snapshot is detailed.</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">--max-snapshots=&lt;n&gt; [default: 100]</span></span><br><span class="line">           The maximum <span class="built_in">number</span> <span class="keyword">of</span> snapshots recorded. If <span class="keyword">set</span> <span class="keyword">to</span> N, <span class="keyword">for</span> all programs except very short-<span class="built_in">running</span> ones, <span class="keyword">the</span> final <span class="built_in">number</span> <span class="keyword">of</span> snapshots will be <span class="keyword">between</span> N/<span class="number">2</span> <span class="keyword">and</span> N.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--massif-out-file=&lt;file&gt; [default: massif.out.%p]</span></span><br><span class="line">           Write <span class="keyword">the</span> profile data <span class="keyword">to</span> <span class="built_in">file</span> rather than <span class="keyword">to</span> <span class="keyword">the</span> default output <span class="built_in">file</span>, massif.out.&lt;pid&gt;. The %p <span class="keyword">and</span> %q format specifiers can be used <span class="keyword">to</span> embed <span class="keyword">the</span> process ID <span class="keyword">and</span>/<span class="keyword">or</span> <span class="keyword">the</span></span><br><span class="line">           <span class="built_in">contents</span> <span class="keyword">of</span> an environment variable <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">name</span>, <span class="keyword">as</span> <span class="keyword">is</span> <span class="keyword">the</span> case <span class="keyword">for</span> <span class="keyword">the</span> core option <span class="comment">--log-file.</span></span><br></pre></td></tr></table></figure><p>对其中几个常用的选项做一个说明：</p><a id="more"></a><ul><li><strong>–stacks</strong>: 栈内存的采样开关，默认关闭。打开后，会针对栈上的内存也进行采样，会使 massif 性能变慢；</li><li><strong>–time-unit</strong>：指定用来分析的时间单位。这个选项三个有效值：执行的指令（i），即默认值，用于大多数情况；即时（ms，单位毫秒），可用于某些特定事务；以及在堆（/或者）栈中分配/取消分配的字节（B），用于很少运行的程序，且用于测试目的，因为它最容易在不同机器中重现。这个选项在使用 ms_print 输出结果画图是游泳</li><li><strong>–detailed-freq</strong>: 针对详细内存快照的频率，默认是 10， 即每 10 个快照会有采集一个详细的内存快照</li><li><strong>–massif-out-file</strong>： 采样结束后，生成的采样文件（后续可以使用 ms_print 或者 massif-visualizer 进行分析）</li></ul><h1 id="开始采集"><a href="#开始采集" class="headerlink" title="开始采集"></a>开始采集</h1><p>经过上面的了解，接下来可以开始内存数据采集了，假设我们需要采集的二进制程序名为 xprogram:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valgrind -v <span class="attribute">--tool</span>=massif <span class="attribute">--time-unit</span>=B <span class="attribute">--detailed-freq</span>=1 <span class="attribute">--massif-out-file</span>=./massif.out  ./xprogram someargs</span><br></pre></td></tr></table></figure><p>运行一段时间后，采集到足够多的内存数据之后，我们需要停止程序，让它生成采集的数据文件，使用 kill 命令让 valgrind 程序退出。</p><blockquote><blockquote><p>attention: <strong>这里禁止使用  kill -9 模式去杀进程，不然不会产生采样文件</strong></p></blockquote></blockquote><h1 id="ms-print-分析采样文件"><a href="#ms-print-分析采样文件" class="headerlink" title="ms_print 分析采样文件"></a>ms_print 分析采样文件</h1><p>ms_print 是用来分析 massif 采样得到的内存数据文件的，使用命令为：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ms_print ./massif.<span class="keyword">out</span></span><br></pre></td></tr></table></figure><p>或者把输出保存到文件：</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ms_print ./massif.<span class="keyword">out</span> &gt; massif.<span class="literal">result</span></span><br></pre></td></tr></table></figure><p>打开 massif.result 看看长啥样：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"><span class="symbol">Command:</span>            ./xprogram someargs</span><br><span class="line">Massif <span class="symbol">arguments:</span>   --time-unit=B --massif-out-file=./massif.out</span><br><span class="line">ms_print <span class="symbol">arguments:</span> massif.out</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    GB</span><br><span class="line"><span class="number">1.279</span>^                                                                       <span class="comment">#</span></span><br><span class="line">     |                                                                       <span class="comment">#</span></span><br><span class="line">     |                                                                   @  @<span class="comment">#</span></span><br><span class="line">     |                                                                   @::@<span class="comment">#</span></span><br><span class="line">     |                                                                 @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                                                            @::  @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                                                      : ::::@: ::@<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                                             @ @@@@ :::::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                                          :  @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                                     @  ::::<span class="symbol">:</span>@<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                               @@::<span class="symbol">:</span>@@::: :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                            ::<span class="symbol">:</span>@ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                    :: @@::::: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                 :::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |          @  :::::::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |        ::@::: : :::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |      ::::@: : : :::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |     :: ::@: : : :::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |   @@:: ::@: : : :::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     | ::@ :: ::@: : : :::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">   0 +-----------------------------------------------------------------------&gt;GB</span><br><span class="line">     0                                                                   <span class="number">813.9</span></span><br><span class="line"></span><br><span class="line">Number of <span class="symbol">snapshots:</span> <span class="number">68</span></span><br><span class="line"> Detailed <span class="symbol">snapshots:</span> [<span class="number">2</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">46</span>, <span class="number">48</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span> (peak)]</span><br></pre></td></tr></table></figure><p>这张图大概意思就表示<strong>堆内存的分配量随着采样时间的变化</strong>。从上图可以看到堆内存一直在增长，可能存在一些内存泄露等问题。</p><p>往下看还能看到内存的分配栈：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">0</span>              <span class="number">0</span>                <span class="number">0</span>                <span class="number">0</span>             <span class="number">0</span>            <span class="number">0</span></span><br><span class="line">  <span class="number">1</span> <span class="number">20</span>,<span class="number">021</span>,<span class="number">463</span>,<span class="number">688</span>      <span class="number">133</span>,<span class="number">278</span>,<span class="number">776</span>      <span class="number">124</span>,<span class="number">687</span>,<span class="number">612</span>     <span class="number">8</span>,<span class="number">591</span>,<span class="number">164</span>            <span class="number">0</span></span><br><span class="line">  <span class="number">2</span> <span class="number">45</span>,<span class="number">201</span>,<span class="number">848</span>,<span class="number">936</span>      <span class="number">204</span>,<span class="number">228</span>,<span class="number">232</span>      <span class="number">191</span>,<span class="number">089</span>,<span class="number">596</span>    <span class="number">13</span>,<span class="number">138</span>,<span class="number">636</span>            <span class="number">0</span></span><br><span class="line"><span class="number">93.57</span>% (<span class="number">191</span>,<span class="number">089</span>,<span class="number">596</span>B) (heap allocation functions) malloc<span class="regexp">/new/</span><span class="keyword">new</span>[], --alloc-fns, etc.</span><br><span class="line">-&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xF088E6</span>: <span class="string">rocksdb:</span>:<span class="string">Arena:</span>:AllocateNewBlock(unsigned <span class="keyword">long</span>) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">| -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xF08500</span>: <span class="string">rocksdb:</span>:<span class="string">Arena:</span>:AllocateFallback(unsigned <span class="keyword">long</span>, bool) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|   -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xF0886C</span>: <span class="string">rocksdb:</span>:<span class="string">Arena:</span>:AllocateAligned(unsigned <span class="keyword">long</span>, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:Logger*) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xDE62BC</span>: <span class="string">rocksdb:</span>:<span class="string">ConcurrentArena:</span>:AllocateAligned(unsigned <span class="keyword">long</span>, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:Logger*)::&#123;lambda()</span><br><span class="line">|     | -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xDE7D9A</span>: <span class="keyword">char</span>* <span class="string">rocksdb:</span>:<span class="string">ConcurrentArena:</span>:AllocateImpl&lt;<span class="string">rocksdb:</span>:<span class="string">ConcurrentArena:</span>:AllocateAligned(unsigned <span class="keyword">long</span>, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:Logger*)::&#123;lambda()</span><br><span class="line">|     |   -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xDE6371</span>: <span class="string">rocksdb:</span>:<span class="string">ConcurrentArena:</span>:AllocateAligned(unsigned <span class="keyword">long</span>, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:Logger*) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |     -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE6FAB0</span>: <span class="string">rocksdb:</span>:InlineSkipList&lt;<span class="string">rocksdb:</span>:<span class="string">MemTableRep:</span>:KeyComparator const&amp;&gt;::AllocateNode(unsigned <span class="keyword">long</span>, <span class="keyword">int</span>) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |       -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE6F472</span>: <span class="string">rocksdb:</span>:InlineSkipList&lt;<span class="string">rocksdb:</span>:<span class="string">MemTableRep:</span>:KeyComparator const&amp;&gt;::AllocateKey(unsigned <span class="keyword">long</span>) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |         -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE6E40A</span>: <span class="string">rocksdb:</span>:(anonymous namespace)::<span class="string">SkipListRep:</span>:Allocate(unsigned <span class="keyword">long</span>, <span class="keyword">char</span>**) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |           -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xDE32E3</span>: <span class="string">rocksdb:</span>:<span class="string">MemTable:</span>:Add(unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:ValueType, <span class="string">rocksdb:</span>:Slice const&amp;, <span class="string">rocksdb:</span>:Slice const&amp;, bool, <span class="string">rocksdb:</span>:MemTablePostProcessInfo*) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |             -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE5C218</span>: <span class="string">rocksdb:</span>:<span class="string">MemTableInserter:</span>:PutCFImpl(unsigned <span class="keyword">int</span>, <span class="string">rocksdb:</span>:Slice const&amp;, <span class="string">rocksdb:</span>:Slice const&amp;, <span class="string">rocksdb:</span>:ValueType) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |               -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE5C92C</span>: <span class="string">rocksdb:</span>:<span class="string">MemTableInserter:</span>:PutCF(unsigned <span class="keyword">int</span>, <span class="string">rocksdb:</span>:Slice const&amp;, <span class="string">rocksdb:</span>:Slice const&amp;) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |                 -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE570E4</span>: <span class="string">rocksdb:</span>:<span class="string">WriteBatch:</span>:Iterate(<span class="string">rocksdb:</span>:<span class="string">WriteBatch:</span>:Handler*) const (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |                   -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE598D5</span>: <span class="string">rocksdb:</span>:<span class="string">WriteBatchInternal:</span>:InsertInto(<span class="string">rocksdb:</span>:<span class="string">WriteThread:</span>:WriteGroup&amp;, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:ColumnFamilyMemTables*, <span class="string">rocksdb:</span>:FlushScheduler*, bool, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:DB*, bool, bool, bool) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |                     -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xD45AD7</span>: <span class="string">rocksdb:</span>:<span class="string">DBImpl:</span>:WriteImpl(<span class="string">rocksdb:</span>:WriteOptions const&amp;, <span class="string">rocksdb:</span>:WriteBatch*, <span class="string">rocksdb:</span>:WriteCallback*, unsigned <span class="keyword">long</span>*, unsigned <span class="keyword">long</span>, bool, unsigned <span class="keyword">long</span>*, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:PreReleaseCallback*) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |                       -&gt;<span class="number">28.75</span>% (<span class="number">58</span>,<span class="number">720</span>,<span class="number">256</span>B) <span class="number">0x1013B9C</span>: <span class="string">rocksdb:</span>:<span class="string">WriteCommittedTxn:</span>:CommitWithoutPrepareInternal() (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |                       | -&gt;<span class="number">28.75</span>% (<span class="number">58</span>,<span class="number">720</span>,<span class="number">256</span>B) <span class="number">0x1013653</span>: <span class="string">rocksdb:</span>:<span class="string">PessimisticTransaction:</span>:Commit() (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |                       |   -&gt;<span class="number">28.75</span>% (<span class="number">58</span>,<span class="number">720</span>,<span class="number">256</span>B) <span class="number">0xF40E17</span>: <span class="string">rocksdb:</span>:<span class="string">PessimisticTransactionDB:</span>:Put(<span class="string">rocksdb:</span>:WriteOptions const&amp;, <span class="string">rocksdb:</span>:ColumnFamilyHandle*, rocksdb</span><br></pre></td></tr></table></figure><p>能看到内存分配的调用堆栈情况，据此可以看到哪里分配的内存较多。</p><h1 id="massif-visualizer-可视化分析采样文件"><a href="#massif-visualizer-可视化分析采样文件" class="headerlink" title="massif-visualizer 可视化分析采样文件"></a>massif-visualizer 可视化分析采样文件</h1><p>ms_print 一定程度上不够直观，所以祭出另外一个分析内存采样数据的大杀器 – <strong>massif-visualizer</strong>，它能<strong>可视化的展示内存分配随着采样时间的变化情况，并能直观的看到内存分配的排行榜</strong>。</p><p>注意： <strong>massif-visualizer 目前好像只支持 linux 环境，并且具有桌面环境的 Linux</strong>. (mac/windows 的版本我没有找到）。</p><p>故我们采用 ubuntu-20.04-lts 作为分析环境。</p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>直接在软件中心搜索 massif-visualizer，然后安装</p><h2 id="启动软件，分析数据"><a href="#启动软件，分析数据" class="headerlink" title="启动软件，分析数据"></a>启动软件，分析数据</h2><p><strong>双击 massif-visualizer 启动软件之后，打开并选中某个 massif.out 文件</strong>，或者用命令行的方式打开：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">massif-visualizer ./massif.<span class="keyword">out</span></span><br></pre></td></tr></table></figure><p>启动后，能直观的看到内存随采样时间的变化情况：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/valgrind_massif_memory_analysing/2.png" alt=""></p><p>调整上面的选项 <strong>Stacked diagrams</strong> 值后：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/valgrind_massif_memory_analysing/3.png" alt=""></p><p>鼠标悬停之后也能看到每条曲线某个 snapshot 对应的内存分配情况。</p><p>界面右边是内存调用的堆栈：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/valgrind_massif_memory_analysing/4.png" alt=""></p><p>点击界面下面的 <strong>Allocators</strong> 按钮之后，可以看到内存分配的排行榜：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/valgrind_massif_memory_analysing/5.png" alt=""></p><p>是不是很方便？</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>其实用于分析内存分配情况的利器还可以采用 <strong>google-perftools</strong>，也是采用对内存采样的方式进行采集，然后生成不同的内存采样文件，结束之后比较两个内存采样文件，就可以分析内存分配情况，同时也能展示初内存分配的函数调用栈。不过相比较于 valgrind 的 massif 插件，<strong>google-perftools 是需要代码侵入的，并且不能直观的展示内存随采样时间的变化情况</strong>。</p><p>而 massif 采样的内存数据文件，借助 massif-visualizer 工具就能直观的感受到内存分配随采样时间的变化情况。</p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#x69;&#x6e;&#x75;&#120;&#x63;&#x6f;&#100;&#x65;&#50;&#x6e;&#x69;&#x6b;&#105;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;">&#x6c;&#x69;&#x6e;&#x75;&#120;&#x63;&#x6f;&#100;&#x65;&#50;&#x6e;&#x69;&#x6b;&#105;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a></p></li></ul><p>2020-06-16 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Valgrind-Massif&quot;&gt;&lt;a href=&quot;#Valgrind-Massif&quot; class=&quot;headerlink&quot; title=&quot;Valgrind Massif&quot;&gt;&lt;/a&gt;Valgrind Massif&lt;/h1&gt;&lt;p&gt;valgrind 是什么，这里直接引用其他人的博客：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Valgrind是一套Linux下，开放源代码（GPL&lt;br&gt;V2）的仿真调试工具的集合。Valgrind由内核（core）以及基于内核的其他调试工具组成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;内核类似于一个框架（framework），它模拟了一个CPU环境，并提供服务给其他工具；而其他工具则类似于插件 (plug-in)，利用内核提供的服务完成各种特定的内存调试任务。&lt;/p&gt;
&lt;p&gt;Valgrind的体系结构如下图所示：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/valgrind_massif_memory_analysing/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Massif-命令行选项&quot;&gt;&lt;a href=&quot;#Massif-命令行选项&quot; class=&quot;headerlink&quot; title=&quot;Massif 命令行选项&quot;&gt;&lt;/a&gt;Massif 命令行选项&lt;/h1&gt;&lt;p&gt;关于 massif 命令行选项，可以直接查看 valgrind 的 help 信息：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MASSIF OPTIONS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--heap=&amp;lt;yes|no&amp;gt; [default: yes]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Specifies whether heap profiling should be done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--heap-admin=&amp;lt;size&amp;gt; [default: 8]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           If heap profiling &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; enabled, gives &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; administrative bytes per block &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; use. This should be an estimate &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; average, &lt;span class=&quot;keyword&quot;&gt;since&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; may vary. For example, &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           allocator used &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; glibc &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; Linux requires somewhere &lt;span class=&quot;keyword&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; bytes per block, depending &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; various factors. That allocator also requires admin &lt;span class=&quot;literal&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; freed blocks,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; Massif cannot account &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; this.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--stacks=&amp;lt;yes|no&amp;gt; [default: no]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Specifies whether stack profiling should be done. This option slows Massif down greatly, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; so &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; off &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; default. Note &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; Massif assumes &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; main stack has size zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; start-up. This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; doing otherwise accurately &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; difficult. Furthermore, starting &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; zero better indicates &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; size &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; part &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; main stack &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; a user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           program actually has control &lt;span class=&quot;keyword&quot;&gt;over&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--pages-as-heap=&amp;lt;yes|no&amp;gt; [default: no]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Tells Massif &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; profile memory &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; page level rather than &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; malloc&#39;d block level. See &lt;span class=&quot;keyword&quot;&gt;above&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; details.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--depth=&amp;lt;number&amp;gt; [default: 30]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Maximum depth &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; allocation trees recorded &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; detailed snapshots. Increasing &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; will make Massif &lt;span class=&quot;built_in&quot;&gt;run&lt;/span&gt; somewhat more slowly, use more memory, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; produce bigger output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           files.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--alloc-fn=&amp;lt;name&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Functions specified &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; this option will be treated &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; though they were a heap allocation function such &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; malloc. This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; useful &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; functions &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; are wrappers &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; malloc &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           new, which can fill up &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; allocation trees &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; uninteresting information. This option can be specified multiple &lt;span class=&quot;keyword&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; command line, &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt; multiple functions.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Note &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; named function will only be treated this way &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; top entry &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; a stack trace, &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; just &lt;span class=&quot;keyword&quot;&gt;below&lt;/span&gt; another function treated this way. For example, &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; you have a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           function malloc1 &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; wraps malloc, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; malloc2 &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; wraps malloc1, just specifying &lt;span class=&quot;comment&quot;&gt;--alloc-fn=malloc2 will have no effect. You need to specify --alloc-fn=malloc1 as well.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; a little inconvenient, &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; reason &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; checking &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; allocation functions &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; slow, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; saves a lot &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; Massif can stop looking &lt;span class=&quot;keyword&quot;&gt;through&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; stack trace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           entries &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; soon &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; finds one &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; doesn&#39;t match rather than having &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;through&lt;/span&gt; all &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; entries.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Note &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; C++ names are demangled. Note also &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; overloaded C++ names must be written &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; full. Single quotes may be necessary &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; prevent &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; shell &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; breaking them up. For&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;comment&quot;&gt;--alloc-fn=&#39;operator new(unsigned, std::nothrow_t const&amp;amp;)&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--ignore-fn=&amp;lt;name&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Any direct heap allocation (i.e. a call &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; malloc, new, etc, &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; a call &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; a function named &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; an &lt;span class=&quot;comment&quot;&gt;--alloc-fn option) that occurs in a function specified by this option will be&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           ignored. This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; mostly useful &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; testing purposes. This option can be specified multiple &lt;span class=&quot;keyword&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; command line, &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt; multiple functions.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Any realloc &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; an ignored block will also be ignored, even &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; realloc call &lt;span class=&quot;keyword&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; occur &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; an ignored function. This avoids &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; possibility &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; negative heap sizes &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           ignored blocks are shrunk &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; realloc.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           The rules &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; writing C++ function names are &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; same &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--alloc-fn above.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--threshold=&amp;lt;m.n&amp;gt; [default: 1.0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           The significance threshold &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; heap allocations, &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; a percentage &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; total memory size. Allocation tree entries &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; account &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;less than&lt;/span&gt; this will be aggregated. Note &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           this should be specified &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; tandem &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; ms_print&#39;s option &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; same &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--peak-inaccuracy=&amp;lt;m.n&amp;gt; [default: 1.0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Massif &lt;span class=&quot;keyword&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; necessarily &lt;span class=&quot;built_in&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; actual &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; memory allocation peak; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; default &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; records a peak only when &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; memory allocation size exceeds &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; previous peak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; least &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;%. This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; because there can be many &lt;span class=&quot;keyword&quot;&gt;local&lt;/span&gt; allocation peaks along &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; way, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; doing a detailed snapshot &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;every&lt;/span&gt; one would be expensive &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; wasteful, &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; one &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; them will be later discarded. This inaccuracy can be changed (even &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;%) via this option, &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; Massif will &lt;span class=&quot;built_in&quot;&gt;run&lt;/span&gt; drastically slower &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; approaches zero.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--time-unit=&amp;lt;i|ms|B&amp;gt; [default: i]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           The &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; unit used &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; profiling. There are three possibilities: instructions executed (i), which &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; good &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; most cases; &lt;span class=&quot;built_in&quot;&gt;real&lt;/span&gt; (wallclock) &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; (ms, i.e. milliseconds),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           which &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; sometimes useful; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; bytes allocated/deallocated &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; heap &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; stack (B), which &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; useful &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; very short-&lt;span class=&quot;built_in&quot;&gt;run&lt;/span&gt; programs, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; testing purposes, because &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; most reproducible across different machines.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--detailed-freq=&amp;lt;n&amp;gt; [default: 10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Frequency &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; detailed snapshots. With &lt;span class=&quot;comment&quot;&gt;--detailed-freq=1, every snapshot is detailed.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--max-snapshots=&amp;lt;n&amp;gt; [default: 100]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           The maximum &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; snapshots recorded. If &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; N, &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; all programs except very short-&lt;span class=&quot;built_in&quot;&gt;running&lt;/span&gt; ones, &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; final &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; snapshots will be &lt;span class=&quot;keyword&quot;&gt;between&lt;/span&gt; N/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; N.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--massif-out-file=&amp;lt;file&amp;gt; [default: massif.out.%p]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Write &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; profile data &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; rather than &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; default output &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;, massif.out.&amp;lt;pid&amp;gt;. The %p &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; %q format specifiers can be used &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; embed &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; process ID &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; an environment variable &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; case &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; core option &lt;span class=&quot;comment&quot;&gt;--log-file.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;对其中几个常用的选项做一个说明：&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://www.rebootcat.com/categories/linux/"/>
    
    
      <category term="valgrind" scheme="http://www.rebootcat.com/tags/valgrind/"/>
    
      <category term="massif" scheme="http://www.rebootcat.com/tags/massif/"/>
    
      <category term="ubuntun" scheme="http://www.rebootcat.com/tags/ubuntun/"/>
    
      <category term="memory" scheme="http://www.rebootcat.com/tags/memory/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之其它网络攻击</title>
    <link href="http://www.rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/"/>
    <id>http://www.rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/</id>
    <published>2020-04-16T03:23:58.000Z</published>
    <updated>2020-04-18T16:29:28.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p><p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p><p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p><p>同系列：</p><ul><li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li><li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></li><li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li><li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a> </li><li><a href="http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之其它网络攻击</a> </li></ul><h1 id="异形攻击"><a href="#异形攻击" class="headerlink" title="异形攻击"></a>异形攻击</h1><p>异形攻击又称地址污染攻击，是指诱使同类链的节点之间互相发现、互联、侵入的一种攻击手法。同类链的意思是底层 P2P 网络使用了相同或者相似的 P2P 通信协议。这尤其针对比特币和以太坊系列的公链。</p><p>众所周知，最近几年区块链行业蓬勃发展，又过于浮躁。其中很多劣质公链大量 COPY 以太坊、比特币的源码，甚至不做修改，仅仅修改下名字成为一条新的公链，这就导致大量的公链的底层是相同的或者兼容的。</p><p>那么如果攻击者执行了异形攻击，就有可能导致同类链的节点之间互相缠绕在一起，影响公链节点内部的通信和路由，进而影响到交易、共识和安全。从而让攻击者有机会施行其他的攻击，比如 DDoS 攻击，网络分裂攻击。</p><p>本质上还是由于伸手党的存在，并且不加以修饰和对节点的检测造成了异形攻击。应对办法也很简单，首先是拒绝做伸手党，即便伸手党，起码也要研究下别人的代码，做点创新和原创的东西；其次加强对本公链的节点类型的检测，比如节点地址不符合的一切拒绝，通信协议不一致的一切拒绝，通信报文头特殊字段不一致的一切拒绝等等。</p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_other_attack/1.png" style="zoom:100%;margin:auto;"/><center>配图与本文无关</center><a id="more"></a><h1 id="窃听攻击"><a href="#窃听攻击" class="headerlink" title="窃听攻击"></a>窃听攻击</h1><p>这不是区块链特有的攻击手法，本质上就是流量行为分析，通过分析流量，甚至可以把 IP 和家庭地址关联起来，从而知道某笔交易时来自某一个特定的客户端或者某个人。</p><p>区块链的去中心化带来的一个好处就是匿名，或者说相对匿名，但是攻击者通过追踪某笔交易，分析流量等措施，锁定现实世界的具体某个人，然后执行一些违法犯罪的事情。</p><h1 id="交易延展性攻击"><a href="#交易延展性攻击" class="headerlink" title="交易延展性攻击"></a>交易延展性攻击</h1><p>延展性攻击者侦听P2P网络中的交易，利用交易签名算法的特征修改原交易中的input 签名, 生成拥有一样input和output的新交易，然后广播到网络中形成双花，这样原来的交易就可能有一定的概率不能被确认，在虚拟货币交易的情况下，它可以被用来进行二次存款或双重提现。</p><p>案例</p><ol><li><p>2014年8月，在线黑市Silk Road 2遭遇交易延展性攻击，部分比特币被盗，损失约260万美元</p></li><li><p>2013年11月，GHash.io矿池对赌博网站BetCoin Dice进行多次付款欺诈，实施双重支出攻击</p></li></ol><h1 id="BGP劫持攻击"><a href="#BGP劫持攻击" class="headerlink" title="BGP劫持攻击"></a>BGP劫持攻击</h1><p>边界网关协议(BGP)是因特网的关键组成部分，用于确定路由路径。BGP劫持,即利用BGP操纵因特网路由路径，最近几年中已经变得越来越频繁。 无论是网络犯罪分子还是政府,都可以利用这种技术来达到自己的目的，如误导和拦截流量等，目前在区块链网络中节点的流量一但被接管又能对整个网络造成巨大的影响，如破坏共识机制，交易等各种信息。</p><p>而对于BGP劫持攻击中，目前有安全研究者已经证明该攻击的概念可行性，从2015年11月5日至2016年11月15日通过对节点网络的分析统计目前大多数比特币节点都托管在少数特定的几个互联网服务提供商(ISPs)，而60%的比特币连接都是在这几个ISP。所以这几个ISP可以看到60%的比特币流量，所以也能够做到对目前比特币网络的流量控制权，研究者通过劫持的场景验证了至少如下两个攻击概念是可行的，同时给出了验证的代码[8]。</p><p>分割攻击</p><p>攻击者可以利用BGP劫持来讲区块链网络划分成两个或多个不相交的网络，此时的区块链会分叉为两条或多条并行链。攻击停止后，区块链会重新统一为一条链，以最长的链为主链，其他的链将被废弃，其上的交易、奖励等全部无效。</p><p>攻击场景举例：</p><p>1) 首先，攻击者发动BGP劫持，将网络分割为两部分，一个大网络、一个小网络。</p><p>2) 在小网络中，攻击者发布交易卖出自己全部的加密货币，并兑换为法币。</p><p>3) 经过小网络的“全网确认”，这笔交易生效，攻击者获得等值的法币。</p><p>4) 攻击者释放BGP劫持，大网络与小网络互通，小网络上的一切交易被大网络否定，攻击者的加密货币全部回归到账户，而交易得来的法币，依然还在攻击者手中，完成获利。</p><h1 id="路由攻击"><a href="#路由攻击" class="headerlink" title="路由攻击"></a>路由攻击</h1><p>路由攻击往往配合其他的攻击来施行，攻击者可以先利用女巫攻击或者日蚀攻击把网络分裂，然后篡改消息发送到网络当中。最终效果是影响了网络中的通信和路由。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>其实关于区块链系统的攻击方式还有很多，本系列主要偏重于网络层面的攻击。针对不同的攻击，需要采用不同的防御方案，并且很多攻击手法并非区块链特有。随着区块链的发展，黑客的攻击也不会停止，对于公链来说，还有很多挑战。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.leiphone.com/news/201805/wujKxkTTleb6kBef.html" target="_blank" rel="noopener">疯狂“搬运”币的黑客如何攻击区块链｜干货（一）</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#x69;&#x6e;&#x75;&#120;&#99;&#x6f;&#x64;&#x65;&#x32;&#x6e;&#x69;&#107;&#x69;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#111;&#109;">&#108;&#x69;&#x6e;&#x75;&#120;&#99;&#x6f;&#x64;&#x65;&#x32;&#x6e;&#x69;&#107;&#x69;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#111;&#109;</a></p></li></ul><p>2020-04-16 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。&lt;/p&gt;
&lt;p&gt;本文就谈一下目前几种区块链网络攻击，以及其防御方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同系列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之51%攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之日蚀攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之女巫攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之其它网络攻击&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;异形攻击&quot;&gt;&lt;a href=&quot;#异形攻击&quot; class=&quot;headerlink&quot; title=&quot;异形攻击&quot;&gt;&lt;/a&gt;异形攻击&lt;/h1&gt;&lt;p&gt;异形攻击又称地址污染攻击，是指诱使同类链的节点之间互相发现、互联、侵入的一种攻击手法。同类链的意思是底层 P2P 网络使用了相同或者相似的 P2P 通信协议。这尤其针对比特币和以太坊系列的公链。&lt;/p&gt;
&lt;p&gt;众所周知，最近几年区块链行业蓬勃发展，又过于浮躁。其中很多劣质公链大量 COPY 以太坊、比特币的源码，甚至不做修改，仅仅修改下名字成为一条新的公链，这就导致大量的公链的底层是相同的或者兼容的。&lt;/p&gt;
&lt;p&gt;那么如果攻击者执行了异形攻击，就有可能导致同类链的节点之间互相缠绕在一起，影响公链节点内部的通信和路由，进而影响到交易、共识和安全。从而让攻击者有机会施行其他的攻击，比如 DDoS 攻击，网络分裂攻击。&lt;/p&gt;
&lt;p&gt;本质上还是由于伸手党的存在，并且不加以修饰和对节点的检测造成了异形攻击。应对办法也很简单，首先是拒绝做伸手党，即便伸手党，起码也要研究下别人的代码，做点创新和原创的东西；其次加强对本公链的节点类型的检测，比如节点地址不符合的一切拒绝，通信协议不一致的一切拒绝，通信报文头特殊字段不一致的一切拒绝等等。&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_other_attack/1.png&quot; style=&quot;zoom:100%;margin:auto;&quot;/&gt;

&lt;center&gt;配图与本文无关&lt;/center&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="http://www.rebootcat.com/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="http://www.rebootcat.com/tags/blockchain/"/>
    
      <category term="attack" scheme="http://www.rebootcat.com/tags/attack/"/>
    
      <category term="bitcoin" scheme="http://www.rebootcat.com/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</title>
    <link href="http://www.rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/"/>
    <id>http://www.rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/</id>
    <published>2020-04-14T03:23:58.000Z</published>
    <updated>2020-04-22T14:53:25.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p><p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p><p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p><p>同系列：</p><ul><li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li><li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></li><li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li><li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a></li><li><a href="http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之其它网络攻击</a></li></ul><h1 id="拒绝服务攻击（Denial-of-Service-Attack"><a href="#拒绝服务攻击（Denial-of-Service-Attack" class="headerlink" title="拒绝服务攻击（Denial of Service Attack)"></a>拒绝服务攻击（Denial of Service Attack)</h1><h1 id="分布式拒绝服务攻击（Distributed-Denial-of-Service-Attack"><a href="#分布式拒绝服务攻击（Distributed-Denial-of-Service-Attack" class="headerlink" title="分布式拒绝服务攻击（Distributed Denial of Service Attack)"></a>分布式拒绝服务攻击（Distributed Denial of Service Attack)</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>信息安全的三要素——“保密性”、“完整性”和“可用性”中，拒绝服务攻击，针对的目标正是“可用性”。该攻击方式利用目标系统网络服务功能缺陷或者直接消耗其系统资源，使得该目标系统无法提供正常的服务。</p><p>拒绝服务攻击（DoS) 问题一直得不到合理的解决，目前还是世界性难题，究其原因是因为这是由于网络协议本身的安全缺陷造成的，从而拒绝服务攻击也成为了攻击者的终极手法。攻击者进行拒绝服务攻击，实际上让服务器实现两种效果：一是迫使服务器的缓冲区满，不接收新的请求；二是使用IP欺骗，迫使服务器把合法用户的连接复位，影响合法用户的连接。</p><p>而分布式拒绝服务攻击 (DDoS) 是指攻击者采用分布式攻击手法施行 DoS 攻击，通常是控制了多台机器向目标主机或者路由器发起 DoS 攻击。</p><p>针对区块链来说，攻击者通过 DDoS 攻击试图减慢网络速度，或者迫使网络停止运作。也可用于针对矿池，使矿池脱机，或者针对特定的目标主机，使其从网络离线。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_ddos_attack/11.png" alt=""></p><a id="more"></a><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>DDoS 攻击造成的危害自不必说，中心化场景下，通常针对网站或者主机施行攻击，造成网站无法访问，影响业务运作，造成巨大经济损失；</p><p>在区块链场景下，攻击者目标通常是为了一定的利益才执行这样的攻击，导致网络速度变慢，或者影响矿工挖矿，从而方便攻击者对目标下手。</p><p>DDoS 并非是区块链特有的攻击，在中心化场景下的攻击其实相对会更多。</p><h2 id="攻击形式"><a href="#攻击形式" class="headerlink" title="攻击形式"></a>攻击形式</h2><h3 id="带宽攻击"><a href="#带宽攻击" class="headerlink" title="带宽攻击"></a>带宽攻击</h3><p>带宽攻击很好理解，通过攻击使受害者节点的网络带宽耗尽，从而造成拒绝服务的效果。</p><p>区块链系统的底层构建于 P2P 网络，其中通信上广播占据了大部分通信，一次广播通常就是大于 N 倍的收包，随着网络规模的扩大，节点数量的增多，通信的压力也会很大。</p><p>攻击者通过疯狂向节点通信端口发包，或者攻击者利用软件逻辑触发系统自动的大规模通信（比如触发同步），耗尽节点的带宽，最终从网络中离线。</p><p>而一旦离线重启之后，往往又会伴随着其他的攻击，比如 日蚀攻击，详情可以参考之前的博文： <a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></p><h3 id="CC-攻击"><a href="#CC-攻击" class="headerlink" title="CC 攻击"></a>CC 攻击</h3><p>DDoS 攻击是针对 IP 的攻击，而 CC 攻击的是服务器资源。</p><blockquote><p>CC攻击全称Challenge Collapsar，中文意思是挑战黑洞，因为以前的抵抗DDoS攻击的安全设备叫黑洞，顾名思义挑战黑洞就是说黑洞拿这种攻击没办法，新一代的抗DDoS设备已经改名为ADS(Anti-DDoS System)，基本上已经可以完美的抵御CC攻击了。CC攻击的原理是通过代理服务器或者大量肉鸡模拟多个用户访问目标网站的动态页面，制造大量的后台数据库查询动作，消耗目标CPU资源，造成拒绝服务。CC不像DDoS可以用硬件防火墙来过滤攻击，CC攻击本身的请求就是正常的请求。我们都知道网站的页面有静态和动态之分，动态网页是需要与后台数据库进行交互的，比如一些论坛用户登录的时候需要去数据库查询你的等级、权限等等，当你留言的时候又需要查询权限、同步数据等等，这就消耗很多CPU资源，造成静态网页能打开，但是需要和数据库交互的动态网页打开慢或者无法打开的现象。这种攻击方式相对于前两种实现要相对复杂一些，但是防御起来要简单的多，提供服务的企业只要尽量少用动态网页并且让一些操作提供验证码就能抵御一般的CC攻击。</p><p>CC攻击的种类有三种，直接攻击，代理攻击，僵尸网络攻击，直接攻击主要针对有重要缺陷的 WEB 应用程序，一般说来是程序写的有问题的时候才会出现这种情况，比较少见。僵尸网络攻击有点类似于 DDOS 攻击了，从 WEB 应用程序层面上已经无法防御，所以代理攻击是CC 攻击者一般会操作一批代理服务器，比方说 100 个代理，然后每个代理同时发出 10 个请求，这样 WEB 服务器同时收到 1000 个并发请求的，并且在发出请求后，立刻断掉与代理的连接，避免代理返回的数据将本身的带宽堵死，而不能发动再次请求，这时 WEB 服务器会将响应这些请求的进程进行队列，数据库服务器也同样如此，这样一来，正常请求将会被排在很后被处理，就象本来你去食堂吃饭时，一般只有不到十个人在排队，今天前面却插了一千个人，那么轮到你的机会就很小很小了，这时就出现页面打开极其缓慢或者白屏。</p></blockquote><h3 id="SYN-洪泛攻击"><a href="#SYN-洪泛攻击" class="headerlink" title="SYN 洪泛攻击"></a>SYN 洪泛攻击</h3><p>SYN Flooding 攻击是指攻击者发送了大量的 TCP/SYN 包，并且以一个假的 IP 作为发送地址到达目标主机，由于 TCP 在建立连接的时候有 3 次握手，也就是建立连接需要发送 3 个包，当目标主机收到这个 SYN 建连包之后，会回复一个 SYN-ACK 包。</p><p>但是由于攻击者恶意伪造了来源 IP，那么攻击者是收不到这个 ACK 包的，但是会导致目标主机打开了一个半开放的连接，如果攻击者发动了频繁的 SYN 洪泛攻击，那么会造成目标主机 TCP 资源消耗枯竭，导致无法与正常客户端建立连接，以达到拒绝服务的效果。</p><h3 id="Land-攻击"><a href="#Land-攻击" class="headerlink" title="Land 攻击"></a>Land 攻击</h3><p>Land 攻击是 SYN 攻击的变种，攻击者此时伪造的来源 IP 就是目标主机的 IP，也就是说这个 TCP SYN 包的来源 IP  和 目的 IP 相同，都是目标主机，那么就会导致目标主机向自己发送大量的 SYN-ACK 包，从而消耗 TCP 资源，阻止正常客户端的连接建立。</p><h2 id="攻击案例"><a href="#攻击案例" class="headerlink" title="攻击案例"></a>攻击案例</h2><h3 id="GitHub-遭受史上最大规模-DDoS-攻击"><a href="#GitHub-遭受史上最大规模-DDoS-攻击" class="headerlink" title="GitHub 遭受史上最大规模 DDoS 攻击"></a>GitHub 遭受史上最大规模 DDoS 攻击</h3><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 想必大家都不陌生，全球最大的同性交友网站。在美国东部时间 2 月 28 日下午 17:28 分，几乎一瞬间收到了 1.35 Tbps 的流量访问。这是互联网有史以来规模最大、威力最大的分布式拒绝服务攻击 （DDos)。</p><p>不到十分钟，GitHub 就不得不向 CDN 服务商 Akamai 请求协助。最终 Akamai 接管了GitHub 的所有信息流，并通过其清理中心发送数据以清除和阻止恶意数据包。8 分钟后，攻击者发现没什么效果，选择了撤退，停止了攻击。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_ddos_attack/2.png" alt=""></p><p>详情可以查看 GitHub 的官方声明： <a href="https://github.blog/2018-03-01-ddos-incident-report/" target="_blank" rel="noopener">February 28th DDoS Incident Report</a></p><p>此次的 DDoS 攻击是属于中心化世界里面的一次较为著名的攻击，而且类似于这样的攻击每天都在发生。</p><p>大家可以看一下这个网站，来自卡巴斯基实验室的数据（多观看几分钟能看到 3D 攻击画面，还是挺震撼的）： <a href="https://cybermap.kaspersky.com/cn" target="_blank" rel="noopener">网络威胁实时地图</a></p><h3 id="2016-年以太坊-DDoS-攻击"><a href="#2016-年以太坊-DDoS-攻击" class="headerlink" title="2016 年以太坊 DDoS 攻击"></a>2016 年以太坊 DDoS 攻击</h3><p>2016 年以太坊发生过一次严重的 DDoS 攻击，此次攻击也被称为 “EXTCODESIZE” 攻击。</p><p>攻击者让矿工和节点需要花费很长的时间 （20 ~ 60 秒) 来处理一些区块。造成这次攻击的原因是一个 EXTCODESIZE 的操作码，它具有相当低的 gas 价格，需要节点从磁盘读取状态信息。攻击交易调用此操作码的频率大约是 50000 次每区块。这样的后果就是，网络大大放缓了，但没有共识故障或是内存超载发生。</p><p>因为此次攻击事件，很多媒体都宣告了以太坊的末日。可见在区块链世界里，DDoS 攻击的后果是比较严重的。</p><h3 id="以太坊-Fomo3D，黑客拿走-2200-万"><a href="#以太坊-Fomo3D，黑客拿走-2200-万" class="headerlink" title="以太坊 Fomo3D，黑客拿走 2200 万"></a>以太坊 Fomo3D，黑客拿走 2200 万</h3><p>Fomo3D 是以太坊上一个比较火爆的 Dapp，是一个类似于资金盘的游戏。此次攻击过程还是挺有趣的，各位可以往下看。</p><p>首先，介绍一下 Fomo3D 这个游戏的规则：</p><blockquote><p>规则1： 每个人参与游戏需要购买一个 Key</p><p>规则2： 在一轮游戏中，谁是最后一个购买 Key 的人，则可以拿走奖池中的大奖</p><p>规则3： 只要有人购买一个 Key, 游戏倒计时就会增加 30 秒</p><p>规则4： 游戏启动从 24 小时倒计时</p></blockquote><p>规则里面最吸引人的一条是，只要你是最后一个购买的人，你就是最终的大奖得主，是不是很有 Du博 的感觉？</p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_ddos_attack/3.png" style="zoom:100%;margin:auto;"/><p>所以看到规则后，你会怎么做？</p><p>正常人一般都是在倒数的最后几分钟或者几秒钟去购买 Key，这样的话自己也许是倒计时结束后最后一个购买的人。但是这个想法是大多数人的想法，我们毕竟只是普通玩家。</p><p>那么稍微高级一点的玩家呢，比如程序员，可能会写个脚本，自动化的方式来购买 Key，速度是不是比手工快多了。</p><p><strong>那么来看看黑客玩家是怎么做的</strong>？</p><p>我们都知道，购买 Key 之后，只要后面没有人再购买，你就是大奖得主，基于本文的探讨，如果你以前没有听说个这个事件的话，那么此刻你是不是已经有了一些想法？对的，没错，就是利用 DDoS 攻击，在你购买成功后，马上施行攻击，拖慢整个网络，造成矿工无法打包或者打包很慢，那么势必会影响到其他交易的正常进行。如果你比较幸运，正好导致其他正在购买 Key 的人的交易失败了，那么你就是大奖得主。</p><p>但是说起来容易，实际做起来还是不太容易操作的。因为你要能确保你购买成功后的  DDos 攻击能让后续的交易都失败，不然弄巧成拙，帮助了某个漏网之鱼，别人恰好因为你的攻击成为了最后一个购买的人。</p><p>了解以太坊的人应该听说过 gas 机制，可以理解为一个交易的手续费，而矿工通常会优先打包 gas 费用较高的交易，那么这位黑客利用自己的智能合约创建了大量的交易，并且具有高额的 gas 费用，几乎垄断了以太坊网络的所有算力，这样就造成了以太坊拥堵了接近 3 分钟，进而使其他的玩家无法打包购买 Key 的交易，从而成为大奖得主。</p><p>该黑客此前还尝试过多次这样的攻击，直至最后一次才成功。</p><p>是不是还是很有趣的？区块链公链本身具有比较致命的缺陷就是 tps 很低，单位时间处理的交易有限。后续的交易只能在排队，尤其是在网络被攻击拖慢的情况下，交易成功的时间会大大拉长。</p><h2 id="DDoS-防御方案"><a href="#DDoS-防御方案" class="headerlink" title="DDoS 防御方案"></a>DDoS 防御方案</h2><h3 id="高防服务器"><a href="#高防服务器" class="headerlink" title="高防服务器"></a>高防服务器</h3><p>高防服务器就是指能独立硬防御 50Gbps 以上的服务器，本身就能抑制一定的 DDoS 攻击。这个没什么好说的，买就是了，只是比较贵。</p><h3 id="CDN-加速"><a href="#CDN-加速" class="headerlink" title="CDN 加速"></a>CDN 加速</h3><p>CDN 本身就就有大带宽，多节点的优势，并且隐藏了真实的网站 IP。通过把流量分配到多地多节点降低攻击负载，防止源站崩溃。</p><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>防火墙能防御 DDoS 和其他的一些攻击。防火墙有软件防火墙和硬件防火墙之分。必要可以两者结合。</p><h3 id="攻击检测和溯源"><a href="#攻击检测和溯源" class="headerlink" title="攻击检测和溯源"></a>攻击检测和溯源</h3><p>通过分析攻击的方法和手段，追踪攻击的路由，检测出恶意的 IP 和路由，做好相应的屏蔽，保护主机。</p><h3 id="黑名单机制"><a href="#黑名单机制" class="headerlink" title="黑名单机制"></a>黑名单机制</h3><p>通过建立黑名单机制，限制黑名单的访问。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>DDoS 攻击每天都在发生，对于区块链系统来说，由于接入的节点性能参差不齐以及无许可的特征，想要利用中心化的防御机制去做好 DDoS 防御可能还是有难度。况且由于区块链本身的弊端，性能瓶颈，更容易被攻击者利用。</p><h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p><a href="https://bcsec.org/index/detail/tag/2/id/332" target="_blank" rel="noopener">BlockChain中DDos攻击的深入剖析</a></p><p><a href="https://www.safedog.cn/news.html?id=1550" target="_blank" rel="noopener">DDOS攻击疯狂危害大 谈谈如何防御攻击</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#x69;&#x6e;&#117;&#x78;&#99;&#111;&#x64;&#101;&#x32;&#110;&#105;&#107;&#105;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#109;">&#x6c;&#x69;&#x6e;&#117;&#x78;&#99;&#111;&#x64;&#101;&#x32;&#110;&#105;&#107;&#105;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#109;</a></p></li></ul><p>2020-04-14 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。&lt;/p&gt;
&lt;p&gt;本文就谈一下目前几种区块链网络攻击，以及其防御方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同系列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之51%攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之日蚀攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之女巫攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之其它网络攻击&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;拒绝服务攻击（Denial-of-Service-Attack&quot;&gt;&lt;a href=&quot;#拒绝服务攻击（Denial-of-Service-Attack&quot; class=&quot;headerlink&quot; title=&quot;拒绝服务攻击（Denial of Service Attack)&quot;&gt;&lt;/a&gt;拒绝服务攻击（Denial of Service Attack)&lt;/h1&gt;&lt;h1 id=&quot;分布式拒绝服务攻击（Distributed-Denial-of-Service-Attack&quot;&gt;&lt;a href=&quot;#分布式拒绝服务攻击（Distributed-Denial-of-Service-Attack&quot; class=&quot;headerlink&quot; title=&quot;分布式拒绝服务攻击（Distributed Denial of Service Attack)&quot;&gt;&lt;/a&gt;分布式拒绝服务攻击（Distributed Denial of Service Attack)&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;信息安全的三要素——“保密性”、“完整性”和“可用性”中，拒绝服务攻击，针对的目标正是“可用性”。该攻击方式利用目标系统网络服务功能缺陷或者直接消耗其系统资源，使得该目标系统无法提供正常的服务。&lt;/p&gt;
&lt;p&gt;拒绝服务攻击（DoS) 问题一直得不到合理的解决，目前还是世界性难题，究其原因是因为这是由于网络协议本身的安全缺陷造成的，从而拒绝服务攻击也成为了攻击者的终极手法。攻击者进行拒绝服务攻击，实际上让服务器实现两种效果：一是迫使服务器的缓冲区满，不接收新的请求；二是使用IP欺骗，迫使服务器把合法用户的连接复位，影响合法用户的连接。&lt;/p&gt;
&lt;p&gt;而分布式拒绝服务攻击 (DDoS) 是指攻击者采用分布式攻击手法施行 DoS 攻击，通常是控制了多台机器向目标主机或者路由器发起 DoS 攻击。&lt;/p&gt;
&lt;p&gt;针对区块链来说，攻击者通过 DDoS 攻击试图减慢网络速度，或者迫使网络停止运作。也可用于针对矿池，使矿池脱机，或者针对特定的目标主机，使其从网络离线。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_ddos_attack/11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="http://www.rebootcat.com/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="http://www.rebootcat.com/tags/blockchain/"/>
    
      <category term="attack" scheme="http://www.rebootcat.com/tags/attack/"/>
    
      <category term="bitcoin" scheme="http://www.rebootcat.com/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之女巫攻击</title>
    <link href="http://www.rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/"/>
    <id>http://www.rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/</id>
    <published>2020-04-13T02:23:58.000Z</published>
    <updated>2020-04-22T14:53:10.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p><p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p><p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p><p>同系列：</p><ul><li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li><li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a> </li><li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li><li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a> </li><li><a href="http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之其它网络攻击</a></li></ul><h1 id="女巫攻击（Sybil-Attack）"><a href="#女巫攻击（Sybil-Attack）" class="headerlink" title="女巫攻击（Sybil Attack）"></a>女巫攻击（Sybil Attack）</h1><h2 id="什么是女巫攻击"><a href="#什么是女巫攻击" class="headerlink" title="什么是女巫攻击"></a>什么是女巫攻击</h2><p>“女巫”这个词我们应该不陌生，通常指邪恶的化身，并且拥有可怕的魔法。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_sybil_attack/1.png" alt=""></p><a id="more"></a><p>对于区块链来说，女巫攻击指攻击者将一个节点伪装成多个节点进入 P2P 网络中，在 P2P 网络中具有多重身份。通常用于恶意刷票、恶意刷排名、恶意刷信誉等网络活动，或者在一些网络活动中通过数量优势进行造假。</p><p>女巫攻击与日蚀攻击由类似的地方，但日蚀攻击的着眼点在于某一个确定的节点，而女巫攻击的着眼点在于整个网络。通过伪造身份进入网络，干扰路由，干扰信息传递等。</p><blockquote><p>关于日蚀攻击可以看这篇博文 <a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></p></blockquote><h2 id="如何防御女巫攻击"><a href="#如何防御女巫攻击" class="headerlink" title="如何防御女巫攻击"></a>如何防御女巫攻击</h2><p>女巫攻击的特点就是利用一个节点伪造多重身份信息进入网络，所以一般来说提高进入 P2P 网络的门槛就能有效避免女巫攻击。</p><h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><p>身份验证很好理解，进入这个网络的任何节点都需要做验证，验证通过才能进入网络。这就像去参加一个秘密会以，你需要邀请函才能进入。</p><p>但是如何做身份验证呢？通常有两种方式：</p><ul><li>去中心化身份认证</li><li>中心化身份认证（第三方身份认证）</li></ul><p>但基于去中心化系统的匿名性，一般不推荐采用中心化的身份认证方式。所以在进入网络之时，通常需要网络当中已经存在较长时间或者信誉较高的多数节点共同达成认证公式，才能被允许进入。</p><h3 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h3><p>进入网络是需要成本的，不能够随意的加入退出。所以可以利用类似 POW 的方式对节点入网做一定的工作量证明，提高节点准入门槛。</p><h3 id="特征向量"><a href="#特征向量" class="headerlink" title="特征向量"></a>特征向量</h3><p>在 <a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a> 一文中谈到针对日蚀攻击的防御方案，其中有一个防御方案是采用限制本地路由表中来自同一个 IP 段的节点数量。</p><p>其实这种方式是可能造成误杀的，因为并非来自同一个 IP 段的节点就可能是恶意节点。所以我们可能需要一种更加准确的方式去分析一个节点的行为，区分一个节点。</p><p>我们在做大数据的时候，往往需要通过很多特征向量来区分出是不是同一个用户，同样的在P2P网络中，我们也可以通过这种特征向量来区分这个节点是不是伪造的节点。当然这种方式不能完全避免女巫攻击，但是可以有效的减少女巫攻击。这种是有成熟产品的，像SybilGuard 和 the Advogato Trust Metric。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>女巫攻击相对来说成本是很低的，但是可能获取的收益是比较高的。通常这种攻击也会结合一些日蚀攻击，或者 DDOS 攻击进行。所以真正的区块链网络攻击，多半会结合多种攻击手段一起进行。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/superfjj/article/details/89894076?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1&utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1" target="_blank" rel="noopener">女巫攻击及其防范</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#x69;&#110;&#x75;&#x78;&#99;&#111;&#x64;&#101;&#x32;&#110;&#105;&#107;&#x69;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#108;&#x69;&#110;&#x75;&#x78;&#99;&#111;&#x64;&#101;&#x32;&#110;&#105;&#107;&#x69;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a></p></li></ul><p>2020-04-12 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。&lt;/p&gt;
&lt;p&gt;本文就谈一下目前几种区块链网络攻击，以及其防御方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同系列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之51%攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之日蚀攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之女巫攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之其它网络攻击&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;女巫攻击（Sybil-Attack）&quot;&gt;&lt;a href=&quot;#女巫攻击（Sybil-Attack）&quot; class=&quot;headerlink&quot; title=&quot;女巫攻击（Sybil Attack）&quot;&gt;&lt;/a&gt;女巫攻击（Sybil Attack）&lt;/h1&gt;&lt;h2 id=&quot;什么是女巫攻击&quot;&gt;&lt;a href=&quot;#什么是女巫攻击&quot; class=&quot;headerlink&quot; title=&quot;什么是女巫攻击&quot;&gt;&lt;/a&gt;什么是女巫攻击&lt;/h2&gt;&lt;p&gt;“女巫”这个词我们应该不陌生，通常指邪恶的化身，并且拥有可怕的魔法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_sybil_attack/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="http://www.rebootcat.com/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="http://www.rebootcat.com/tags/blockchain/"/>
    
      <category term="attack" scheme="http://www.rebootcat.com/tags/attack/"/>
    
      <category term="bitcoin" scheme="http://www.rebootcat.com/tags/bitcoin/"/>
    
      <category term="ethereum" scheme="http://www.rebootcat.com/tags/ethereum/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之日蚀攻击</title>
    <link href="http://www.rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/"/>
    <id>http://www.rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/</id>
    <published>2020-04-12T03:23:58.000Z</published>
    <updated>2020-04-22T14:52:56.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p><p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p><p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p><p>同系列：</p><ul><li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li><li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></li><li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li><li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a> </li><li><a href="http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之其它网络攻击</a></li></ul><h1 id="日蚀攻击（Eclipse-Attack"><a href="#日蚀攻击（Eclipse-Attack" class="headerlink" title="日蚀攻击（Eclipse Attack)"></a>日蚀攻击（Eclipse Attack)</h1><h2 id="P2P-网络"><a href="#P2P-网络" class="headerlink" title="P2P 网络"></a>P2P 网络</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在介绍什么是日蚀攻击之前，有必要先对区块链系统的底层 P2P 网络做一个简单的介绍，因为日蚀攻击就是利用了 P2P 网络的特性来进行的攻击。</p><p>P2P 即 Peer to Peer，中文意思是对等网络，它是分布式系统和计算机网络相结合的产物。对等的意思就是网络中的节点角色、地位是平等的，任何节点具有极强的自由，可以任意加入、离开网络。这跟传统的 C/S 模型的结构有很大区别，任何节点既是 client ，也是 server，或者说网络中没有 server 节点，任何节点 down 掉不会对整个网络产生致命的影响，具有极强的伸缩性。</p><p>P2P 网络从诞生到现在经过了几个阶段，分别是混合式 P2P，无结构化 P2P以及结构化 P2P。</p><ul><li>混合式：顾名思义，P2P 网络混合了传统的 C/S 模型，网络中有角色充当 server 角色</li><li>无结构化：也就是网状结构模型，纯分布式网络，典型代表就是比特币网络，节点之间以一种随机的，松散的方式组织在一起</li><li>结构化：节点按照一定规则组织在一起，路由算法比较精准，比如 DHT 算法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/2.png" alt=""></p><center>混合式</center><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/1.png" alt=""></p><center>无结构化</center>![](https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/3.png)<center>结构化(kademlia算法)</center><h3 id="路由表（邻居表）"><a href="#路由表（邻居表）" class="headerlink" title="路由表（邻居表）"></a>路由表（邻居表）</h3><p>P2P 网络里一个比较重要的概念就是路由表，或者说邻居表。路由表里面保存了网络里面的一些节点，具体数量从几个到几十个不等。路由表中的这些节点可以看做是这个节点与这个 P2P 网络建立关联的重要依据，或者说表示节点到这个 P2P 网络的一些入口。这个节点想要发送任何信息需要先转发给路由表中的节点，再由它们负责转发消息。这就是路由表的作用。</p><p>那么无论是哪一种结构的 P2P 网络，每个节点都有一个类似于路由表的概念，本质上就是跟这个网络中的多个节点建立了一些联系，然后后续的所有收发包都交由这些邻居代为收发。</p><p>所以对于 P2P 网络里的一个节点来说，它看不到网络的全貌，只能看到网络的局部信息。并且由于路由表的存在，哪怕路由表中只保存了一个入口节点，这个节点也能服务于整个 P2P 网络，其他节点也能通过一定的方式找到这个节点。</p><h3 id="NAT-穿透"><a href="#NAT-穿透" class="headerlink" title="NAT 穿透"></a>NAT 穿透</h3><p>NAT 穿透不是 P2P 网络的一个必要特性，如果 P2P 网络中都是公网节点（具有公网IP）,其实是不需要 NAT 穿透的。那么如果有一些私网节点（局域网节点）也加入到了这个 P2P 网络中，由于不能互通，导致其他节点无法发现这些私网节点，最后带来的结果就是这个私网节点能够成功发送信息到这个 P2P 网络中，但是可能却无法收到来自 P2P 网络里的消息。注意这里的用词是可能，因为存在一些场景是有可能收到的。</p><p>关于 NAT 穿透我有另外的博客介绍 NAT 穿透方面的东西，这里就不做展开讲了。</p><h2 id="什么是日蚀攻击"><a href="#什么是日蚀攻击" class="headerlink" title="什么是日蚀攻击"></a>什么是日蚀攻击</h2><p>上面介绍了关于 P2P 网络的一些知识和概念，下面开始正式介绍日蚀攻击。</p><p><strong>日蚀，同日食，是指月球运动到地球和太阳的中间，如果三者正好在一条直线上，月球就会挡住太阳射向地球的光，月球身后的黑影正好落到地球上，这时发生日食现象</strong>。月球就切断了地球和太阳之间的（太阳光）联系。<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/4.png" alt=""></p><p>再来看什么是日蚀攻击，<strong>日蚀攻击针对特定的某个节点，通过一些方法，填满被攻击节点的路由表，以便切断它们与其他对等点的所有入站/出站通信（这会有效地窒息受害者）</strong>。上面提到路由表的概念，路由表里的节点是这个 P2P 网络的入口节点，任何收发消息都要经过路由表中的节点。攻击者通过某种方式填满了被攻击的节点，理论上就是控制了这个节点进出网络的信息，造成被攻击节点被 “伪隔离”的现象。</p><p>我觉得用日蚀来形象化的比喻这种攻击还是很合适的，本质上就是隔离了这个节点或者说用恶意节点包围了受害节点。</p><p>那么会造成什么后果呢？</p><ul><li><strong>阻止受害节点查看真实的区块链信息</strong></li><li><strong>隔离网络中多个节点，以达到分裂网络的可能</strong></li><li><strong>用少于 51% 的算力发起 51% 攻击</strong></li></ul><p>上面的几点其实比较好理解的，受害节点被恶意节点包围之后，恶意节点可以选择性的给受害节点发包或者篡改真实的数据包，本质上就是让这个节点误以为自己还在这个网络中挖矿，然而真实情况是它已经从网络中隔离开来了。</p><p>如果受害节点很多的情况，从整个网络全局来看就是被隔离成多个部分，网络实际上已经被分裂了。那么就可以实施分裂网络的 51%攻击，只需要用比原来 51%攻击更少的算力就行。</p><p>关于 51%攻击可以查看这篇博文 <a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之51%攻击</a>。</p><h2 id="如何发起日蚀攻击"><a href="#如何发起日蚀攻击" class="headerlink" title="如何发起日蚀攻击"></a>如何发起日蚀攻击</h2><p>由于每种区块链底层的 P2P 网络模型可能不一样，所以就以以太坊为例来做说明。</p><h3 id="以太坊-kademlia网络原理"><a href="#以太坊-kademlia网络原理" class="headerlink" title="以太坊 kademlia网络原理"></a>以太坊 kademlia网络原理</h3><p>以太坊底层的 P2P 网络采用的是 kademlia 算法，kademlia 网络是一种结构化的 P2P 网络，网络中的节点按照一定的规则组织在一起。</p><p><strong>kademlia 算法中的核心特点是用异或来定义两个节点的距离，这种距离与实际的物理距离没有任何关系</strong>。</p><p>每个节点的路由表会保存不同距离的节点，这个距离的最小值当然是 0，也就是它自己，这个距离的最大值跟节点 ID 的长度有关系（NodeID）。NodeID 是一段具有特定长度的字符串，每个节点具有唯一的 NodeID，用 NodeID 来作为这个节点在 P2P 网络中的身份信息。比如：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">NodeID:</span>   DEA25B0AF6CC5EA9DA4961DBC5FFEB97</span><br></pre></td></tr></table></figure><p>假设 NodeID 长度为 N bit(对于上面的 NodeID 来说 N 为 32 * 8 = 256），那么这个距离的最大值就是 N -1，即距离范围在 [0, N)。</p><p>kademlia 网络中的节点的路由表中会保存每一个距离的节点，数量在 1 个以上，这个值称为为 α 值。也就是说与自己的 NodeID 距离为 1 的会保存 α 个，距离为 2 的会保存 α 个，以此类推，直到距离为 N-1 的节点会保存 α 个。<strong>实际情况是距离越大，能找到符合要求的节点的概率也就越大</strong>，想一想为什么？</p><p>这里每一个距离称为一个 Bucket，每一个 Bucket 里保存着 [0, α] 个距离匹配的节点。</p><p>通过上述对 kademlia 算法的简要描述可以得出一个结论，<strong>知道一个节点的 NodeID，就能够计算出这个节点的路由表中的每一个 Bucket 中应该填入什么样的 NodeID</strong>。而这就是日蚀攻击的核心依据。</p><h3 id="发起日蚀攻击"><a href="#发起日蚀攻击" class="headerlink" title="发起日蚀攻击"></a>发起日蚀攻击</h3><p>当我们知道目标节点的 NodeID 之后，就可以通过一定的方式去伪造生成满足不同 Bucket 的 NodeID，当这个目标节点重启之后，马上以这些 NodeID 启动节点去连接目标节点，由于 kademlia 的特性，这些特意伪造的 NodeID 肯定会被填入目标节点的路由表中，从而把路由表占满，以达到日蚀攻击的目的。</p><p>至于让目标节点重启，可以等待目标节点自动重启或者采用 DOS 攻击迫使目标节点重启，当重启之后马上进行上面的操作就可以完成日蚀攻击。</p><p>当成功发起日蚀攻击之后，随后就能隔离节点，篡改目标节点的收发数据包了。</p><h2 id="如何防御日蚀攻击"><a href="#如何防御日蚀攻击" class="headerlink" title="如何防御日蚀攻击"></a>如何防御日蚀攻击</h2><p>根据上述的讨论知道，想要避免日蚀攻击由很多种办法：（可能只适用于 kademlia 网络）</p><ul><li>提高节点进入网络的准入门槛</li></ul><p>节点进入 P2P 网络需要一定的门槛，不论是以时间为代价还是以 Stake 或是工作证明为代价，这样就能有效防止大批量伪造节点进入网络，从而从源头上避免日蚀攻击</p><ul><li>针对同一个 IP 段的节点做连接限制</li></ul><p>攻击者很可能利用有限的 IP （1 ~ 2 个）伪造大量节点，发起日蚀攻击，那么对于目标节点来说，看到的节点都是来自于这个 IP，多半可以说明这是恶意节点。那么只需要对来自同一个 IP 段的节点做一定数量的限制，比如 最多 2 个，那么也能显著提高攻击者的攻击成本</p><ul><li>对节点主动建立连接和被动建立连接的数量做一定的均衡</li></ul><p>发起日蚀攻击，需要主动占满目标节点的路由表，也就是主动与目标节点建立连接，即便不是这样，也有方法让目标节点主动建立连接到恶意节点。所以对于进出的连接数，做一定的均衡能有效避免日蚀攻击的发生</p><ul><li>NodeID 重启之后变化</li></ul><p>进行日蚀攻击的前提是需要知道目标节点的 NodeID，并且迫使目标节点重启，然后以事先根据目标节点 NodeID 计算好的伪造节点发起连接，达成日蚀攻击。所以如果节点重启之后 NodeID 变为与原来不再一致，那么攻击者事先计算伪造的节点就变得毫无可用之地了。</p><ul><li>其他辅助措施</li></ul><p>比如节点实时检测，发现恶意节点进行广播，并采取一定的惩罚措施等。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>最后我们再来简单对比一下比特币和以太坊对日蚀攻击的反应。</p><p>由于以太坊采用的是结构化的 P2P 网络，并且采用了 kademlia 算法，那么知道了 NodeID，基本上就大致能知道这个路由表中应该填入一些什么类型的节点；</p><p>而对于比特币来说，由于比特币的 P2P 网络采用的是无结构的模型，节点之间以随机，松散的方式进行组织。想要通过类似以太坊日蚀攻击的方法去攻击比特币网络，不太行得通，因为比特币节点不关心你的 NodeID。但是还是有办法迫使比特币节点只与恶意节点建立连接的。</p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#x69;&#110;&#117;&#120;&#99;&#111;&#x64;&#101;&#50;&#110;&#x69;&#107;&#x69;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d;">&#x6c;&#x69;&#110;&#117;&#120;&#99;&#111;&#x64;&#101;&#50;&#110;&#x69;&#107;&#x69;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d;</a></p></li></ul><p>2020-04-12 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。&lt;/p&gt;
&lt;p&gt;本文就谈一下目前几种区块链网络攻击，以及其防御方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同系列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之51%攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之日蚀攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之女巫攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之其它网络攻击&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;日蚀攻击（Eclipse-Attack&quot;&gt;&lt;a href=&quot;#日蚀攻击（Eclipse-Attack&quot; class=&quot;headerlink&quot; title=&quot;日蚀攻击（Eclipse Attack)&quot;&gt;&lt;/a&gt;日蚀攻击（Eclipse Attack)&lt;/h1&gt;&lt;h2 id=&quot;P2P-网络&quot;&gt;&lt;a href=&quot;#P2P-网络&quot; class=&quot;headerlink&quot; title=&quot;P2P 网络&quot;&gt;&lt;/a&gt;P2P 网络&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;在介绍什么是日蚀攻击之前，有必要先对区块链系统的底层 P2P 网络做一个简单的介绍，因为日蚀攻击就是利用了 P2P 网络的特性来进行的攻击。&lt;/p&gt;
&lt;p&gt;P2P 即 Peer to Peer，中文意思是对等网络，它是分布式系统和计算机网络相结合的产物。对等的意思就是网络中的节点角色、地位是平等的，任何节点具有极强的自由，可以任意加入、离开网络。这跟传统的 C/S 模型的结构有很大区别，任何节点既是 client ，也是 server，或者说网络中没有 server 节点，任何节点 down 掉不会对整个网络产生致命的影响，具有极强的伸缩性。&lt;/p&gt;
&lt;p&gt;P2P 网络从诞生到现在经过了几个阶段，分别是混合式 P2P，无结构化 P2P以及结构化 P2P。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;混合式：顾名思义，P2P 网络混合了传统的 C/S 模型，网络中有角色充当 server 角色&lt;/li&gt;
&lt;li&gt;无结构化：也就是网状结构模型，纯分布式网络，典型代表就是比特币网络，节点之间以一种随机的，松散的方式组织在一起&lt;/li&gt;
&lt;li&gt;结构化：节点按照一定规则组织在一起，路由算法比较精准，比如 DHT 算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center&gt;混合式&lt;/center&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="http://www.rebootcat.com/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="http://www.rebootcat.com/tags/blockchain/"/>
    
      <category term="attack" scheme="http://www.rebootcat.com/tags/attack/"/>
    
      <category term="bitcoin" scheme="http://www.rebootcat.com/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之51&amp;#37攻击</title>
    <link href="http://www.rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/"/>
    <id>http://www.rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/</id>
    <published>2020-04-11T03:23:58.000Z</published>
    <updated>2020-04-22T14:52:46.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p><p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p><p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p><p>同系列：</p><ul><li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li><li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></li><li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li><li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a> </li><li><a href="http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之其它网络攻击</a></li></ul><h1 id="51-攻击"><a href="#51-攻击" class="headerlink" title="51%攻击"></a>51%攻击</h1><p>在了解什么是 51%攻击前，先简单科普下区块链的几个概念，这里主要以比特币为例作说明。</p><h2 id="什么是挖矿？"><a href="#什么是挖矿？" class="headerlink" title="什么是挖矿？"></a>什么是挖矿？</h2><p>其实挖矿这个词描述得有点太过于形象了，以至于弄得反而很生涩。当然区块链世界里还有很多玩概念的东西，背后道理其实反而没那么复杂。</p><p>在比特币网络里，大家共同在维护一张账目表，参与记账的节点可以称之为矿工，其中矿工需要做的事情就是拼命竞争记账的权利，这个竞争记账权的过程可以称之为挖矿，当一个节点得到这个记账权之后，可以描述为这个节点挖到矿了。那么节点为什么会拼命的竞争这个记账权呢？因为比特币会对挖到矿的节点有奖励。这个奖励是基于区块高度的，最开始是每个区块奖励 50btc，每产生 210000 个区块为一个减半间隔，减半间隔之后奖励会减半。比如目前（2020.04）区块奖励是 12.5btc。</p><p>上面这段话里面有两个点需要解释：</p><ol><li><strong>为什么节点要竞争这个记账权</strong>？</li><li><strong>区块高度又是什么</strong>？</li></ol><p>针对第一个问题，如果用比较白话的方式讲的话就是，在分布式去信任的系统中，由于有激励的存在，大家都想拿到这个记账权，但是这个记账权在同一时刻（这里用词不一定表示某一刻，更多的形容相对的同一时刻）只允许其中一个节点拿到，并且由这个节点对交易进行记录。这样才能保证这张账本是唯一的，大家看到的是一样的账本。不然大家都来记账的话，这张账本就乱了，这就是称之为 ”共识“ 的由来。</p><p>针对第二个问题，很好理解，区块高度或者说时钟高度，其实是用来描述一个区块的序号的，从创世区块 0 开始依次递增。不用过分纠结，本身是一个很简单的东西，或者叫区块序号更容易理解【手动滑稽】,可以看一下下图：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/1.png" alt=""></p><a id="more"></a><p>我们打开 <a href="https://btc.com/" target="_blank" rel="noopener">BTC.com</a>, 可以看到比特币网络的一些信息，比如区块高度，目前最新的已经到了 625408，区块奖励是 12.57869736btc。我们选择一个区块高度（比如 625400), 可以看到这个区块的信息：<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/2.png" alt=""></p><p>可以看到这个区块高度是 625400, 这个区块里有 243 笔交易，确认数是 9等。这里需要重点关注一下 <strong>确认数</strong> 这个概念，后面会用到这个概念。</p><h2 id="共识"><a href="#共识" class="headerlink" title="共识"></a>共识</h2><p>上面提到比特币网络里参与记账的节点竞争记账权的过程称为挖矿，那么除了上面抛出来的两个问题之外，还有一个问题没有解决。</p><p>那就是<strong>节点通过什么方式竞争，怎么竞争</strong>？</p><p>竞争的方式就称之为共识，描述分布式去中心化的系统中大家通过共识算法达成统一某个行为或是认知的这种行为，即大家达成了共识，本次由 A 节点进行记账，下次由 B 节点进行记账。</p><p>共识算法应该能保证大家能在一定时间内形成共识，同时兼具安全性以及公平性。这样的话参与记账的节点才能有机会获得奖励，才能鼓励大家参与这个网络。</p><p>对于比特币来说，采用的是 POW 作为共识算法，即 Proof Of Work（工作量证明）。工作量证明算法是一种应对拒绝服务攻击和其他服务滥用的经济对策。它要求发起者进行一定量的耗时适当的复杂运算，并且这个结果能够快速被其他节点进行验证。</p><p>比特币节点需要计算一个 hash，具体过程是对一个随机数加上交易数据做 hash，然后穷举这个随机数，使得 hash 之后的值能满足一定的条件，比如前缀是 ‘0000’。谁先计算出来，谁就在本次记账权的竞争中胜出，然后对交易打包，广播区块，获得区块奖励。显然这里的穷举需要耗费大量的算力，并且计算满足条件的  hash 值不是一件容易的事，基本上可以保证很难有在同一时刻（相对同一时刻）两个或者多个节点都找到了这个满足条件的 hash 值，这也就保证了共识的稳定性。</p><p>到这里基本上可以明白一个道理，<strong>谁拥有越多的算力，谁得到这个记账权的概率就越大，获得的奖励就会越多</strong>。</p><h2 id="最长链原则"><a href="#最长链原则" class="headerlink" title="最长链原则"></a>最长链原则</h2><p>区块链世界中有很多概念还是很不好理解的，慢慢来，比如这个最长链原则。</p><p>在分布式去中心化的系统中，由于网络传输的延迟或者网络故障等不可预知的一些因素，会导致大家收到的交易或者数据是不一致的。在几轮记账之后，势必会出现一些节点看到的区块链和其他节点看到的区块链不一致。</p><p>由于大家看到的区块链不一致，也就是有长有短的区块链。比特币规定任何矿工在看到更长的区块链的时候，应该立即停止短的区块链上的挖矿，大家共同围绕这最长的这条链进行挖矿。</p><p>如果不了解区块链原理的同学可能会一头雾水，是的，这里的概念还是比较难理解的。下面举一个例子作为说明：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/3.png" alt=""></p><p>上图可以看到在区块2 之后分叉了，变成了两条链，区块链网络中的一部分节点看到的链是上面这条区块链，另外一部分看到的是下面这条区块链。</p><p><strong>矿工在挖矿的时候，或者说节点在做记账权竞争的时候，需要计算 hash，这里会用到最后一个区块的信息，当挖到区块的时候，新产生的区块里会记录上一个区块的一些信息，这样就把整个区块就串起来了，形成一条链</strong>。</p><p>假设 A 节点看到的是上面一条链，并且基于这条链进行挖矿，在挖矿的过程中收到了下面一条链的区块7 的数据包，校验发现这个区块的高度相比自己的区块6’ 更高，也就是说收到了一条新的更长的区块链，那么诚实的矿工应该马上停止正在进行的基于区块6‘ 的挖矿，转而基于区块7 进行挖矿。一定时间之后上面这条链就废弃了，网络中没有任何节点会保存这条链的信息，大家看到的都是一条最长的区块链。</p><p>设想一下，如果 A 节点仍然基于区块6’ 进行挖矿，那么即便挖到了区块，收到的奖励最后也会无效。</p><p>这里可能会有人有疑惑，为什么要制定这个最长链原则？大家为什么又要遵守这个规则？从安全角度讲，最长链原则更安全，更难推翻重写；从其他角度讲，这个规则就是区块链世界里的公理，而公理就是指对一些基本的假定，比特币就是这么规定的，不用过分纠结。</p><p>细心的同学可能会注意到上面的一个问题，A 节点放弃自己的链，那么这条链从区块3‘ 开始到区块6’ 里面的数据是不是都无效了？里面的交易呢？</p><p><strong>答案是的，里面的交易都无效了，因为一个区块是对一堆交易的打包，而对于同一笔交易来说，转账发起方会把这笔交易广播给所有人，也就是对于一笔交易来说，每个矿工都可能会收到这条交易并且放到自己的交易池。那么针对作废的区块3‘ 到区块6’ 里面的交易，虽然在这条链上无效了，但是这些交易也会被其他节点看到，说不定已经被其他节点挖到区块并且记录到下面这条区块链里了</strong>。所以针对某笔交易来说，并没有丢失。</p><h2 id="何为51-攻击"><a href="#何为51-攻击" class="headerlink" title="何为51%攻击"></a>何为51%攻击</h2><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/4.png" alt=""><br>在通过上述文章的讲解之后，明白了 ”挖矿“ 的概念，”共识“ 的概念以及 ”最长链原则“ 的概念。接下来可以正式开始介绍 51% 攻击了。</p><p>51% 攻击是指如果攻击者拥有全网 51% 的算力，那么他就能够利用算力优势搞一些动作。<strong>这里的 51% 是一个概称，实际上运气好的话可能不需要这么多的算力就能发动 51%攻击，比如 45%算力就有成功的可能性</strong>。</p><p>那么我们来探讨下攻击者会利用 51%攻击做什么事？</p><h3 id="双花攻击或者做空比特币"><a href="#双花攻击或者做空比特币" class="headerlink" title="双花攻击或者做空比特币"></a>双花攻击或者做空比特币</h3><p>攻击者拥有全网超过 51% 算力之后，首先是成功挖矿的概率增大了，由于成功挖矿的概率增大，那么攻击者就能够对挖到的区块进行修改。假设攻击者是理性的，为了利益考虑，那么他会修改区块中关于自己的交易记录，以便双重支付，区块中其他的交易，由于没有发起者的签名，攻击者是不能够去修改的，也就是说攻击者没法做到把别人的币转给自己。</p><p>具体做法就是把自己的币转到交易所，卖出后出金提现，然后利用 51% 攻击去修改这笔交易，转到自己的另外一个钱包地址中，由于有算力优势，并且遵循最长链原则，那么之前转到交易所的交易记录被认为是无效的，区块链中记录的是后面这笔交易。也就是同一笔钱花了两次，最终损失的是交易所。这里不一定是交易所，也可能是其他人或者商家等。</p><p>但是双花是有可能被检测出来的，还记得上文提到的 “<strong>确认数</strong>” 吗？那么确认数是什么？</p><p>区块链是由一个个区块形象的连接在一起，形成链状。当其中某笔交易发生的时候，会被打包到区块中，然后形成区块链，每追加一个区块，确认数加 1。计算方法很简单，<strong>用当前最长链的最新区块高度减去某笔交易所在的区块高度即为确认数</strong>。这里需要注意的由于有分叉的可能（参考上面的两条不同长度的链），这笔交易在不同的链里面高度是不一样的，所以正确获得某笔交易所在的区块高度是通过交易哈希去获取的。</p><p>比如下图：<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/55.png" alt=""></p><p>同样是区块高度为 625400 的区块，经过编写博文这么一段时间来，确认数从 9 变成了 25，说明 625400 这个区块之后新增加了 14 个区块。</p><p>节点会对区块进行校验的，对于双花攻击，节点是有可能在 6 个确认周期内发现一笔交易被双重支付了，从而对交易发起者进行一些惩罚。所以为了预防双花，一般可以增加确认数，对比比特币来说， 6 个确认周期是比较合适的。</p><p>那么此次成本和收益怎么样呢？成本就是你需要掌握全网 51% 以上的算力，这个本身就是一个很大的成本；收益就是一笔钱被花费了两次，那么这笔钱有多少就很关键了，如果少的话攻击者肯定是犯糊涂了才会发起这个 51% 攻击，如果这笔钱很大呢？在对交易进行验证的过程肯定也会更加严格，包括在交易所出金提现也是会重重验证，想要快速的脱身恐怕很难。</p><p>所以发起 51%攻击不可能是因为一次双花攻击。那么做空比特币呢？</p><p>比特币遭到 51%攻击之后势必会导致比特币乃至整个加密货币市场的市值损失，然后攻击者通过比特币期货做空比特币获益。这里其实还是跟获益的大小有关系，如果获益比较小，收益都赶不上发起攻击的成本；如果获益很大，则在实际操作套现过程中会变得很困难，至少是不顺利，风险很大。</p><p>上面的讨论基于一个假设是攻击者控制了全网 51% 的算力只持续了一段时间，攻击者的目的也只是想要发起双重支付攻击或者做空比特币，并且快速套现脱身，那么如果攻击者控制了全网 51% 以上的算力持续了很长一段时间呢？</p><h3 id="摧毁比特币系统"><a href="#摧毁比特币系统" class="headerlink" title="摧毁比特币系统"></a>摧毁比特币系统</h3><p>先说我个人的看法，<strong>对比特币发起 51%攻击，比特币系统不会崩溃，而且还能恢复，但比特币市值就不好说了，甚至整个加密货币的市值很可能损失 0 ~ 90% 以上</strong>。<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/6.png" alt=""></p><p>如果攻击者拥有超过 51% 以上的算力，实际攻击的时候肯定不止 51%，比如达到了70% ~ 90%，并且攻击者控制持续了一段比较长的时间，那么攻击者能够反复进行双花攻击。实际过程可能是这样的：</p><p>首先攻击者需要在攻击发起之前买到一定量的比特币，或者说拥有一定量的比特币，那么出售这些比特币，然后利用算力优势发起双花攻击，抹掉出售自己比特币的这些交易记录，相当于自己的比特币与出售之前没什么变化，再次出售这些比特币，然后重复这个过程。</p><p>在这个过程中，势必会引起市场的警觉，导致比特币价格一路下跌，只要比特币价格没有跌倒 0，说明有人还愿意收比特币，那么这个攻击就可以持续。直至比特币归零或者其他防御解决方案比如硬分叉重新恢复了比特币网络。这个时候的加密货币市场，肯定是一片哀鸿。</p><p>但是从技术层面来讲，即便比特币归零了，比特币网络依然还能够通过诚实的矿工加入，利用全球闲置的大量算力，重新恢复比特币网络。至于比特币价格，这个不做讨论。也就是说 51%攻击能阻断或者影响比特币系统一段时间，但是攻击停止之后还是能够恢复的。这里就不得不提 POW 这个共识的优点了。</p><p><strong>本来 POW 是消耗了大量的电力来做算力竞速的，但是在比特币系统接近崩溃的时候，只要有算力的加入，整个区块链网络就能恢复起来</strong>。</p><p>然而，如果是<strong>使用了 POS 的区块链系统，如果发生类似的 51% 攻击，由于共识算法是以 Stake 作为依据的，那么新节点加入并不能带来任何起色，整个网络基本上不可能恢复了</strong>。但是这里有个悖论就是拥有 51% 以上 Stake 的攻击者为什么要发起这个攻击？导致自己的币不值钱？真的是人傻钱多，不在乎钱，就想干死这个区块链系统？【黑人问号脸】</p><h2 id="51-攻击悖论"><a href="#51-攻击悖论" class="headerlink" title="51%攻击悖论"></a>51%攻击悖论</h2><p>其实上面有提到过，发起 51%攻击的成本很高，尤其是想持续一段时间的攻击。那么收益的大小就很关键，但是无论怎么算，收益本身并不高并且风险巨大。</p><p>相比拥有 51% 算力诚实的参与比特币挖矿得到的奖励来说，可能都达不到。而且真实场景下，想要发起 51%攻击，门槛很高，并且不可能做到无人察觉。</p><p>所以这也就是为什么 <strong>51%攻击基本上不可能</strong>的原因。但是，，，<strong>结合其他的攻击手段，可以降低 51%攻击的算力门槛</strong>，比如日蚀攻击，这个在下一篇博文中 <a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a> 会做介绍。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>关于 51%攻击，大家基本上只需要了解就行了，对于区块链系统来说，基本上不用担心这种攻击，因为有悖论的存在。真正需要关心的是门槛较低，风险较低，收益较高的攻击。</p><p>另外，使用 POW 的缺点是很明显的，但是在安全方面又有着很独特的作用，不得不佩服中本聪对比特币系统的设计！！！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://privacycanada.net/cryptocurrency/51-attack/" target="_blank" rel="noopener">51% Attack</a></p><p><a href="https://mp.weixin.qq.com/s/u0BaKzalYTw8o4vXqBuA_g" target="_blank" rel="noopener">51%攻击解析</a></p><p><a href="https://www.chainnode.com/tutorial/1949" target="_blank" rel="noopener">什么是比特币51%攻击？</a></p><p><a href="https://www.zhihu.com/question/21970544" target="_blank" rel="noopener">是否仅需一次51%攻击，比特币体系即会崩溃？</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#105;&#x6e;&#x75;&#120;&#99;&#x6f;&#100;&#x65;&#x32;&#110;&#105;&#x6b;&#105;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;">&#108;&#105;&#x6e;&#x75;&#120;&#99;&#x6f;&#100;&#x65;&#x32;&#110;&#105;&#x6b;&#105;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a></p></li></ul><p>2020-04-11 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。&lt;/p&gt;
&lt;p&gt;本文就谈一下目前几种区块链网络攻击，以及其防御方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同系列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之51%攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之日蚀攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之女巫攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈几种区块链网络攻击以及防御方案之其它网络攻击&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;51-攻击&quot;&gt;&lt;a href=&quot;#51-攻击&quot; class=&quot;headerlink&quot; title=&quot;51%攻击&quot;&gt;&lt;/a&gt;51%攻击&lt;/h1&gt;&lt;p&gt;在了解什么是 51%攻击前，先简单科普下区块链的几个概念，这里主要以比特币为例作说明。&lt;/p&gt;
&lt;h2 id=&quot;什么是挖矿？&quot;&gt;&lt;a href=&quot;#什么是挖矿？&quot; class=&quot;headerlink&quot; title=&quot;什么是挖矿？&quot;&gt;&lt;/a&gt;什么是挖矿？&lt;/h2&gt;&lt;p&gt;其实挖矿这个词描述得有点太过于形象了，以至于弄得反而很生涩。当然区块链世界里还有很多玩概念的东西，背后道理其实反而没那么复杂。&lt;/p&gt;
&lt;p&gt;在比特币网络里，大家共同在维护一张账目表，参与记账的节点可以称之为矿工，其中矿工需要做的事情就是拼命竞争记账的权利，这个竞争记账权的过程可以称之为挖矿，当一个节点得到这个记账权之后，可以描述为这个节点挖到矿了。那么节点为什么会拼命的竞争这个记账权呢？因为比特币会对挖到矿的节点有奖励。这个奖励是基于区块高度的，最开始是每个区块奖励 50btc，每产生 210000 个区块为一个减半间隔，减半间隔之后奖励会减半。比如目前（2020.04）区块奖励是 12.5btc。&lt;/p&gt;
&lt;p&gt;上面这段话里面有两个点需要解释：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;为什么节点要竞争这个记账权&lt;/strong&gt;？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;区块高度又是什么&lt;/strong&gt;？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;针对第一个问题，如果用比较白话的方式讲的话就是，在分布式去信任的系统中，由于有激励的存在，大家都想拿到这个记账权，但是这个记账权在同一时刻（这里用词不一定表示某一刻，更多的形容相对的同一时刻）只允许其中一个节点拿到，并且由这个节点对交易进行记录。这样才能保证这张账本是唯一的，大家看到的是一样的账本。不然大家都来记账的话，这张账本就乱了，这就是称之为 ”共识“ 的由来。&lt;/p&gt;
&lt;p&gt;针对第二个问题，很好理解，区块高度或者说时钟高度，其实是用来描述一个区块的序号的，从创世区块 0 开始依次递增。不用过分纠结，本身是一个很简单的东西，或者叫区块序号更容易理解【手动滑稽】,可以看一下下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="http://www.rebootcat.com/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="http://www.rebootcat.com/tags/blockchain/"/>
    
      <category term="attack" scheme="http://www.rebootcat.com/tags/attack/"/>
    
      <category term="bitcoin" scheme="http://www.rebootcat.com/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>python采集bandwidth信息</title>
    <link href="http://www.rebootcat.com/2018/05/21/analyze_bandwidth/"/>
    <id>http://www.rebootcat.com/2018/05/21/analyze_bandwidth/</id>
    <published>2018-05-21T03:23:58.000Z</published>
    <updated>2020-08-24T15:20:59.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python脚本采集bandwidth"><a href="#python脚本采集bandwidth" class="headerlink" title="python脚本采集bandwidth"></a>python脚本采集bandwidth</h1><p>经常要做一些 linux 系统上的性能分析或者采集 cpu/mem/bandwidth 上报到监控系统。</p><p>分享一个我平常常用到的 bandwidth 采集脚本，原理是分析 /proc/net/dev 文件， 脚本如下：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#脚本探测网卡流入带宽,循环输出</span></span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">import pdb</span><br><span class="line"></span><br><span class="line">filename = './bandwidth.log'</span><br><span class="line"></span><br><span class="line">'''</span><br><span class="line">[root@~]$ cat /proc/net/dev</span><br><span class="line">Inter-|   Receive                                                |  Transmit</span><br><span class="line"> face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed</span><br><span class="line">    lo:<span class="number"> 1144779885672 </span>14057281982   <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>        <span class="number"> 0 </span>       <span class="number"> 0 </span>1144779885672<span class="number"> 14057281982 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>     <span class="number"> 0 </span>         0</span><br><span class="line">  eth0:      <span class="number"> 0 </span>     <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>        <span class="number"> 0 </span>       <span class="number"> 0 </span>      <span class="number"> 0 </span>     <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>     <span class="number"> 0 </span>         0</span><br><span class="line">  eth1:      <span class="number"> 0 </span>     <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>        <span class="number"> 0 </span>       <span class="number"> 0 </span>      <span class="number"> 0 </span>     <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>     <span class="number"> 0 </span>         0</span><br><span class="line">  eth2:<span class="number"> 26686495240 </span>203608963   <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>        <span class="number"> 0 </span>       <span class="number"> 1 </span>78529414436<span class="number"> 193724479 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>     <span class="number"> 0 </span>         0</span><br><span class="line">  eth3:<span class="number"> 10038847365 </span>82467612   <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>        <span class="number"> 0 </span>       <span class="number"> 0 </span>26209215795<span class="number"> 64571217 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>     <span class="number"> 0 </span>         0</span><br><span class="line"> bond0:<span class="number"> 36725342605 </span>286076575   <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>        <span class="number"> 0 </span>       <span class="number"> 1 </span>104738630231<span class="number"> 258295696 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>     <span class="number"> 0 </span>         0</span><br><span class="line">'''</span><br><span class="line"></span><br><span class="line">def get_rx(interface = 'eth0'):</span><br><span class="line">  rsbytes = []</span><br><span class="line">  cmd = 'cat /proc/net/dev'</span><br><span class="line">  r = os.popen(cmd).readlines()</span><br><span class="line">  if len(r) &lt; 4:</span><br><span class="line">    print "error: can't find eth interface"</span><br><span class="line">    return rsbytes</span><br><span class="line">  interface_dict = &#123;&#125;</span><br><span class="line">  for i in xrange(2,len(r),1): <span class="comment">#从 lo 开始</span></span><br><span class="line">    interface_name = r[i].split()[0].split(':')[0]</span><br><span class="line">    interface_dict[interface_name] = i</span><br><span class="line"></span><br><span class="line">  if interface in interface_dict:</span><br><span class="line">    position = interface_dict.get(interface)</span><br><span class="line">    recvbytes = r[position].split()[1]</span><br><span class="line">    sendbytes = r[position].split()[9]</span><br><span class="line">    rsbytes.append(int(recvbytes))</span><br><span class="line">    rsbytes.append(int(sendbytes))</span><br><span class="line"></span><br><span class="line">  return rsbytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def iftop_interface(interface = 'eth0'):</span><br><span class="line">  begin = int(time.time())</span><br><span class="line">  beginrs = get_rx(interface)</span><br><span class="line">  if not beginrs:</span><br><span class="line">    print 'error: can not find interface %s' % interface</span><br><span class="line">    return</span><br><span class="line">  while True:</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    endrs = get_rx(interface)</span><br><span class="line">    end = int(time.time())</span><br><span class="line">    rxrate = float((endrs[0] - beginrs[0])) / (end - begin)  * 8</span><br><span class="line">    sxrate = float((endrs[1] - beginrs[1])) / (end - begin)  * 8</span><br><span class="line">    tl = time.localtime(end)</span><br><span class="line">    date = time.strftime('%m-%d %H:%M:%S', tl)</span><br><span class="line">    cout = "%s  [recv(rate) = %s Mbps] [send(rate) = %s Mbps] \n" % (date,rxrate / 1000000,sxrate / 1000000)</span><br><span class="line"></span><br><span class="line">    fout = open(filename,'a')</span><br><span class="line">    fout.write(cout)</span><br><span class="line">    fout.close()</span><br><span class="line"></span><br><span class="line">    print cout</span><br><span class="line"></span><br><span class="line">    <span class="comment">#重新赋值，进入再次循环</span></span><br><span class="line">    begin,beginrs = end,endrs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">  iftop_interface('ens33')</span><br></pre></td></tr></table></figure><p>默认的网卡名字是 <strong>eth0</strong>，有些机器可能会不一样，只需要修改成你自己机器的网卡名称就行。</p><p>脚本可以直接在 <a href="https://github.com/smaugx/dailytools/blob/master/netif.py" target="_blank" rel="noopener">我的github</a> 进行下载。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>欢迎关注下我的其他脚本，平常可能会用到的一些脚本，整理了一下。</p><p><a href="https://github.com/smaugx/dailytools" target="_blank" rel="noopener">https://github.com/smaugx/dailytools</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#x69;&#110;&#117;&#120;&#99;&#x6f;&#x64;&#101;&#50;&#110;&#105;&#x6b;&#105;&#x40;&#103;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#108;&#x69;&#110;&#117;&#120;&#99;&#x6f;&#x64;&#101;&#50;&#110;&#105;&#x6b;&#105;&#x40;&#103;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></p></li></ul><p>2018-05-21 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python脚本采集bandwidth&quot;&gt;&lt;a href=&quot;#python脚本采集bandwidth&quot; class=&quot;headerlink&quot; title=&quot;python脚本采集bandwidth&quot;&gt;&lt;/a&gt;python脚本采集bandwidth&lt;/h1&gt;&lt;p&gt;经常
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.rebootcat.com/categories/linux/"/>
    
      <category term="python" scheme="http://www.rebootcat.com/categories/linux/python/"/>
    
    
      <category term="python" scheme="http://www.rebootcat.com/tags/python/"/>
    
      <category term="bandwidth" scheme="http://www.rebootcat.com/tags/bandwidth/"/>
    
      <category term="net" scheme="http://www.rebootcat.com/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>python采集cpu信息</title>
    <link href="http://www.rebootcat.com/2018/05/20/analyze_cpu/"/>
    <id>http://www.rebootcat.com/2018/05/20/analyze_cpu/</id>
    <published>2018-05-20T03:23:58.000Z</published>
    <updated>2020-08-24T15:21:18.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python脚本采集cpu"><a href="#python脚本采集cpu" class="headerlink" title="python脚本采集cpu"></a>python脚本采集cpu</h1><p>经常要做一些 linux 系统上的性能分析或者采集 cpu/mem/bandwidth 上报到监控系统。</p><p>分享一个我平常常用到的 cpu 采集脚本，原理是分析 /proc/stat 文件， 脚本如下：</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">class <span class="type">CpuWatch</span>(<span class="keyword">object</span>):</span><br><span class="line">    def __init__(self, time_step):</span><br><span class="line">        self.cpufile_ = '/<span class="keyword">proc</span>/stat'</span><br><span class="line">        self.watch_time_step_ = time_step  <span class="comment"># 60 s</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 采集cpu信息</span></span><br><span class="line">    def read_cpu(self):</span><br><span class="line">        cpu_info = &#123;&#125;</span><br><span class="line">        cpufile = self.cpufile_</span><br><span class="line">        <span class="keyword">with</span> open(cpufile, 'r') <span class="keyword">as</span> fin:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> fin:</span><br><span class="line">                line_fields = line.split()</span><br><span class="line">                <span class="keyword">if</span> line_fields[<span class="number">0</span>] != <span class="string">"cpu"</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                total = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> field <span class="keyword">in</span> line_fields:</span><br><span class="line">                    <span class="keyword">if</span> field == <span class="string">"cpu"</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    total += <span class="built_in">int</span>(field)</span><br><span class="line"></span><br><span class="line">                cpu_info = &#123;</span><br><span class="line">                    <span class="string">"User"</span>: <span class="built_in">int</span>(line_fields[<span class="number">1</span>]),</span><br><span class="line">                    <span class="string">"Sys"</span>: <span class="built_in">int</span>(line_fields[<span class="number">3</span>]),</span><br><span class="line">                    <span class="string">"Idle"</span>: <span class="built_in">int</span>(line_fields[<span class="number">4</span>]),</span><br><span class="line">                    <span class="string">"Steal"</span>: <span class="built_in">int</span>(line_fields[<span class="number">8</span>]),</span><br><span class="line">                    <span class="string">"Wait"</span>: <span class="built_in">int</span>(line_fields[<span class="number">5</span>]),</span><br><span class="line">                    <span class="string">"Total"</span>: total</span><br><span class="line">                &#125;</span><br><span class="line">            fin.close()</span><br><span class="line">        <span class="keyword">return</span> cpu_info</span><br><span class="line"></span><br><span class="line">    def get_avg_cpu(self, cpu_info_old, cpu_info):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cpu_info_old <span class="keyword">or</span> <span class="keyword">not</span> cpu_info:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">None</span></span><br><span class="line"></span><br><span class="line">        <span class="literal">result</span> = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">set</span>(cpu_info.keys()) != <span class="built_in">set</span>(cpu_info_old.keys()):</span><br><span class="line">            <span class="keyword">return</span> <span class="type">None</span></span><br><span class="line"></span><br><span class="line">        delta_total = cpu_info[<span class="string">"Total"</span>]  -   cpu_info_old[<span class="string">"Total"</span>]</span><br><span class="line">        delta_user  = cpu_info[<span class="string">"User"</span>]   -   cpu_info_old[<span class="string">"User"</span>]</span><br><span class="line">        delta_sys   = cpu_info[<span class="string">"Sys"</span>]    -   cpu_info_old[<span class="string">"Sys"</span>]</span><br><span class="line">        delta_idle  = cpu_info[<span class="string">"Idle"</span>]   -   cpu_info_old[<span class="string">"Idle"</span>]</span><br><span class="line">        delta_wait  = cpu_info[<span class="string">"Wait"</span>]   -   cpu_info_old[<span class="string">"Wait"</span>]</span><br><span class="line">        delta_steal = cpu_info[<span class="string">"Steal"</span>]  -   cpu_info_old[<span class="string">"Steal"</span>]</span><br><span class="line"></span><br><span class="line">        last_cpu_info = cpu_info</span><br><span class="line">        <span class="literal">result</span> = &#123;</span><br><span class="line">            <span class="string">"cpu_user"</span>: <span class="built_in">int</span>(<span class="built_in">float</span>(delta_user)/<span class="built_in">float</span>(delta_total) * <span class="number">100</span>),</span><br><span class="line">            <span class="string">"cpu_sys"</span>: <span class="built_in">int</span>(<span class="built_in">float</span>(delta_sys)/<span class="built_in">float</span>(delta_total) * <span class="number">100</span>),</span><br><span class="line">            <span class="string">"cpu_wait"</span>: <span class="built_in">int</span>(<span class="built_in">float</span>(delta_wait)/<span class="built_in">float</span>(delta_total) * <span class="number">100</span>),</span><br><span class="line">            <span class="string">"cpu_steal"</span>: <span class="built_in">int</span>(<span class="built_in">float</span>(delta_steal)/<span class="built_in">float</span>(delta_total) * <span class="number">100</span>),</span><br><span class="line">            <span class="string">"cpu_idle"</span>: <span class="built_in">int</span>(<span class="built_in">float</span>(delta_idle)/<span class="built_in">float</span>(delta_total) * <span class="number">100</span>),</span><br><span class="line">            <span class="string">"cpu_util"</span>: <span class="built_in">int</span>(<span class="built_in">float</span>(delta_total - delta_idle - delta_wait - delta_steal)/<span class="built_in">float</span>(delta_total) * <span class="number">100</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        print(<span class="literal">result</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">result</span></span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        cpu_info_old = &#123;&#125;</span><br><span class="line">        <span class="keyword">while</span> <span class="type">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cpu_info_old:</span><br><span class="line">                cpu_info_old = self.read_cpu()</span><br><span class="line">            time.sleep(self.watch_time_step_)</span><br><span class="line">            cpu_info = self.read_cpu()</span><br><span class="line"></span><br><span class="line">            <span class="literal">result</span> = self.get_avg_cpu(cpu_info_old, cpu_info)</span><br><span class="line">            cpu_info_old = copy.deepcopy(cpu_info)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == '__main__':</span><br><span class="line">    cpu_watcher = <span class="type">CpuWatch</span>(time_step = <span class="number">5</span>)</span><br><span class="line">    cpu_watcher.run()</span><br></pre></td></tr></table></figure><p>脚本可以直接在 <a href="https://github.com/smaugx/dailytools/blob/master/cpu.py" target="_blank" rel="noopener">我的github</a> 进行下载。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>欢迎关注下我的其他脚本，平常可能会用到的一些脚本，整理了一下。</p><p><a href="https://github.com/smaugx/dailytools" target="_blank" rel="noopener">https://github.com/smaugx/dailytools</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#x69;&#x6e;&#x75;&#x78;&#99;&#111;&#x64;&#x65;&#x32;&#110;&#105;&#x6b;&#x69;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;">&#x6c;&#x69;&#x6e;&#x75;&#x78;&#99;&#111;&#x64;&#x65;&#x32;&#110;&#105;&#x6b;&#x69;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;</a></p></li></ul><p>2018-05-20 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python脚本采集cpu&quot;&gt;&lt;a href=&quot;#python脚本采集cpu&quot; class=&quot;headerlink&quot; title=&quot;python脚本采集cpu&quot;&gt;&lt;/a&gt;python脚本采集cpu&lt;/h1&gt;&lt;p&gt;经常要做一些 linux 系统上的性能分析或者采集 
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.rebootcat.com/categories/linux/"/>
    
      <category term="python" scheme="http://www.rebootcat.com/categories/linux/python/"/>
    
    
      <category term="python" scheme="http://www.rebootcat.com/tags/python/"/>
    
      <category term="cpu" scheme="http://www.rebootcat.com/tags/cpu/"/>
    
  </entry>
  
  <entry>
    <title>一键安装python3环境</title>
    <link href="http://www.rebootcat.com/2018/04/15/python3_in_a_box/"/>
    <id>http://www.rebootcat.com/2018/04/15/python3_in_a_box/</id>
    <published>2018-04-15T03:23:58.000Z</published>
    <updated>2020-08-24T15:05:11.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一键安装python3环境"><a href="#一键安装python3环境" class="headerlink" title="一键安装python3环境"></a>一键安装python3环境</h1><p>由于现在逐步转移到 python3 进行开发，但是很多机器并没有预装 python3 环境，所以需要安装。</p><p>所以分享一个我常用的，一键安装 python3.7 的脚本：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line">which <span class="keyword">python3</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq <span class="number">1</span> ]</span><br><span class="line">then</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"no python3 found, will try to install python3"</span></span><br><span class="line">    yum -<span class="keyword">y</span> install wget &amp;&amp;</span><br><span class="line">    yum -<span class="keyword">y</span> groupinstall <span class="string">"Development tools"</span> &amp;&amp;</span><br><span class="line">    yum -<span class="keyword">y</span> install zlib-devel libffi-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel &amp;&amp;</span><br><span class="line">    wget http<span class="variable">s:</span>//www.<span class="keyword">python</span>.org/ftp/<span class="keyword">python</span>/<span class="number">3.7</span>.<span class="number">2</span>/Python-<span class="number">3.7</span>.<span class="number">2</span>.tar.xz &amp;&amp;</span><br><span class="line">    <span class="built_in">mkdir</span>  /<span class="keyword">opt</span>/<span class="keyword">python3</span> &amp;&amp;</span><br><span class="line">    tar -xvJf  Python-<span class="number">3.7</span>.<span class="number">2</span>.tar.xz &amp;&amp;</span><br><span class="line">    <span class="keyword">cd</span> Python-<span class="number">3.7</span>.<span class="number">2</span> &amp;&amp;</span><br><span class="line">    ./configure --prefix=/<span class="keyword">opt</span>/<span class="keyword">python3</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">make</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">make</span> install</span><br><span class="line">    <span class="keyword">cd</span> -</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ln</span> -s /<span class="keyword">opt</span>/<span class="keyword">python3</span>/bin/<span class="keyword">python3</span> /usr/bin/python37</span><br><span class="line">    <span class="keyword">ln</span> -s /<span class="keyword">opt</span>/<span class="keyword">python3</span>/bin/pip3 /usr/bin/pip3</span><br><span class="line">    yum -<span class="keyword">y</span> install epel-release &amp;&amp;</span><br><span class="line">    yum -<span class="keyword">y</span> install <span class="keyword">python</span>-pip</span><br><span class="line">    <span class="keyword">ln</span> -s /usr/bin/python37 /usr/bin/<span class="keyword">python3</span></span><br><span class="line"></span><br><span class="line">    yum  install -<span class="keyword">y</span> <span class="keyword">python</span>-virtualenv.noarch</span><br><span class="line"></span><br><span class="line">    rm -rf Python-<span class="number">3.7</span>.<span class="number">2</span>*</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'check python3 ################################## Yes'</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>脚本会探测环境是否已经安装了 python3，如果没有安装则进行安装。</p><p>同时也把 virtualenv 工具安装了。</p><p>脚本可以直接在 <a href="https://github.com/smaugx/dailytools/blob/master/python3_in_a_box.sh" target="_blank" rel="noopener">我的github</a> 进行下载。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>欢迎关注下我的其他脚本，平常可能会用到的一些脚本，整理了一下。</p><p><a href="https://github.com/smaugx/dailytools" target="_blank" rel="noopener">https://github.com/smaugx/dailytools</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#105;&#110;&#117;&#x78;&#x63;&#111;&#x64;&#x65;&#x32;&#110;&#105;&#107;&#x69;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#108;&#105;&#110;&#117;&#x78;&#x63;&#111;&#x64;&#x65;&#x32;&#110;&#105;&#107;&#x69;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></p></li></ul><p>2018-04-15 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一键安装python3环境&quot;&gt;&lt;a href=&quot;#一键安装python3环境&quot; class=&quot;headerlink&quot; title=&quot;一键安装python3环境&quot;&gt;&lt;/a&gt;一键安装python3环境&lt;/h1&gt;&lt;p&gt;由于现在逐步转移到 python3 进行开发，但是很
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.rebootcat.com/categories/linux/"/>
    
      <category term="python" scheme="http://www.rebootcat.com/categories/linux/python/"/>
    
    
      <category term="python" scheme="http://www.rebootcat.com/tags/python/"/>
    
      <category term="python3" scheme="http://www.rebootcat.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>破解微信 DB, 导出 Mac 微信聊天记录</title>
    <link href="http://www.rebootcat.com/2018/03/05/export_mac_wechat/"/>
    <id>http://www.rebootcat.com/2018/03/05/export_mac_wechat/</id>
    <published>2018-03-05T03:23:58.000Z</published>
    <updated>2020-04-18T16:29:28.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前头的话"><a href="#前头的话" class="headerlink" title="前头的话"></a>前头的话</h1><p>最近由于手机内存告急，打算对手机进行一下瘦身。其中手机微信占用了将近 5G，这个简直太可怕了，于是打算把微信聊天记录备份到电脑上。本来备份就备份了，也没啥好说的，不过突发奇想想知道 Mac Wechat 把聊天记录备份到哪了？或者说平常聊天的数据放在哪里了？能不能把这些聊天记录导出成 txt 文件呢？</p><p>于是就有了这篇文章。</p><h1 id="导出微信聊天记录为txt"><a href="#导出微信聊天记录为txt" class="headerlink" title="导出微信聊天记录为txt"></a>导出微信聊天记录为txt</h1><p>导出微信聊天记录最简单的一种方式应该是使用 itunes 对 iphone 进行<strong>不加密备份</strong>，然后找到备份文件里面的数据，据说聊天记录是以明文的方式存在 DB 中的。这种方法我没去试过，这里主要讲一下通过<strong>破解微信 DB，读取到聊天记录，然后导出聊天记录</strong>。</p><h2 id="微信数据目录"><a href="#微信数据目录" class="headerlink" title="微信数据目录"></a>微信数据目录</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 替换其中的 smaug 为你自己的用户名</span><br><span class="line">cd /Users/smaug/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/<span class="number">2.0b4</span><span class="number">.0</span><span class="number">.9</span></span><br><span class="line"></span><br><span class="line">find ./ -name <span class="string">"*.db"</span></span><br></pre></td></tr></table></figure><p>以上目录就是微信数据存储的目录，可以看到有很多 db 文件：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/ChatSync/ChatSync.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_1.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_5.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_4.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_0.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/fts/ftsmessage.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_7.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_3.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_2.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_6.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_9.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_8.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Sync/openim_oplog.db</span></span><br></pre></td></tr></table></figure><p>其中类似于 msg_0.db、 msg_1.db 的就是聊天记录的数据文件，只不过是加过密的数据库，没法直接看。不过好在有各路大神，可以参考文末的参考链接。</p><h2 id="破解步骤"><a href="#破解步骤" class="headerlink" title="破解步骤"></a>破解步骤</h2><p>1.打开 Mac Wechat，但是不要登录</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/export_mac_wechat/1.png" alt=""></p><p>2.打开终端，输入命令</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lldb -p <span class="constructor">$(<span class="params">pgrep</span> WeChat)</span></span><br></pre></td></tr></table></figure><p>lldb 是在 mac 上的一个调试工具，上面的意思是使用 lldb attach 到 WeChat 这个进程上，进行调试，回车之后进入 lldb 调试界面</p><p>3.在 lldb 调试界面输入命令</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">br <span class="keyword">set</span> -n <span class="comment">sqlite3_key</span></span><br></pre></td></tr></table></figure><p>然后回车。</p><p><strong>这时调试屏幕上可能会出现一些 error，可以暂时忽略，不用管</strong>。</p><p>4.输入 c  回车</p><p>5.然后正常登录 Mac Wechat，点击登录，手机上点击允许（或者是扫码登录），不用关心此时 Mac Wechat 是否被卡住</p><p>6.接着输入命令</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">memory</span> <span class="keyword">read</span> --size 1 --<span class="keyword">format</span> x --<span class="keyword">count</span> 32 <span class="variable">$rsi</span></span><br></pre></td></tr></table></figure><p>回车。</p><p>读取内存中 寄存器 rsi 存储的值。大致回输出如下的字样：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/export_mac_wechat/2.png" alt=""></p><p>其中下面的这段是我们关心的：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x604004c346a0</span>: <span class="number">0xad</span> <span class="number">0x5c</span> <span class="number">0xff</span> <span class="number">0x0a</span> <span class="number">0x85</span> <span class="number">0xce</span> <span class="number">0x4a</span> <span class="number">0x5e</span></span><br><span class="line"><span class="number">0x604004c346a8</span>: <span class="number">0x9f</span> <span class="number">0x7f</span> <span class="number">0x8a</span> <span class="number">0xd3</span> <span class="number">0xa6</span> <span class="number">0xc6</span> <span class="number">0x02</span> <span class="number">0xf3</span></span><br><span class="line"><span class="number">0x604004c346b0</span>: <span class="number">0x25</span> <span class="number">0x02</span> <span class="number">0xb1</span> <span class="number">0x48</span> <span class="number">0x4c</span> <span class="number">0x76</span> <span class="number">0x4c</span> <span class="number">0x84</span></span><br><span class="line"><span class="number">0x604004c346b8</span>: <span class="number">0x82</span> <span class="number">0x38</span> <span class="number">0xc3</span> <span class="number">0x17</span> <span class="number">0x4d</span> <span class="number">0x27</span> <span class="number">0x14</span> <span class="number">0x33</span></span><br></pre></td></tr></table></figure><p>把前面 0x604004c346b0： 去掉，同时删除后面所有的 0x 和空格，拼接成一个字符串为 (总共 64 个字符）：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ad<span class="number">5</span>cff<span class="number">0</span>a<span class="number">85</span>ce<span class="number">4</span>a<span class="number">5e9</span>f<span class="number">7</span>f<span class="number">8</span>ad<span class="number">3</span>a<span class="number">6</span><span class="keyword">c</span><span class="number">602</span>f<span class="number">32502</span>b<span class="number">1484</span><span class="keyword">c</span><span class="number">764</span><span class="keyword">c</span><span class="number">848238</span><span class="keyword">c</span><span class="number">3174</span>d<span class="number">271433</span></span><br></pre></td></tr></table></figure><p>前面加上 0x 就是我们用来破解 DB 的 key:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xad5cff0a85ce4a5e9f7f8ad3a6c602f32502b1484c764c848238c3174d271433</span></span><br></pre></td></tr></table></figure><p>到这里基本上就相当于拿到了微信数据库的 key 了，接下来就是用这个 key 打开 DB 文件了。</p><p>TODO(smaug)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前头的话&quot;&gt;&lt;a href=&quot;#前头的话&quot; class=&quot;headerlink&quot; title=&quot;前头的话&quot;&gt;&lt;/a&gt;前头的话&lt;/h1&gt;&lt;p&gt;最近由于手机内存告急，打算对手机进行一下瘦身。其中手机微信占用了将近 5G，这个简直太可怕了，于是打算把微信聊天记录备份到电
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.rebootcat.com/categories/python/"/>
    
    
      <category term="mac" scheme="http://www.rebootcat.com/tags/mac/"/>
    
      <category term="wechat" scheme="http://www.rebootcat.com/tags/wechat/"/>
    
      <category term="sql" scheme="http://www.rebootcat.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>博客图床切换 Github + jsDelivr + PicGo</title>
    <link href="http://www.rebootcat.com/2018/02/13/new_picture_bed_github/"/>
    <id>http://www.rebootcat.com/2018/02/13/new_picture_bed_github/</id>
    <published>2018-02-13T03:23:58.000Z</published>
    <updated>2020-04-18T16:29:28.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前头的话"><a href="#前头的话" class="headerlink" title="前头的话"></a>前头的话</h1><p>博客已经使用一两年了，最近去看以前的博客的时候发现有些博文里面的图片出现无法显示的情况，虽然问题不是很严重，不过少了图片，就少了很多连贯的东西。之前是采用七牛云存储作为博客图床，可能是因为七牛云存储做了一些限制吧，导致图片无法访问。<br>这次打算重新换一种图床方式吧，毕竟使用第三方的图床总有跑路的风险。谷歌搜索了一些解决方案，其中一个是使用 Github + jsDelivr + PicGo 的方式作为个人图床的。于是打算试试，本文作为一个试验。</p><p><strong>使用 Github 存储图片有一个弊端就是由于 Github 仓库大小有限制，所以到了一定存量的时候，可能需要考虑其他方案或者新建新的仓库</strong>。</p><ul><li>Github： 图片仓库</li><li>jsDelivr: 一种免费的 CDN 解决方案</li><li>PicGo: 快速上传图片至 Github 并且自动拷贝图片地址（其实不用这个也行，手动把图片文件 Push 到 Github, 然后拼接图片地址就行）</li></ul><h1 id="图床测试"><a href="#图床测试" class="headerlink" title="图床测试"></a>图床测试</h1><blockquote><p>图片1.狼</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/wolf.jpg" alt=""></p><blockquote><p>图片2.SMAUG</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/smaug_huobiteren.jpg" alt=""></p><blockquote><p>图片3.AryaStark<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/AryaStark.jpg" alt=""></p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.itrhx.com/2019/08/01/A27-image-hosting/" target="_blank" rel="noopener">Github+jsDelivr+PicGo 打造稳定快速、高效免费图床</a></p><a id="more"></a><p>Blog:</p><ul><li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#x69;&#x6e;&#117;&#120;&#x63;&#x6f;&#x64;&#x65;&#x32;&#110;&#x69;&#x6b;&#x69;&#x40;&#x67;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#108;&#x69;&#x6e;&#117;&#120;&#x63;&#x6f;&#x64;&#x65;&#x32;&#110;&#x69;&#x6b;&#x69;&#x40;&#x67;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p></li></ul><p>2018-02-13 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前头的话&quot;&gt;&lt;a href=&quot;#前头的话&quot; class=&quot;headerlink&quot; title=&quot;前头的话&quot;&gt;&lt;/a&gt;前头的话&lt;/h1&gt;&lt;p&gt;博客已经使用一两年了，最近去看以前的博客的时候发现有些博文里面的图片出现无法显示的情况，虽然问题不是很严重，不过少了图片，就少了很多连贯的东西。之前是采用七牛云存储作为博客图床，可能是因为七牛云存储做了一些限制吧，导致图片无法访问。&lt;br&gt;这次打算重新换一种图床方式吧，毕竟使用第三方的图床总有跑路的风险。谷歌搜索了一些解决方案，其中一个是使用 Github + jsDelivr + PicGo 的方式作为个人图床的。于是打算试试，本文作为一个试验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 Github 存储图片有一个弊端就是由于 Github 仓库大小有限制，所以到了一定存量的时候，可能需要考虑其他方案或者新建新的仓库&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github： 图片仓库&lt;/li&gt;
&lt;li&gt;jsDelivr: 一种免费的 CDN 解决方案&lt;/li&gt;
&lt;li&gt;PicGo: 快速上传图片至 Github 并且自动拷贝图片地址（其实不用这个也行，手动把图片文件 Push 到 Github, 然后拼接图片地址就行）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;图床测试&quot;&gt;&lt;a href=&quot;#图床测试&quot; class=&quot;headerlink&quot; title=&quot;图床测试&quot;&gt;&lt;/a&gt;图床测试&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图片1.狼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/wolf.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图片2.SMAUG&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/smaug_huobiteren.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图片3.AryaStark&lt;br&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/AryaStark.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.itrhx.com/2019/08/01/A27-image-hosting/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github+jsDelivr+PicGo 打造稳定快速、高效免费图床&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://www.rebootcat.com/categories/blog/"/>
    
    
      <category term="hexo" scheme="http://www.rebootcat.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://www.rebootcat.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>辩证看待 iostat</title>
    <link href="http://www.rebootcat.com/2018/01/16/using-iostat-dialectically/"/>
    <id>http://www.rebootcat.com/2018/01/16/using-iostat-dialectically/</id>
    <published>2018-01-16T03:23:58.000Z</published>
    <updated>2020-04-18T16:29:28.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经常做系统分析会接触到很多有用的工具，比如 iostat,它是用来分析磁盘性能、系统 I/O 的利器。</p><p>本文将重点<strong>介绍 iostat 命令的使用，并分析容易引起误解的几个指标</strong>。</p><h1 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h1><blockquote><p>iostat - Report Central Processing Unit (CPU) statistics and input/output statistics for devices and partitions.</p></blockquote><p>上面是 man 手册关于 iostat 命令的介绍，非常简单明了。iostat 是我们经常用来分析 cpu 负载和磁盘 I/O 情况的工具。</p><h2 id="iostat-基本使用"><a href="#iostat-基本使用" class="headerlink" title="iostat 基本使用"></a>iostat 基本使用</h2><p>常用命令（个人习惯）：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat -xk <span class="number">2</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>参数的解释可以查看 man 手册：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS</span><br><span class="line">       -c     Display the CPU utilization report.</span><br><span class="line"></span><br><span class="line">       -d     Display the device utilization report.</span><br><span class="line"></span><br><span class="line">       -g group_name &#123; device [<span class="built_in">..</span>.] | ALL &#125;</span><br><span class="line">              Display statistics <span class="keyword">for</span> a<span class="built_in"> group </span>of devices.  The iostat command reports statistics <span class="keyword">for</span> each individual device <span class="keyword">in</span> the list then a line of global statistics <span class="keyword">for</span> the<span class="built_in"> group </span>displayed as group_name <span class="keyword">and</span> made  up  of  all  the</span><br><span class="line">              devices <span class="keyword">in</span> the list. The ALL keyword means that all the block devices defined by the<span class="built_in"> system </span>shall be included <span class="keyword">in</span> the group.</span><br><span class="line"></span><br><span class="line">       -h     Make the Device Utilization Report easier <span class="keyword">to</span> read by a human.</span><br><span class="line"></span><br><span class="line">       -j &#123; ID | LABEL | PATH | UUID | <span class="built_in">..</span>. &#125; [ device [<span class="built_in">..</span>.] | ALL ]</span><br><span class="line">              Display  persistent  device  names.  Options  ID,  LABEL,  etc.  specify  the<span class="built_in"> type </span>of the persistent name. These options are <span class="keyword">not</span> limited, only prerequisite is that directory with required persistent names is present <span class="keyword">in</span></span><br><span class="line">              /dev/disk.  Optionally, multiple devices can be specified <span class="keyword">in</span> the chosen persistent name type.  Because persistent device names are usually long, option -h is enabled implicitly with this option.</span><br><span class="line"></span><br><span class="line">       -k     Display statistics <span class="keyword">in</span> kilobytes per second.</span><br><span class="line"></span><br><span class="line">       -m     Display statistics <span class="keyword">in</span> megabytes per second.</span><br><span class="line"></span><br><span class="line">       -N     Display the registered device mapper names <span class="keyword">for</span> any device mapper devices.  Useful <span class="keyword">for</span> viewing LVM2 statistics.</span><br><span class="line"></span><br><span class="line">       -p [ &#123; device [,<span class="built_in">..</span>.] | ALL &#125; ]</span><br><span class="line">              The -p option displays statistics <span class="keyword">for</span> block devices <span class="keyword">and</span> all their partitions that are used by the system.  <span class="keyword">If</span> a device name is entered on the command line, then statistics <span class="keyword">for</span> it <span class="keyword">and</span> all its partitions  are  displayed.</span><br><span class="line">              Last,  the  ALL  keyword  indicates  that  statistics  have <span class="keyword">to</span> be displayed <span class="keyword">for</span> all the block devices <span class="keyword">and</span> partitions defined by the system, including those that have never been used. <span class="keyword">If</span> option -j is defined before this</span><br><span class="line">              option, devices entered on the command line can be specified with the chosen persistent name type.</span><br><span class="line"></span><br><span class="line">       -T     This option must be used with option -g <span class="keyword">and</span> indicates that only global statistics <span class="keyword">for</span> the<span class="built_in"> group </span>are <span class="keyword">to</span> be displayed, <span class="keyword">and</span> <span class="keyword">not</span> statistics <span class="keyword">for</span> individual devices <span class="keyword">in</span> the group.</span><br><span class="line"></span><br><span class="line">       -t     <span class="builtin-name">Print</span> the time <span class="keyword">for</span> each report displayed. The timestamp format may depend on the value of the S_TIME_FORMAT environment variable (see below).</span><br><span class="line"></span><br><span class="line">       -V     <span class="builtin-name">Print</span> version number then exit.</span><br><span class="line"></span><br><span class="line">       -x     Display extended statistics.</span><br><span class="line"></span><br><span class="line">       -y     Omit first report with statistics since<span class="built_in"> system </span>boot, <span class="keyword">if</span> displaying multiple records at given interval.</span><br><span class="line"></span><br><span class="line">       -z     Tell iostat <span class="keyword">to</span> omit output <span class="keyword">for</span> any devices <span class="keyword">for</span> which there was <span class="literal">no</span> activity during the sample period.</span><br></pre></td></tr></table></figure><p>简单讲，-x 参数能比较详细的给出一些指标，2 代表间隔时间为 2s，统计输出 10 次。</p><a id="more"></a><p>上面的命令可以看到如下的输出：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avg-cpu:</span>  <span class="string">%user</span>   <span class="string">%nice</span> <span class="string">%system</span> <span class="string">%iowait</span>  <span class="string">%steal</span>   <span class="string">%idle</span></span><br><span class="line">           <span class="number">0.40</span>    <span class="number">0.00</span>    <span class="number">0.49</span>    <span class="number">0.42</span>    <span class="number">0.00</span>   <span class="number">98.69</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Device:</span>         <span class="string">rrqm/s</span>   <span class="string">wrqm/s</span>     <span class="string">r/s</span>     <span class="string">w/s</span>    <span class="string">rkB/s</span>    <span class="string">wkB/s</span> <span class="string">avgrq-sz</span> <span class="string">avgqu-sz</span>   <span class="string">await</span> <span class="string">r_await</span> <span class="string">w_await</span>  <span class="string">svctm</span>  <span class="string">%util</span></span><br><span class="line"><span class="string">sda</span>               <span class="number">0.00</span>   <span class="number">253.00</span>    <span class="number">0.02</span>   <span class="number">10.26</span>     <span class="number">0.66</span>  <span class="number">2081.56</span>   <span class="number">405.05</span>     <span class="number">0.65</span>   <span class="number">62.78</span>    <span class="number">6.01</span>   <span class="number">62.92</span>   <span class="number">4.55</span>   <span class="number">4.68</span></span><br><span class="line"><span class="string">sdb</span>               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">8.19</span>     <span class="number">0.00</span>    <span class="number">0.23</span>    <span class="number">0.23</span>    <span class="number">0.00</span>   <span class="number">0.23</span>   <span class="number">0.00</span></span><br><span class="line"><span class="string">sdc</span>               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">8.19</span>     <span class="number">0.00</span>    <span class="number">0.32</span>    <span class="number">0.32</span>    <span class="number">0.00</span>   <span class="number">0.32</span>   <span class="number">0.00</span></span><br><span class="line"><span class="string">sdd</span>               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">8.19</span>     <span class="number">0.00</span>    <span class="number">0.34</span>    <span class="number">0.34</span>    <span class="number">0.00</span>   <span class="number">0.34</span>   <span class="number">0.00</span></span><br><span class="line"><span class="string">sde</span>               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">8.19</span>     <span class="number">0.00</span>    <span class="number">0.34</span>    <span class="number">0.34</span>    <span class="number">0.00</span>   <span class="number">0.34</span>   <span class="number">0.00</span></span><br></pre></td></tr></table></figure><p>上面各个字段的解释如下（同样来自 man）</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Device Utilization Report</span><br><span class="line">       rrqm/s</span><br><span class="line">              The <span class="built_in">number</span> <span class="keyword">of</span> <span class="built_in">read</span> requests merged per <span class="keyword">second</span> that were queued <span class="built_in">to</span> <span class="keyword">the</span> device.</span><br><span class="line"></span><br><span class="line">       wrqm/s</span><br><span class="line">              The <span class="built_in">number</span> <span class="keyword">of</span> <span class="built_in">write</span> requests merged per <span class="keyword">second</span> that were queued <span class="built_in">to</span> <span class="keyword">the</span> device.</span><br><span class="line"></span><br><span class="line">       r/s</span><br><span class="line">              The <span class="built_in">number</span> (<span class="keyword">after</span> merges) <span class="keyword">of</span> <span class="built_in">read</span> requests completed per <span class="keyword">second</span> <span class="keyword">for</span> <span class="keyword">the</span> device.</span><br><span class="line"></span><br><span class="line">       w/s</span><br><span class="line">              The <span class="built_in">number</span> (<span class="keyword">after</span> merges) <span class="keyword">of</span> <span class="built_in">write</span> requests completed per <span class="keyword">second</span> <span class="keyword">for</span> <span class="keyword">the</span> device.</span><br><span class="line"></span><br><span class="line">       rsec/s (rkB/s, rMB/s)</span><br><span class="line">              The <span class="built_in">number</span> <span class="keyword">of</span> sectors (kilobytes, megabytes) <span class="built_in">read</span> <span class="built_in">from</span> <span class="keyword">the</span> device per <span class="keyword">second</span>.</span><br><span class="line"></span><br><span class="line">       wsec/s (wkB/s, wMB/s)</span><br><span class="line">              The <span class="built_in">number</span> <span class="keyword">of</span> sectors (kilobytes, megabytes) written <span class="built_in">to</span> <span class="keyword">the</span> device per <span class="keyword">second</span>.</span><br><span class="line"></span><br><span class="line">       avgrq-sz</span><br><span class="line">              The <span class="built_in">average</span> size (<span class="keyword">in</span> sectors) <span class="keyword">of</span> <span class="keyword">the</span> requests that were issued <span class="built_in">to</span> <span class="keyword">the</span> device.</span><br><span class="line"></span><br><span class="line">       avgqu-sz</span><br><span class="line">              The <span class="built_in">average</span> queue <span class="built_in">length</span> <span class="keyword">of</span> <span class="keyword">the</span> requests that were issued <span class="built_in">to</span> <span class="keyword">the</span> device.</span><br><span class="line"></span><br><span class="line">       await</span><br><span class="line">              The <span class="built_in">average</span> <span class="built_in">time</span> (<span class="keyword">in</span> <span class="built_in">milliseconds</span>) <span class="keyword">for</span> I/O requests issued <span class="built_in">to</span> <span class="keyword">the</span> device <span class="built_in">to</span> be served. This includes <span class="keyword">the</span> <span class="built_in">time</span> spent <span class="keyword">by</span> <span class="keyword">the</span> requests <span class="keyword">in</span> queue <span class="keyword">and</span> <span class="keyword">the</span> <span class="built_in">time</span> spent servicing them.</span><br><span class="line"></span><br><span class="line">       r_await</span><br><span class="line">              The <span class="built_in">average</span> <span class="built_in">time</span> (<span class="keyword">in</span> <span class="built_in">milliseconds</span>) <span class="keyword">for</span> <span class="built_in">read</span> requests issued <span class="built_in">to</span> <span class="keyword">the</span> device <span class="built_in">to</span> be served. This includes <span class="keyword">the</span> <span class="built_in">time</span> spent <span class="keyword">by</span> <span class="keyword">the</span> requests <span class="keyword">in</span> queue <span class="keyword">and</span> <span class="keyword">the</span> <span class="built_in">time</span> spent servicing them.</span><br><span class="line">                            w_await</span><br><span class="line">              The <span class="built_in">average</span> <span class="built_in">time</span> (<span class="keyword">in</span> <span class="built_in">milliseconds</span>) <span class="keyword">for</span> <span class="built_in">write</span> requests issued <span class="built_in">to</span> <span class="keyword">the</span> device <span class="built_in">to</span> be served. This includes <span class="keyword">the</span> <span class="built_in">time</span> spent <span class="keyword">by</span> <span class="keyword">the</span> requests <span class="keyword">in</span> queue <span class="keyword">and</span> <span class="keyword">the</span> <span class="built_in">time</span> spent servicing them.</span><br><span class="line"></span><br><span class="line">       svctm</span><br><span class="line">              The <span class="built_in">average</span> service <span class="built_in">time</span> (<span class="keyword">in</span> <span class="built_in">milliseconds</span>) <span class="keyword">for</span> I/O requests that were issued <span class="built_in">to</span> <span class="keyword">the</span> device. Warning! Do <span class="keyword">not</span> trust this field <span class="keyword">any</span> more.  This field will be removed <span class="keyword">in</span> <span class="keyword">a</span> future sysstat <span class="built_in">version</span>.</span><br><span class="line"></span><br><span class="line">       %util</span><br><span class="line">              Percentage <span class="keyword">of</span> elapsed <span class="built_in">time</span> during which I/O requests were issued <span class="built_in">to</span> <span class="keyword">the</span> device (bandwidth utilization <span class="keyword">for</span> <span class="keyword">the</span> device). Device saturation occurs when this <span class="built_in">value</span> is <span class="built_in">close</span> <span class="built_in">to</span> <span class="number">100</span>%.</span><br></pre></td></tr></table></figure><p>上面的英文应该还是挺容易明白的，其中重点需要关注的是下面几个指标：</p><ul><li>avgrq-sz：每个 IO 的平均扇区数，即所有请求的平均大小，以扇区（512字节）为单位</li><li>avgqu-sz：平均意义上的请求队列长度</li><li>await：平均每个 I/O 花费的时间，包括在队列中等待时间以及磁盘控制器中真正处理的时间</li><li>svctm：每个 I/O 的服务时间。但注意上面的解释 <code>Warning! Do not trust this field any more</code>。iostat 中关于每个 I/O 的真实处理时间不可靠</li><li>util：磁盘繁忙程度，单位为百分比</li></ul><p>分析建议：<br>当系统性能下降时，我们往往需要着重关注上面列出来的 5 个参数，比如：</p><ul><li><strong>I/O 请求队列是否过长？</strong></li><li><strong>I/O size 是否过大或过小？</strong></li><li><strong>是否造成了 I/O 等待过长？</strong></li><li><strong>每个 I/O 处理时间是否过大？</strong></li><li><strong>磁盘压力是否过大？</strong></li></ul><p>综合分析上述指标，可以得到一定的性能分析结论，但需要注意一些陷阱。</p><h2 id="注意陷阱"><a href="#注意陷阱" class="headerlink" title="注意陷阱"></a>注意陷阱</h2><p>我们看到上面 iostat 的输出如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Device:</span>         <span class="string">rrqm/s</span>   <span class="string">wrqm/s</span>     <span class="string">r/s</span>     <span class="string">w/s</span>    <span class="string">rkB/s</span>    <span class="string">wkB/s</span> <span class="string">avgrq-sz</span> <span class="string">avgqu-sz</span>   <span class="string">await</span> <span class="string">r_await</span> <span class="string">w_await</span>  <span class="string">svctm</span>  <span class="string">%util</span></span><br><span class="line"><span class="string">sda</span>               <span class="number">0.00</span>   <span class="number">253.00</span>    <span class="number">0.02</span>   <span class="number">10.26</span>     <span class="number">0.66</span>  <span class="number">2081.56</span>   <span class="number">405.05</span>     <span class="number">0.65</span>   <span class="number">62.78</span>    <span class="number">6.01</span>   <span class="number">62.92</span>   <span class="number">4.55</span>   <span class="number">4.68</span></span><br></pre></td></tr></table></figure><p>svctm 为 4.55 ms，即每个 I/O 处理时间为 4.55 ms，这其实是有点偏慢了，但是 await 却高达 62.78 ms，为何？</p><p>上面可以看到总的 I/O 数为『读 I/O』+ 『写 I/O』 = 0.02 + 10.26 ≈ 11 个，假设这 11 个 I/O 是同时发起，且磁盘是顺序处理的情况，那么平均等待时间计算如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">平均等待时间 = 单个 I/O 处理时间 * ( <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + ...+ I/O 请求总数 - <span class="number">1</span> ) / 请求总数 = <span class="number">4.55</span> * （ <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + ... + <span class="number">10</span>） / <span class="number">11</span> = <span class="number">22.75</span> ms</span><br></pre></td></tr></table></figure><p>解释如下：</p><blockquote><p>可以把 iostat 想像成 超市付款处，有 11 个顾客排队等待付款，只有一个收银员在服务，每个顾客处理时间为 4.55 ms，第一个顾客不需要等待，第二个顾客需要等待第一个顾客的处理时间，第三个顾客需要等待前面两位的处理时间…以此类推，所有等待时间为 单个 I/O 处理时间 * ( 1 + 2 + 3 + …+ I/O 请求总数 - 1 ).</p></blockquote><p>计算得到的平均等待时间为 22.75 ms，再加上单个 I/O 处理时间 4.55 ms 得到 27.3 ms:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22.75</span> + <span class="number">4.55</span> = <span class="number">27.3</span> ms</span><br></pre></td></tr></table></figure><p>27.3ms 可以表征 iostat 中的 await 指标，因为 await 包括了等待时间和实际处理时间。但 iostat 的 await 为 62.78 ms，为何会比 iostat 得到的 await 值小这么多？<strong>why?</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">27.3</span> <span class="keyword">ms</span> <span class="title">&lt;  62</span>.<span class="number">78</span> ms</span><br></pre></td></tr></table></figure><p>再次查看计算方法，步骤和原理都是正确的，但其中唯一不准确的变量就是单个 I/O 的处理时间 svctm！另外就是前提假定了磁盘是顺序处理 I/O 的。</p><blockquote><p>那么是不是 svctm 不准确呢？或者磁盘并不是顺序处理 I/O 请求的呢？</p></blockquote><h3 id="丢弃-svctm"><a href="#丢弃-svctm" class="headerlink" title="丢弃 svctm"></a>丢弃 svctm</h3><p>我们一直想要得到的指标是能够衡量磁盘性能的指标，也就是单个 I/O 的 service time。但是 service time 和 iostat 无关，iostat 没有任何一个参数能够提供这方面的信息。人们往往对 iostat 抱有过多的期待！</p><blockquote><p>Warning! Do not trust this field any more.  This field will be removed in a future sysstat version.</p></blockquote><p>man 手册中给出了这么一段模凌两可的警告，却没有说明原因。那么原因是什么呢？svctm  又是怎么得到的呢？</p><p>iostat 命令来自 <a href="https://github.com/sysstat/sysstat" target="_blank" rel="noopener">sysstat</a> 工具包，翻阅源码可以在 <code>rd_stats.c</code> 找到 svctm 的计算方法，其实 svctm 的计算依赖于其他指标：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   ***************************************************************************</span></span><br><span class="line"><span class="comment">   * Compute "extended" device statistics (service time, etc.).</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * IN:</span></span><br><span class="line"><span class="comment">   * @sdc     Structure with current device statistics.</span></span><br><span class="line"><span class="comment">   * @sdp     Structure with previous device statistics.</span></span><br><span class="line"><span class="comment">   * @itv     Interval of time in 1/100th of a second.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * OUT:</span></span><br><span class="line"><span class="comment">   * @xds     Structure with extended statistics.</span></span><br><span class="line"><span class="comment">   ***************************************************************************</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  void compute_ext_disk_stats(struct stats_disk *sdc, struct stats_disk *sdp,</span><br><span class="line">               unsigned long long itv, struct ext_disk_stats *xds)</span><br><span class="line">  &#123;</span><br><span class="line">      double tput</span><br><span class="line">          = ((<span class="function"><span class="title">double</span>) (sdc-&gt;</span><span class="function"><span class="title">nr_ios</span> - sdp-&gt;</span>nr_ios)) * <span class="number">100</span> / itv;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">util</span>  = S_VALUE(sdp-&gt;</span><span class="function"><span class="title">tot_ticks</span>, sdc-&gt;</span>tot_ticks, itv);</span><br><span class="line">      <span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">svctm</span> = tput ? xds-&gt;</span>util / tput : <span class="number">0.0</span>;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * Kernel gives ticks already in milliseconds for all platforms</span></span><br><span class="line"><span class="comment">      * =&gt; no need for further scaling.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">await</span> = (sdc-&gt;</span><span class="function"><span class="title">nr_ios</span> - sdp-&gt;</span>nr_ios) ?</span><br><span class="line">          ((<span class="function"><span class="title">sdc</span>-&gt;</span><span class="function"><span class="title">rd_ticks</span> - sdp-&gt;</span><span class="function"><span class="title">rd_ticks</span>) + (sdc-&gt;</span><span class="function"><span class="title">wr_ticks</span> - sdp-&gt;</span>wr_ticks)) /</span><br><span class="line">          ((<span class="function"><span class="title">double</span>) (sdc-&gt;</span><span class="function"><span class="title">nr_ios</span> - sdp-&gt;</span>nr_ios)) : <span class="number">0.0</span>;</span><br><span class="line">      <span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">arqsz</span> = (sdc-&gt;</span><span class="function"><span class="title">nr_ios</span> - sdp-&gt;</span>nr_ios) ?</span><br><span class="line">          ((<span class="function"><span class="title">sdc</span>-&gt;</span><span class="function"><span class="title">rd_sect</span> - sdp-&gt;</span><span class="function"><span class="title">rd_sect</span>) + (sdc-&gt;</span><span class="function"><span class="title">wr_sect</span> - sdp-&gt;</span>wr_sect)) /</span><br><span class="line">          ((<span class="function"><span class="title">double</span>) (sdc-&gt;</span><span class="function"><span class="title">nr_ios</span> - sdp-&gt;</span>nr_ios)) : <span class="number">0.0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中重点关注：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">svctm</span> = tput ? xds-&gt;</span>util / tput : <span class="number">0.0</span>;</span><br></pre></td></tr></table></figure><p>学过 C 语言的都知道这是一个三元运算符：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A ? <span class="keyword">B </span>: C</span><br><span class="line">表示如果 A 为真，那么表达式值为 <span class="keyword">B，否则为 </span>C</span><br></pre></td></tr></table></figure><p><strong>tput</strong> 可以理解为 IOPS，即当 IOPS 非零时，svctm 等于 util / tput；否则等于 0。</p><blockquote><p>tput 相当于 IOPS，下文会作解释。</p></blockquote><p>上面说的 svctm 的计算依赖的值就是 <strong>util</strong>，那么 <strong>man 手册给出的警告应该废弃 svctm 的原因是不是因为 util 的计算不准确呢</strong>？</p><h3 id="util-磁盘利用率"><a href="#util-磁盘利用率" class="headerlink" title="util 磁盘利用率"></a>util 磁盘利用率</h3><blockquote><p>上面说到应该废弃 svctm 指标，因为它并不能作为衡量磁盘性能的指标，svctm 的计算是不准确的。但从上面的计算公式可以看到，唯一的不确定的变量是 util 的值。</p></blockquote><p>util 是用来衡量磁盘利用率的指标，那么 util 是怎么计算的呢？还是上面的 <code>compute_ext_disk_stats</code> 函数：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void compute_ext_disk_stats(<span class="class"><span class="keyword">struct</span> <span class="title">stats_disk</span></span> *sdc, <span class="class"><span class="keyword">struct</span> <span class="title">stats_disk</span></span> *sdp,</span><br><span class="line">               unsigned long long itv, <span class="class"><span class="keyword">struct</span> <span class="title">ext_disk_stats</span></span> *xds)</span><br><span class="line">  &#123;</span><br><span class="line">      double tput</span><br><span class="line">          = ((double) (sdc-&gt;nr_ios - sdp-&gt;nr_ios)) * <span class="number">100</span> / itv;</span><br><span class="line"></span><br><span class="line">      xds-&gt;util  = S_VALUE(sdp-&gt;tot_ticks, sdc-&gt;tot_ticks, itv);</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>进一步阅读源码找到 S_VALUE 的定义：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define S_VALUE(<span class="name">m</span>,n,p)      (((<span class="name">double</span>) ((<span class="name">n</span>) - (<span class="name">m</span>))) / (<span class="name">p</span>) * 100)</span><br></pre></td></tr></table></figure><p>且上面的注释可以看到：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* <span class="variable">@sdc</span>        Structure with current device statistics.</span><br><span class="line">* <span class="variable">@sdp</span>        Structure with previous device statistics.</span><br><span class="line">* <span class="variable">@itv</span>        Interval of time in <span class="number">1</span>/<span class="number">100</span>th of a second.</span><br></pre></td></tr></table></figure><p>最终得到 util 的计算方法为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">util</span> = ( current_tot_ticks - previous_tot_ticks ) /  采样周期 * <span class="number">100</span></span><br></pre></td></tr></table></figure><p>那么 <code>tot_ticks</code> 是什么呢？这里需要关注 <code>stats_disk</code> 这个结构体，查阅源码在 <code>rd_stats.h</code> 文件中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* rd_stats.h */</span></span><br><span class="line"><span class="comment">/* Structure for block devices statistics */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stats_disk</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> nr_ios;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>      rd_sect  __attribute__ ((aligned (<span class="number">8</span>)));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>      wr_sect  __attribute__ ((aligned (<span class="number">8</span>)));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>       rd_ticks __attribute__ ((aligned (<span class="number">8</span>)));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>       wr_ticks;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>       tot_ticks;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>       rq_ticks;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>       major;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>       minor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里看不出具体每个字段是什么意义，源文件也没有作注释，接着看 <code>rd_stats.c</code> 文件是怎么对结构体赋值的，源文件 <code>rd_stats.c</code> 中：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">   <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line"><span class="bullet">   * </span>Read block devices statistics from /proc/diskstats.</span><br><span class="line">   *</span><br><span class="line">*/</span><br><span class="line">  <span class="strong">__nr_t read_diskstats_disk(struct stats_disk *st_disk, __</span>nr<span class="emphasis">_t nr_</span>alloc,int read_part)</span><br><span class="line">  &#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="code">     if ((fp = fopen(DISKSTATS, "r")) == NULL)</span></span><br><span class="line"><span class="code">          return 0;</span></span><br><span class="line"></span><br><span class="line"><span class="code">      while (fgets(line, sizeof(line), fp) != NULL) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="code">          if (sscanf(line, "%u %u %s %lu %*u %lu %u %lu %*u %lu"</span></span><br><span class="line"><span class="code">                 " %u %*u %u %u",</span></span><br><span class="line"><span class="code">                 &amp;major, &amp;minor, dev_name,</span></span><br><span class="line"><span class="code">                 &amp;rd_ios, &amp;rd_sec, &amp;rd_ticks, &amp;wr_ios, &amp;wr_sec, &amp;wr_ticks,</span></span><br><span class="line"><span class="code">                 &amp;tot_ticks, &amp;rq_ticks) == 11) &#123; ... &#125;</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心代码如上，具体来讲，iostat 的使用其实是依赖于 <code>/proc/diskstats</code> 文件，读取  <code>/proc/diskstats</code> 值，然后做进一步的分析处理。这里额外介绍下 <code>/proc/diskstats</code> 文件：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ~]# cat /proc/diskstats</span><br><span class="line">   <span class="number">1</span>       <span class="number">0</span> ram0 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">1</span> ram1 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">2</span> ram2 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">3</span> ram3 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">4</span> ram4 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">5</span> ram5 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">6</span> ram6 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">7</span> ram7 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">8</span> ram8 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">8</span>       <span class="number">0</span> sda <span class="number">82044583</span> <span class="number">3148</span> <span class="number">10966722840</span> <span class="number">222442157</span> <span class="number">24658460</span> <span class="number">2499170</span> <span class="number">2700969385</span> <span class="number">105371088</span> <span class="number">0</span> <span class="number">57897509</span> <span class="number">328196252</span></span><br><span class="line">   <span class="number">8</span>       <span class="number">1</span> sda1 <span class="number">4144</span> <span class="number">0</span> <span class="number">339790</span> <span class="number">2859</span> <span class="number">93359</span> <span class="number">82770</span> <span class="number">4180584</span> <span class="number">671453</span> <span class="number">0</span> <span class="number">534023</span> <span class="number">674311</span></span><br><span class="line">   <span class="number">8</span>       <span class="number">2</span> sda2 <span class="number">487</span> <span class="number">0</span> <span class="number">4114</span> <span class="number">28</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">28</span> <span class="number">28</span></span><br><span class="line">   <span class="number">8</span>       <span class="number">3</span> sda3 <span class="number">8450</span> <span class="number">0</span> <span class="number">206387</span> <span class="number">3489</span> <span class="number">598140</span> <span class="number">1719768</span> <span class="number">413807296</span> <span class="number">6739177</span> <span class="number">0</span> <span class="number">1204240</span> <span class="number">6742537</span></span><br><span class="line">   <span class="number">8</span>       <span class="number">4</span> sda4 <span class="number">82031488</span> <span class="number">3148</span> <span class="number">10966172437</span> <span class="number">222435779</span> <span class="number">23966958</span> <span class="number">696632</span> <span class="number">2282981505</span> <span class="number">97960444</span> <span class="number">0</span> <span class="number">57538914</span> <span class="number">321035535</span></span><br><span class="line">   <span class="number">8</span>      <span class="number">16</span> sdb <span class="number">6696805</span> <span class="number">672</span> <span class="number">1028622736</span> <span class="number">99268437</span> <span class="number">3479149</span> <span class="number">1095853</span> <span class="number">385460280</span> <span class="number">4357778</span> <span class="number">0</span> <span class="number">80933531</span> <span class="number">103624000</span></span><br><span class="line">   <span class="number">8</span>      <span class="number">32</span> sdc <span class="number">6535697</span> <span class="number">706</span> <span class="number">1003357408</span> <span class="number">101660311</span> <span class="number">3409287</span> <span class="number">1048913</span> <span class="number">370227528</span> <span class="number">4329287</span> <span class="number">0</span> <span class="number">82570947</span> <span class="number">105987603</span></span><br><span class="line">   <span class="number">8</span>      <span class="number">48</span> sdd <span class="number">6555170</span> <span class="number">652</span> <span class="number">1005848496</span> <span class="number">98046714</span> <span class="number">3392381</span> <span class="number">1044610</span> <span class="number">369149464</span> <span class="number">4407316</span> <span class="number">0</span> <span class="number">80348361</span> <span class="number">102451899</span></span><br><span class="line">   <span class="number">8</span>      <span class="number">64</span> sde <span class="number">6532011</span> <span class="number">671</span> <span class="number">1002703024</span> <span class="number">134576408</span> <span class="number">3406505</span> <span class="number">1054721</span> <span class="number">372497720</span> <span class="number">5792380</span> <span class="number">0</span> <span class="number">103162428</span> <span class="number">140366630</span></span><br></pre></td></tr></table></figure><p>每个字段的意义解释如下：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">The /<span class="keyword">proc</span>/diskstats<span class="title"> file</span> displays<span class="title"> the</span> I/O<span class="title"> statistics</span></span><br><span class="line"><span class="title"></span> <span class="title"> of</span> block<span class="title"> devices.</span> Each<span class="title"> line</span> contains<span class="title"> the</span> following 14</span><br><span class="line"><span class="title">  fields:</span></span><br><span class="line"><span class="title"></span>   1 -<span class="title"> major</span> number</span><br><span class="line">   2 -<span class="title"> minor</span> mumber</span><br><span class="line">   3 -<span class="title"> device</span> name</span><br><span class="line">   4 -<span class="title"> reads</span> completed<span class="title"> successfully</span></span><br><span class="line"><span class="title"></span>   5 -<span class="title"> reads</span> merged</span><br><span class="line">   6 -<span class="title"> sectors</span> read</span><br><span class="line">   7 -<span class="title"> time</span> spent<span class="title"> reading</span> (ms)</span><br><span class="line">   8 -<span class="title"> writes</span> completed</span><br><span class="line">   9 -<span class="title"> writes</span> merged</span><br><span class="line">  10 -<span class="title"> sectors</span> written</span><br><span class="line">  11 -<span class="title"> time</span> spent<span class="title"> writing</span> (ms)</span><br><span class="line">  12 -<span class="title"> I/Os</span> currently<span class="title"> in</span> progress</span><br><span class="line">  13 -<span class="title"> time</span> spent<span class="title"> doing</span> I/Os (ms)</span><br><span class="line">  14 -<span class="title"> weighted</span> time<span class="title"> spent</span> doing<span class="title"> I/Os</span> (ms)</span><br></pre></td></tr></table></figure><p>这里英文的解释可能没有很明白很清楚，尤其是第 7 、11、13 个字段的解释，我们再用中文解释一下：</p><table><thead><tr><th>域</th><th>Value</th><th>Quoted</th><th>解释</th></tr></thead><tbody><tr><td>F1</td><td>8</td><td>major number</td><td>此块设备的主设备号</td></tr><tr><td>F2</td><td>0</td><td>minor mumber</td><td>此块设备的次设备号</td></tr><tr><td>F3</td><td>sda</td><td>device  name</td><td>此块设备名字</td></tr><tr><td>F4</td><td>8567</td><td>reads completed successfully</td><td>成功完成的读请求次数</td></tr><tr><td>F5</td><td>1560</td><td>reads merged</td><td>读请求的次数</td></tr><tr><td>F6</td><td>140762</td><td>sectors read</td><td>读请求的扇区数总和</td></tr><tr><td>F7</td><td>3460</td><td>time spent reading (ms)</td><td>读请求花费的时间总和</td></tr><tr><td>F8</td><td>0</td><td>writes completed</td><td>成功完成的写请求次数</td></tr><tr><td>F9</td><td>0</td><td>writes merged</td><td>写请求合并的次数</td></tr><tr><td>F10</td><td>0</td><td>sectors written</td><td>写请求的扇区数总和</td></tr><tr><td>F11</td><td>0</td><td>time spent writing (ms)</td><td>写请求花费的时间总和</td></tr><tr><td>F12</td><td>0</td><td>I/Os currently in progress</td><td>次块设备队列中的IO请求数</td></tr><tr><td>F13</td><td>2090</td><td>time spent doing I/Os (ms)</td><td>块设备队列非空时间总和</td></tr><tr><td>F14</td><td>3440</td><td>weighted time spent doing I/Os (ms)</td><td>块设备队列非空时间加权总和</td></tr></tbody></table><p>这里需要特别对第 7、11、13 个字段做一点解释，<strong>第 7 个字段表示所有读请求的花费时间总和，这里把每个读 I/O 请求都计算在内；同理是第 11 个字段；那么为什么还有第 13 个字段呢？第 13 个字段不关心有多少 I/O 在处理，它只关心设备是否在做 I/O 操作，所以真实情况是第 7 个字段加上第 11 个字段的值会比第 13 个字段的值更大一点</strong>。</p><p>回到 <code>rd_stats.c</code> 源码中，<code>stats_disk</code> 结构体是如何赋值的呢？</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">while</span> (fgets(line, sizeof(line), fp) != NULL) </span><br><span class="line">...</span><br><span class="line">sscanf(line, <span class="string">"%u %u %s %lu %*u %lu %u %lu %*u %lu"</span></span><br><span class="line">                 <span class="string">" %u %*u %u %u"</span>,</span><br><span class="line">                 &amp;major, &amp;minor, dev_name,</span><br><span class="line">                 &amp;rd_ios, &amp;rd_sec, &amp;rd_ticks, &amp;wr_ios, &amp;wr_sec, &amp;wr_ticks,</span><br><span class="line">                 &amp;tot_ticks, &amp;rq_ticks) == <span class="number">11</span>)</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>使用 fgets 函数获得 <code>/proc/diskstats</code> 文件中的一行数据，然后使用 sscanf 函数格式化字符串到结构体 <code>stats_disk</code> 的不同成员变量中。仔细看代码，格式符号有 14 个，但接收字符串的变量只有 11 个，这里要注意的是 sscanf 的使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sscanf</span> 中 * 表示读入的数据将被舍弃。带有*的格式指令不对应可变参数列表中的任何数据。</span><br></pre></td></tr></table></figure><p>这么一来，我们要寻找的 <code>tot_ticks</code> 就是第 13 个字段，也就是表示：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">13 </span>- time spent doing I/Os (ms)，即 花费在 I/O 上的时间</span><br></pre></td></tr></table></figure><p>我们再回到 util 的计算：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">util</span> = ( current_tot_ticks - previous_tot_ticks ) /  采样周期 * <span class="number">100</span></span><br></pre></td></tr></table></figure><p>util 的计算方法是： <strong>统计一个周期内磁盘有多少自然时间(ms) 是用来做 I/O 的，得出百分比，代表磁盘利用率</strong>。</p><p><em>上文对于 svctm 的计算提到 tput 这个变量代表 IOPS，这里额外做一点解释</em>：</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*rd_stats.c 中 read_diskstats_disk 函数内 */</span></span><br><span class="line"><span class="comment">/* 读 I/O + 写 I/O 数量 */</span></span><br><span class="line">st_disk_i-&gt;nr_ios  = (unsigned <span class="keyword">long</span> <span class="keyword">long</span>) rd_ios + (unsigned <span class="keyword">long</span> <span class="keyword">long</span>) wr_ios;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* rd_stats.c 中 compute_ext_disk_stats 函数内 */</span></span><br><span class="line"><span class="comment">/* 当前读写 I/O 数量 - 上一次采样时的读写 I/O 数量 */</span></span><br><span class="line"><span class="keyword">double</span> tput = ((<span class="keyword">double</span>) (sdc-&gt;nr_ios - sdp-&gt;nr_ios)) * <span class="number">100</span> / itv;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>经过对 <code>/proc/diskstats</code> 各个字段的分析，不难得出，<code>stats_disk</code> 结构体中的成员变量 <code>nr_ios</code> 代表读写 I/O 成功完成的数量，也就是 IOPS。</p><p>再回过来，那么 util 的计算是准确的吗？<code>tot_ticks</code> 的计算是准确的吗？</p><p>经过上面的分析，<code>tot_ticks</code> 其实表示的是 <code>/proc/diskstats</code> 文件中第 13 个字段，表示磁盘处理 I/O 操作的自然时间，不考虑并行性。那么由此得到的 util 就失去了最原本的意义。</p><p>举个简单的例子，假设磁盘处理单个 I/O 的能力为 0.01ms，依次有 200 个请求提交，需要 2s 处理完所有的请求，如果采样周期为 1s，在 1s 的采样周期里 util 就达到了 100%；但是如果这 200 个请求分批次的并发提交，比如每次并发提交 2 个请求，即每次同时过来 2 个请求，那么需要 1s 即可完成所有请求，采样周期为 1s，util 也是 100%。</p><p>两种场景下 util 均是 100%，那一种磁盘压力更大？当然是第二种，但仅仅通过 util 并不能得出这个结论。</p><p>再回到 svctm 的计算：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">double</span> tput  = ((double) (sdc-&gt;</span><span class="function"><span class="title">nr_ios</span> - sdp-&gt;</span>nr_ios)) * <span class="number">100</span> / itv;</span><br><span class="line"><span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">util</span>  = S_VALUE(sdp-&gt;</span><span class="function"><span class="title">tot_ticks</span>, sdc-&gt;</span>tot_ticks, itv);</span><br><span class="line"><span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">svctm</span> = tput ? xds-&gt;</span>util / tput : <span class="number">0.0</span>;</span><br></pre></td></tr></table></figure><p>转换上述两个式子可以得到：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svctm = ( current_tot_ticks - previous_tot_ticks ) <span class="regexp">/ (current_ios - previous_ios ) = 采样周期内设备进行 I/</span>O 的自然时间  <span class="regexp">/  采样周期内读写 I/</span>O 次数</span><br></pre></td></tr></table></figure><p>故通过此表达式计算得到的 svctm 其实并不能准确衡量单个 I/O 的处理能力。如果磁盘没有并行处理的能力，那么采样周期内读写 I/O 次数必然减少，相应的，svctm 的计算就会偏大。</p><p>那回到开头提出的疑问，假定顺序请求情况下得到的平均等待时间 27.3ms 小于 iostat 看到的 await 62.78ms:</p><pre><code>27.3 ms &lt;  62.78 ms</code></pre><p>现在可以解释了：<strong>27.3 ms 的计算其实使用了偏小的 svctm 值，故得到的平均等待时间较 62.78ms 小很多</strong>。</p><h2 id="iostat-辩证看待"><a href="#iostat-辩证看待" class="headerlink" title="iostat 辩证看待"></a>iostat 辩证看待</h2><p>分析到这里，原理已经很明白了，<strong>util 并不能衡量磁盘的利用率，svctm 的值失去了意义。期望通过这两个指标获得一个磁盘性能的衡量恐怕不行了！</strong></p><p>但平常的分析，我们可以参考 iostat 的输出，再结合其他的一些工具，进行多方面多方位的性能分析，才能得到比较接近真理的结论！</p><h1 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h1><p>上文分析了 iostat 容易引起误解的几个指标，在使用 iostat 时我们需要辩证的看待 iostat 的结果。</p><p>但我们往往更希望获得一个能够衡量磁盘性能的指标，iostat 可能帮不上太多忙了，这时可能需要借助其他的工具了，比如 blktrace 这个工具，这才是分析 I/O 的利器！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://bean-li.github.io/dive-into-iostat/" target="_blank" rel="noopener">深入理解iostat</a></li><li><a href="http://linuxperf.com/?p=156" target="_blank" rel="noopener">容易被误读的IOSTAT</a></li><li><a href="http://ykrocku.github.io/blog/2014/04/11/diskstats/" target="_blank" rel="noopener">深入分析diskstats</a></li><li><a href="https://www.cnblogs.com/zk47/p/4733143.html" target="_blank" rel="noopener">[Linux 运维 – 存储] /proc/diskstats详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;经常做系统分析会接触到很多有用的工具，比如 iostat,它是用来分析磁盘性能、系统 I/O 的利器。&lt;/p&gt;
&lt;p&gt;本文将重点&lt;strong&gt;介绍 iostat 命令的使用，并分析容易引起误解的几个指标&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&quot;iostat&quot;&gt;&lt;a href=&quot;#iostat&quot; class=&quot;headerlink&quot; title=&quot;iostat&quot;&gt;&lt;/a&gt;iostat&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;iostat - Report Central Processing Unit (CPU) statistics and input/output statistics for devices and partitions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面是 man 手册关于 iostat 命令的介绍，非常简单明了。iostat 是我们经常用来分析 cpu 负载和磁盘 I/O 情况的工具。&lt;/p&gt;
&lt;h2 id=&quot;iostat-基本使用&quot;&gt;&lt;a href=&quot;#iostat-基本使用&quot; class=&quot;headerlink&quot; title=&quot;iostat 基本使用&quot;&gt;&lt;/a&gt;iostat 基本使用&lt;/h2&gt;&lt;p&gt;常用命令（个人习惯）：&lt;/p&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iostat -xk &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数的解释可以查看 man 手册：&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OPTIONS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -c     Display the CPU utilization report.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -d     Display the device utilization report.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -g group_name &amp;#123; device [&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;.] | ALL &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              Display statistics &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a&lt;span class=&quot;built_in&quot;&gt; group &lt;/span&gt;of devices.  The iostat command reports statistics &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; each individual device &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the list then a line of global statistics &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the&lt;span class=&quot;built_in&quot;&gt; group &lt;/span&gt;displayed as group_name &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; made  up  of  all  the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              devices &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the list. The ALL keyword means that all the block devices defined by the&lt;span class=&quot;built_in&quot;&gt; system &lt;/span&gt;shall be included &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the group.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -h     Make the Device Utilization Report easier &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; read by a human.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -j &amp;#123; ID | LABEL | PATH | UUID | &lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;. &amp;#125; [ device [&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;.] | ALL ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              Display  persistent  device  names.  Options  ID,  LABEL,  etc.  specify  the&lt;span class=&quot;built_in&quot;&gt; type &lt;/span&gt;of the persistent name. These options are &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; limited, only prerequisite is that directory with required persistent names is present &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              /dev/disk.  Optionally, multiple devices can be specified &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the chosen persistent name type.  Because persistent device names are usually long, option -h is enabled implicitly with this option.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -k     Display statistics &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; kilobytes per second.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -m     Display statistics &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; megabytes per second.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -N     Display the registered device mapper names &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; any device mapper devices.  Useful &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; viewing LVM2 statistics.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -p [ &amp;#123; device [,&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;.] | ALL &amp;#125; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              The -p option displays statistics &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; block devices &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; all their partitions that are used by the system.  &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; a device name is entered on the command line, then statistics &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; it &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; all its partitions  are  displayed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              Last,  the  ALL  keyword  indicates  that  statistics  have &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; be displayed &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; all the block devices &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; partitions defined by the system, including those that have never been used. &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; option -j is defined before this&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              option, devices entered on the command line can be specified with the chosen persistent name type.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -T     This option must be used with option -g &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; indicates that only global statistics &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the&lt;span class=&quot;built_in&quot;&gt; group &lt;/span&gt;are &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; be displayed, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; statistics &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; individual devices &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the group.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -t     &lt;span class=&quot;builtin-name&quot;&gt;Print&lt;/span&gt; the time &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; each report displayed. The timestamp format may depend on the value of the S_TIME_FORMAT environment variable (see below).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -V     &lt;span class=&quot;builtin-name&quot;&gt;Print&lt;/span&gt; version number then exit.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -x     Display extended statistics.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -y     Omit first report with statistics since&lt;span class=&quot;built_in&quot;&gt; system &lt;/span&gt;boot, &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; displaying multiple records at given interval.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       -z     Tell iostat &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; omit output &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; any devices &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; which there was &lt;span class=&quot;literal&quot;&gt;no&lt;/span&gt; activity during the sample period.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简单讲，-x 参数能比较详细的给出一些指标，2 代表间隔时间为 2s，统计输出 10 次。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://www.rebootcat.com/categories/linux/"/>
    
      <category term="磁盘" scheme="http://www.rebootcat.com/categories/linux/%E7%A3%81%E7%9B%98/"/>
    
    
      <category term="iostat" scheme="http://www.rebootcat.com/tags/iostat/"/>
    
      <category term="diskstats" scheme="http://www.rebootcat.com/tags/diskstats/"/>
    
      <category term="sysstat" scheme="http://www.rebootcat.com/tags/sysstat/"/>
    
      <category term="blktrace" scheme="http://www.rebootcat.com/tags/blktrace/"/>
    
  </entry>
  
  <entry>
    <title>微信跳一跳高分辅助踩坑</title>
    <link href="http://www.rebootcat.com/2018/01/08/wechat_jump_hack/"/>
    <id>http://www.rebootcat.com/2018/01/08/wechat_jump_hack/</id>
    <published>2018-01-08T15:23:58.000Z</published>
    <updated>2020-04-18T16:29:28.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最近挺火的微信跳一跳"><a href="#最近挺火的微信跳一跳" class="headerlink" title="最近挺火的微信跳一跳"></a>最近挺火的微信跳一跳</h1><p>最近新版微信的『跳一跳』小程序着实火了一把，也把小程序这个概念再次推波助澜了一波，看来以后小程序这个入口会有大作为。</p><blockquote><p>张小龙：一个好的 APP 应该是用完即走的。</p></blockquote><p>这句话对用户来说是个好消息，对其他创业者来说却可能会招来恶语相向。现在这个时代的步伐越来越快，大家好像都很忙，时间越来越珍贵。如果以后微信真的把小程序这个入口做好了，我觉得对于用户来说，是件好事，当然前提是做好了，比如安全性啥的，比如不会被外挂啥的！</p><p>现在中午，吃完饭没事大家都会高呼 “来一波！来一波！”，就是微信小游戏『坦克大战』，3V3 玩得不亦乐乎！</p><p>废话不多说，看着别人微信跳一跳几百分那么高的分，感觉坐不住了，为了装逼，所以有了这篇博文！</p><blockquote><p>林夕水共是我，这是目前能让好友看到的最高分</p></blockquote><p><img src="/images/bi.png" alt=""></p><a id="more"></a><h1 id="踩完所有坑写的一个简单的说明"><a href="#踩完所有坑写的一个简单的说明" class="headerlink" title="踩完所有坑写的一个简单的说明"></a>踩完所有坑写的一个简单的说明</h1><h2 id="说明一"><a href="#说明一" class="headerlink" title="说明一"></a>说明一</h2><blockquote><p>说明：本人的原始目的虽然是为了装逼，但其实是本着一起探讨技术、一起学习、一起 hack 的心态来折腾这些的。所以<strong>对于某些人在某宝上花钱买外挂来刷分的行为表示不齿，不要为了装逼而装逼！</strong></p></blockquote><p>其实刚开始知道有外挂刷分的时候，并且朋友圈也有转了好几篇关于微信跳一跳可以辅助刷分的文章时，我当时的表情就是，”哦，高分原来是这样”，然后一脸不屑，你是否也跟我一样的表情当时？<br><img src="/images/wechatsoso.png" alt=""></p><p>可是，如果是你去做，哪怕按部就班的来做，你能做好吗？</p><p>这就是 “眼高手低”，其实很多时候，你看到的和你做过的是两回事。前几天翻出罗振宇2016年跨年演讲，他讲到他想做『得到』APP 的初衷就是希望做一个翰林院，可以把好的东西告诉身为皇帝的我们，因为我们不知道什么好什么不好，我们好多时候需要的是粗暴的对待，需要你直接告诉我结果，哪些是好的不就完了吗？这种有别于类似微博、今日头条这种根据你的口味来推荐的 “母爱算法”，也就是 “父爱算法”。</p><p>话没错，我也同意，但忽略了一个东西，每个人的接受能力不同，而且知识这种东西往往不是结果，更多的是过程，过程中获得的东西可能比结果更有价值和意义。用到这里，你看到了那么多篇揭秘跳一跳外挂的文章，你就懂了吗？你就可以不屑一顾了吗？</p><p>你以为不过如此，其实中间的波折可能把你弄成一个傻逼！所谓：</p><blockquote><p><strong>绝知此事要躬行</strong></p></blockquote><h2 id="说明二"><a href="#说明二" class="headerlink" title="说明二"></a>说明二</h2><ul><li>我的技能：C++、Python等</li><li>我的设备：Mac Pro &amp;&amp; iPhone 7Plus</li></ul><p>写这篇博文之前没有接触过安卓、IOS 开发，所以 Debug 移动设备上的程序（游戏、APP）,相对来说会感觉困难一点。所以折腾这个跳一跳，真的还是挺折腾的！</p><h1 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h1><p>过程中可能会有很多问题，当时也没来得及做记录，所以仅记录一些能想起来的问题吧！</p><h2 id="安装-WDA"><a href="#安装-WDA" class="headerlink" title="安装 WDA"></a>安装 WDA</h2><p>首先，可以先大概看一下<a href="https://zhuanlan.zhihu.com/p/32452473" target="_blank" rel="noopener">教你用 Python 来玩微信跳一跳</a>这篇文章，作者（@神器的战士）很厉害，他已经把跳一跳辅助 <a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">wechat_jump_game</a> 传到 github 上了，话不多说，按照 Wiki 里的步骤开干。</p><p>由于我的设备是 MacOs + iPhone ，故第一步是得安装一个 <a href="https://github.com/facebook/WebDriverAgent" target="_blank" rel="noopener">WebDriverAgent</a>，这个东西我简单理解就是一个 WebServer 驱动，可以远程控制 IOS 设备。类似于安卓里的 ADB 工具。可以参考这篇文章：<a href="https://testerhome.com/topics/7220" target="_blank" rel="noopener">iOS 真机如何安装 WebDriverAgent</a>。</p><p>照着操作，没毛病！当然前提是你得安装好了 xcode，没有的话直接在 AppStore 里搜索 xcode 就行。然后后面就是一路的坑。</p><ul><li>什么是证书？</li><li>什么是苹果开发者账号？</li><li>有没有免费的苹果开发者账号？</li><li>账号和证书啥关系？</li><li>免费的证书和收费的证书一样吗？</li><li>…</li></ul><p>由于是 IOS 开发小白，这些概念都不懂，所以走了很多弯路，因为照着 <a href="https://testerhome.com/topics/7220" target="_blank" rel="noopener">iOS 真机如何安装 WebDriverAgent</a> 这篇文章中的步骤操作，预料之中没有那么容易就成功。后来有网友说其实不用开发者账号，有个证书就行，某宝上买一个就行，然后就去某宝上搜索了半天，完全不懂，最后花 19 元买了一个证书，如下图：<br><img src="/images/taobao.png" alt=""></p><p>怀着忐忑的心，导入项目中，测试，然后果然也没通过！当然这里反复试了很多次，Google 了很多次，试过了很多能搜到的办法，依然没通过！看来是必须花 99$ 去买一个个人开发者账号了，不然这次装不了这个逼了，心中有点凉了半截了！因为我不想花几百块钱就为了装一次逼！</p><p>然后依然是 Google，偶然发现说 “其实真机调试不必花钱买个人开发者账号的，现在 xcode 已经很开放了，可以使用个人的账号（也就是你的 AppleID）升级为免费开发者账号”。没说的，低头就是干！</p><p>我使用了用来登录手机的 AppleID 做签名，然后依然是不通过，这里就不放图了。你得自己去亲自操作，自己去踩坑。到这里，心凉的差不多了！离我装逼的目标越来越远了！</p><p>感谢伟大的 Google，让我看到了这篇文章 <a href="http://www.applicationloader.net/blog/zh/1073.html" target="_blank" rel="noopener">【新功能】免99美金开发者账号真机调试测试教程</a>，有啥说的呢？跟着干啊！</p><p>这里强烈建议<strong>重新申请一个 AppleID，单独用来做这个操作，因为后面需要用到 AppleID 的密码，为了安全，不要使用用来登录手机的那个 AppleID</strong>。我就傻逼的用了自己登录手机的 AppleID，后来要用这个 AppleID 登录软件，执行一些操作，才发现这样不安全，所以赶紧重新申请了个新的 AppleID，然后重新更改了原来 AppleID 的密码。囧！</p><p>这里要注意，只需要两个文件就行了，不用跟着做到最后。</p><ul><li>申请ios测试证书（p12）</li><li>申请ios描述文件（mobileprovision）</li></ul><p><img src="/images/p12.png" alt=""><br><img src="/images/mobile.png" alt=""><br><img src="/images/p12mobile.png" alt=""></p><p>到这里，可以很开心继续之前的操作了，拿到项目中，导入进行证书签名，然后又他么失败了，GG!!</p><p>好吧，最后试了一下，需要更改 WebDriverAgentRunner Bundle Identifiler，随便加个后缀，比如我加了 “.s6”:<br><img src="/images/s6.png" alt=""></p><p>WebDriverAgentLib 的 Bundle Identifiler不用更改。</p><p>所以最终的 xocde 中关键地方有以下几处：</p><p><img src="/images/corea.png" alt=""><br><img src="/images/core2.png" alt=""></p><p>然后插上数据线，开始编译测试。这里可能会碰到很多问题，不过别着急，慢慢来，一个个解决。</p><p>碰到的问题现在回过头来已经没办法复现了，所以只能说，别着急，按照步骤来，碰到问题多 Google，反正最终编译安装成功后是这个样子的：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">01.343909</span>+<span class="number">0800</span> WebDriverAgentRunner-Runner[<span class="number">858</span>:<span class="number">330642</span>] +[CATransaction synchronize] called within transaction</span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">01.367036</span>+<span class="number">0800</span> WebDriverAgentRunner-Runner[<span class="number">858</span>:<span class="number">330642</span>] Running tests...</span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">02.340279</span>+<span class="number">0800</span> WebDriverAgentRunner-Runner[<span class="number">858</span>:<span class="number">330642</span>] Continuing to run tests <span class="keyword">in</span> the background with task ID <span class="number">1</span></span><br><span class="line">Test Suite <span class="string">'All tests'</span> started at <span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">03.064</span></span><br><span class="line">Test Suite <span class="string">'WebDriverAgentRunner.xctest'</span> started at <span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">03.065</span></span><br><span class="line">Test Suite <span class="string">'UITestingUITests'</span> started at <span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">03.066</span></span><br><span class="line">Test Case <span class="string">'-[UITestingUITests testRunner]'</span> started.</span><br><span class="line">    t =     <span class="number">0.00</span>s Start Test at <span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">03.067</span></span><br><span class="line">    t =     <span class="number">0.00</span>s Set Up</span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">03.098235</span>+<span class="number">0800</span> WebDriverAgentRunner-Runner[<span class="number">858</span>:<span class="number">330642</span>] Built at Jan  <span class="number">8</span> <span class="number">2018</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">55</span></span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">03.131709</span>+<span class="number">0800</span> WebDriverAgentRunner-Runner[<span class="number">858</span>:<span class="number">330642</span>] ServerURLHere-&gt;http:<span class="comment">//192.168.0.101:8100&lt;-ServerURLHere</span></span><br></pre></td></tr></table></figure><p>这是通过如下操作看到的：<br><img src="/images/console.png" alt=""></p><p>其中比较关键的控制台日志是：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S<span class="function"><span class="title">erverURLHere</span>-&gt;</span>http:<span class="comment">//192.168.0.101:8100&lt;-ServerURLHere</span></span><br></pre></td></tr></table></figure><p>192.168.0.101 就是 iPhone 设备的 ip 地址了。另外，手机上会有一个 WebDriverAgent App安装上。<br><img src="/images/iphoneweb.png" alt=""></p><p>到这里基本可以证明 WebDriverAgent 安装成功了。为了进一步验证，可以参考<a href="https://testerhome.com/topics/7220" target="_blank" rel="noopener">iOS 真机如何安装 WebDriverAgent</a>中关于端口转发一节。其中:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>imobiledevice</span><br></pre></td></tr></table></figure><p>可能会出现下面的问题：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># brew install imobiledevice</span><br><span class="line"><span class="keyword">Error: </span>No available formula with the name "imobiledevice"</span><br><span class="line">==&gt; Searching for a previously deleted formula (in the last month)...</span><br><span class="line"><span class="keyword">Error: </span>No previously deleted formula found.</span><br><span class="line">==&gt; Searching for similarly named formulae...</span><br><span class="line">==&gt; Searching local taps...</span><br><span class="line">This similarly named formula was found:</span><br><span class="line">libimobiledevice ✔</span><br><span class="line">To install it, run:</span><br><span class="line">  brew install libimobiledevice ✔</span><br><span class="line">==&gt; Searching taps...</span><br><span class="line">==&gt; Searching taps on GitHub...</span><br><span class="line"><span class="keyword">Error: </span>No formulae found in taps.</span><br></pre></td></tr></table></figure><p>按照提示来：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>libimobiledevice</span><br></pre></td></tr></table></figure><p>成功后，执行命令：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iproxy <span class="number">8100</span> <span class="number">8100</span></span><br></pre></td></tr></table></figure><p>然后访问：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//localhost:8100/status</span></span><br></pre></td></tr></table></figure><p>如果看到类似下面的 json 输出说明 WDA 运行成功了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"value"</span> : &#123;</span><br><span class="line">    <span class="attr">"state"</span> : <span class="string">"success"</span>,</span><br><span class="line">    <span class="attr">"os"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"iOS"</span>,</span><br><span class="line">      <span class="attr">"version"</span> : <span class="string">"11.2.1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"ios"</span> : &#123;</span><br><span class="line">      <span class="attr">"simulatorVersion"</span> : <span class="string">"11.2.1"</span>,</span><br><span class="line">      <span class="attr">"ip"</span> : <span class="string">"192.168.0.101"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"build"</span> : &#123;</span><br><span class="line">      <span class="attr">"time"</span> : <span class="string">"Jan  8 2018 17:00:58"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sessionId"</span> : <span class="string">"7E3A6F32-F529-4C42-9C65-3EF92FD993C6"</span>,</span><br><span class="line">  <span class="attr">"status"</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几番波折，终于安装好了 WDA，这过程中就可能碰到很多问题，就有可能让你放弃！好在我运气还不错，走到了这里，但这离装逼还很远！</p><h2 id="跳一跳辅助上场"><a href="#跳一跳辅助上场" class="headerlink" title="跳一跳辅助上场"></a>跳一跳辅助上场</h2><p>真机安装 WDA 可谓一波三折，好在现在终于可以玩游戏了。</p><p>废话不多说，当然首先下载 <a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">wechat_jump_game</a>：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/wangshub/wechat_jump_game </span><br><span class="line">cd wechat_jump_game</span><br></pre></td></tr></table></figure><p>这里推荐用虚拟环境（Virtualenv &amp;&amp; python3 ）来管理，不然你会碰到很多问题：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virtualenv venv</span><br><span class="line"><span class="keyword">source</span> venv<span class="regexp">/bin/</span>active</span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -r requirements.txt</span><br></pre></td></tr></table></figure><p>如果这一步碰到了安装问题，解决就好。</p><p><strong>接下来，就是见证奇迹的时刻：</strong></p><p>确保以下事情：</p><ul><li>WDA 运行成功</li><li>启动 iproxy 8100 8100 命令</li><li>手机页面到微信跳一跳开始界面<br>然后运行（当然前提还是跟着项目 <a href="https://github.com/wangshub/wechat_jump_game/wiki/Android-%E5%92%8C-iOS-%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4" target="_blank" rel="noopener">Wiki</a> 去做）：</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python3</span> wechat_jump_auto_iOS.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>你会很开心的！！！</p><p><strong>这里要注意的事情：</strong></p><ul><li>config.json 中参数 “press_coefficient” 设置成 1.32 跳一跳精确度较高（only for iPhone 7Plus）</li><li>可以先跑一下手动版的，再上自动版的</li></ul><blockquote><p>这里有个动图可以看一下</p></blockquote><p><img src="http://o8fj2jbwb.bkt.clouddn.com/wechat.gif" alt=""><br><img src="/images/bi2.png" alt=""></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>轻轻松松跑到900多分后，高兴后，想向我女朋友装个逼，结果一问，她说你是 81 分啊，我一脸懵逼，然后跑到 github 上才看到，原来大家早就在讨论了，有可能被腾讯反作弊了，或者分数异常没有提交成功。好吧，后来试了一些办法，目前能成功保存到排行榜上的分数是 659 分。</p><p>总的来说，为了成功装逼，需要程序做的一件事就是尽量模拟真人，具体来说：</p><ul><li>WDA 工具按压屏幕的点不要固定，尽量有个随机偏移</li></ul><p>具体来说是修改 jump 函数：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.tap_hold(random.uniform(<span class="number">100</span>, <span class="number">400</span>), random.uniform(<span class="number">100</span>, <span class="number">400</span>), press_time)</span><br></pre></td></tr></table></figure><ul><li>每跳一次延时一段时间，不要固定，尽量有随机偏移</li></ul><p>具体来说，main 函数 while 循环中：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="built_in">random</span>.<span class="built_in">uniform</span>(<span class="number">1</span>, <span class="number">2.2</span>))</span><br></pre></td></tr></table></figure><ul><li>不要连续跳，可以跳记下，停一段时间再跳</li></ul><p>具体可以参考 wechat_jump_auto.py 这个脚本，这个脚本是对于 Android 设备的。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">def main():</span><br><span class="line">    i, next_rest, next_rest_time = (<span class="number">0</span>, random.randrange(<span class="number">3</span>, <span class="number">10</span>),</span><br><span class="line">                                    random.randrange(<span class="number">5</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        pull_screenshot()</span><br><span class="line">        <span class="keyword">im</span> = Image.<span class="keyword">open</span>(<span class="string">"/images/1.png"</span>)</span><br><span class="line"></span><br><span class="line">        # 获取棋子和 board 的位置</span><br><span class="line">        piece_x, piece_y, board_x, board_y = find_piece_and_board(<span class="keyword">im</span>)</span><br><span class="line">        <span class="keyword">ts</span> = <span class="keyword">int</span>(time.time())</span><br><span class="line">        <span class="keyword">print</span>(<span class="keyword">ts</span>, piece_x, piece_y, board_x, board_y)</span><br><span class="line">        <span class="keyword">if</span> piece_x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        set_button_position(<span class="keyword">im</span>)</span><br><span class="line">        distance = math.<span class="built_in">sqrt</span>(</span><br><span class="line">            (board_x - piece_x) ** <span class="number">2</span> + (board_y - piece_y) ** <span class="number">2</span>)</span><br><span class="line">        jump(distance)</span><br><span class="line"></span><br><span class="line">        save_debug_creenshot(<span class="keyword">ts</span>, <span class="keyword">im</span>, piece_x, piece_y, board_x, board_y)</span><br><span class="line">        backup_screenshot(<span class="keyword">ts</span>)</span><br><span class="line">        <span class="keyword">im</span>.<span class="keyword">close</span>()</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        #这里设置跳几下停几秒，防止 ban</span><br><span class="line">        <span class="keyword">if</span> i == next_res<span class="variable">t:</span></span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'已经连续打了 &#123;&#125; 下，休息 &#123;&#125;s'</span>.format(i, next_rest_time))</span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(next_rest_time):</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">"程序将在 &#123;&#125;s 后继续"</span>.format(next_rest_time - <span class="keyword">j</span>))</span><br><span class="line">                time.<span class="keyword">sleep</span>(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'\n继续'</span>)</span><br><span class="line">            i, next_rest, next_rest_time = (<span class="number">0</span>, random.randrange(<span class="number">10</span>, <span class="number">30</span>),</span><br><span class="line">                                            random.randrange(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'下一次连续跳 &#123;&#125; 休息，下一次将休息 &#123;&#125;s'</span>.format(next_rest, next_rest_time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # 为了保证截图的时候应落稳了，多延迟一会儿，随机值防 ban</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"\n"</span>)</span><br><span class="line">        time.<span class="keyword">sleep</span>(random.uniform(<span class="number">1</span>, <span class="number">2.2</span>))</span><br></pre></td></tr></table></figure><ul><li>最好不要超过 1000 分，适可而止，逼装成功就行了</li><li>跑到一段时间，小人总会掉落，而且两个棋盘越近，跳跃精确度越低，算法可以再改进</li><li>…</li></ul><h1 id="装逼的意义思考"><a href="#装逼的意义思考" class="headerlink" title="装逼的意义思考"></a>装逼的意义思考</h1><p>逼应该是装成功了，还是挺开心的呢！</p><p>我觉得某件事有个点能吸引到你，让你投入其中做一些探索、研究，这是一件很好的事情。因为毕竟是因为有趣吸引了你啊，事情就是因为让你感到有趣，才让你有了动力！</p><p>另外，回顾整个过程，其实也不难，甚至很简单，但简单的事情不是每个人都可以做到！告诫自己，不要眼高手低，很多事没有想像中那么让你不屑一顾！</p><p>这让我又想起了开头提到的老罗的话，确实，知识这个东西，更多的是过程中你的收获和体验，那些才是你珍贵的财富！</p><p>说到这，我想起了一个问题，怎样来定义一个人？比如你自己，假如哪天你突然失忆了，忘记了以前发生过的所有事情。那么对于你身边的人来说，你还是你吗？</p><p>这个答案估计很不一样，我觉得是：<strong>你已经不是你了</strong>，那些称之为 “你” 的符号、烙印早已消失，那是时间的雕刻啊！每个时间点上时间对你的雕刻，那些才构成了一个个你，如果抹掉所有这些雕刻，你早已不是你了。</p><p>可见，过程显得多么重要！</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>继续刷分，目前能让好友能看到的最高分是 659，看能不能接近 1000 分！</p><p>洗洗睡吧，现在都凌晨 02:20 了！<strong>逼不停，探索不停！</strong></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/32452473" target="_blank" rel="noopener">教你用 Python 来玩微信跳一跳</a></li><li><a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">wechat_jump_game</a></li><li><a href="https://testerhome.com/topics/7220" target="_blank" rel="noopener">iOS 真机如何安装 WebDriverAgent</a></li><li><a href="http://www.applicationloader.net/blog/zh/1073.html" target="_blank" rel="noopener">新功能】免99美金开发者账号真机调试测试教程</a></li><li><a href="https://juejin.im/entry/5a4edc57518825732e2f18da" target="_blank" rel="noopener">微信跳一跳-最新可用技(zuo)巧(bi)！</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;最近挺火的微信跳一跳&quot;&gt;&lt;a href=&quot;#最近挺火的微信跳一跳&quot; class=&quot;headerlink&quot; title=&quot;最近挺火的微信跳一跳&quot;&gt;&lt;/a&gt;最近挺火的微信跳一跳&lt;/h1&gt;&lt;p&gt;最近新版微信的『跳一跳』小程序着实火了一把，也把小程序这个概念再次推波助澜了一波，看来以后小程序这个入口会有大作为。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;张小龙：一个好的 APP 应该是用完即走的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话对用户来说是个好消息，对其他创业者来说却可能会招来恶语相向。现在这个时代的步伐越来越快，大家好像都很忙，时间越来越珍贵。如果以后微信真的把小程序这个入口做好了，我觉得对于用户来说，是件好事，当然前提是做好了，比如安全性啥的，比如不会被外挂啥的！&lt;/p&gt;
&lt;p&gt;现在中午，吃完饭没事大家都会高呼 “来一波！来一波！”，就是微信小游戏『坦克大战』，3V3 玩得不亦乐乎！&lt;/p&gt;
&lt;p&gt;废话不多说，看着别人微信跳一跳几百分那么高的分，感觉坐不住了，为了装逼，所以有了这篇博文！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;林夕水共是我，这是目前能让好友看到的最高分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/bi.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://www.rebootcat.com/categories/linux/"/>
    
      <category term="python" scheme="http://www.rebootcat.com/categories/linux/python/"/>
    
      <category term="ios" scheme="http://www.rebootcat.com/categories/linux/python/ios/"/>
    
    
      <category term="python" scheme="http://www.rebootcat.com/tags/python/"/>
    
      <category term="matplotlib" scheme="http://www.rebootcat.com/tags/matplotlib/"/>
    
      <category term="wechat" scheme="http://www.rebootcat.com/tags/wechat/"/>
    
      <category term="ios" scheme="http://www.rebootcat.com/tags/ios/"/>
    
      <category term="wda" scheme="http://www.rebootcat.com/tags/wda/"/>
    
      <category term="macos" scheme="http://www.rebootcat.com/tags/macos/"/>
    
  </entry>
  
  <entry>
    <title>nginx 写⽇志对响应速度的影响探究（二）</title>
    <link href="http://www.rebootcat.com/2018/01/04/influence_of_dumplog_to_performance_of_nginx_2/"/>
    <id>http://www.rebootcat.com/2018/01/04/influence_of_dumplog_to_performance_of_nginx_2/</id>
    <published>2018-01-04T08:23:58.000Z</published>
    <updated>2020-04-18T16:29:28.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>问题的提出是为了精细化提高 nginx(marxxx) 的性能，遂分析写日志对于请求的影响，上一篇《<a href="http://rebootcat.com/2017/12/06/influence_of_dumplog_to_performance_of_nginx/" target="_blank" rel="noopener">nginx写日志对于响应速度的影响探究（一）</a>》中其实提出了两个问题还有待研究：</p><ul><li>log buffer 分别为 4k、64k、128k 不同情况下，相较而言 log buffer 为 64k 时 nginx 性能表现更优，这里的表现指 cpu 压满情况下 qps 更高。so why ?</li><li>request time 成周期性波动，周期为 60s，即大概每 60s request time 会出现一个突峰，如下图。so why ？<br><img src="/images/requesttimebodong.png" alt=""></li></ul><a id="more"></a><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>这里的记录将会比较简陋，因为完成之后发现实在没什么更好的干货，不过可以学习下探究的过程方法。</p><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><blockquote><p>log buffer 分别为 4k、64k、128k 不同情况下，相较而言 log buffer 为 64k 时 nginx 性能表现更优，这里的表现指 cpu 压满情况下 qps 更高。so why ?</p></blockquote><h3 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h3><p>发现这个问题后，有个直观的感觉就是 nginx 每次根据 log buffer 的大小 dump log，即每次写磁盘的大小分别为 4k、64k、128k，写磁盘的大小较小就会导致写的次数过多，写的大小过大就会导致每次耗时较多，在 dump log 的次数与 dump log 的大小之间需要做一个平衡，故相对来看 64k 时表现较优。</p><p>这里有点类似 iostat -x 命令看到的 avgrq-sz，表示设备读写块大小（扇区数）。</p><p>那么是不是这样呢？</p><h3 id="简单探究"><a href="#简单探究" class="headerlink" title="简单探究"></a>简单探究</h3><p>探究过程略，基本方法就是固定其他条件，改变某一个变量（log buffer 大小），然后分别测试 nginx 性能，收集数据，然后绘制曲线图，进行对比分析。</p><ul><li><p>log buffer = 4k<br><img src="/images/4k.png" alt=""></p></li><li><p>log buffer = 32k<br><img src="/images/32k.png" alt=""></p></li><li><p>log buffer = 64k/128k<br><img src="/images/64_128k.png" alt=""></p></li></ul><p>简单对比了小米监控收集的曲线图，还是能看到 log buffer 从 4k 到 32k，再到 64k/128k ，qps是增加了的。只是在 64k/128k 的时候比较不是很明显。</p><h3 id="初步结论"><a href="#初步结论" class="headerlink" title="初步结论"></a>初步结论</h3><p>通过上述对比，<strong>确实发现 log buffer 调整对 nginx 性能有影响，大致为 log buffer 64k 时性能最优！</strong></p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><blockquote><p>request time 成周期性波动，周期为 60s，即大概每 60s request time 会出现一个突峰，如下图。so why ？</p></blockquote><h3 id="猜想-1"><a href="#猜想-1" class="headerlink" title="猜想"></a>猜想</h3><p>一般周期性波动的可能考虑到周期性的一些命令，比如 crontab 的任务，故可能是由于这些定时脚本执行引发了系统的抖动。</p><h3 id="简单探究-1"><a href="#简单探究-1" class="headerlink" title="简单探究"></a>简单探究</h3><p>探究方法很简单，多次测试，对比。测试的时候也是固定其他条件不变，改变某一个变量进行研究。这里的变量可能需要考虑很多，比如最终这次研究考虑到的一些变量有：</p><ul><li>定时脚本影响</li><li>log on / log off 影响</li><li>压测客户端的请求稳定度</li><li>nginx 一些配置参数，比如 keep_alive影响</li><li>不同机器的影响</li><li>压测客户端与 nginx 是否位于同一台机器的影响</li></ul><p>可以看到上面考虑了很多，也是由于探究过程一步步深入，一步步考虑更多的。这里可以对每次探究的变量进行下解释：</p><h4 id="定时脚本"><a href="#定时脚本" class="headerlink" title="定时脚本"></a>定时脚本</h4><p>关闭这台机器所有定时任务，对比之前的曲线图。</p><h4 id="log-on-log-off"><a href="#log-on-log-off" class="headerlink" title="log on /log off"></a>log on /log off</h4><p>关闭日志与否也可能是导致 request time 周期性突峰的原因，故分别对两种情况进行对比压测。</p><h4 id="压测客户端请求稳定度"><a href="#压测客户端请求稳定度" class="headerlink" title="压测客户端请求稳定度"></a>压测客户端请求稳定度</h4><p>压测客户端能不能以均匀的速率稳定发出请求也可能导致 request time 周期性波动，这里的压测客户端先后使用了 wrk 和 ab 进行压测。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nohup wrk -c <span class="number">100</span> -t <span class="number">8</span> -d20m http:<span class="comment">//127.0.0.1:8088 -s /disk/ssd1/ngx/benchngx_logof</span></span><br><span class="line">f.lua &gt; /dev/<span class="literal">null</span> &amp; <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">ab -n <span class="number">5000000</span> -c <span class="number">8</span> -v <span class="number">3</span> -k http:<span class="comment">//127.0.0.1:8088/ |grep 'X-Time' |cut -d ' '</span></span><br><span class="line"> -f <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &gt;&gt; off8jv13.a</span><br></pre></td></tr></table></figure><p>其中 wrk -s 参数后面的是 lua 脚本：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Copyright 2017 smaug</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">write</span> = <span class="built_in">io</span>.<span class="built_in">write</span></span><br><span class="line"><span class="keyword">local</span> unique_id = <span class="built_in">tostring</span>( &#123;&#125; ):<span class="built_in">sub</span>(<span class="number">8</span>)</span><br><span class="line">filename = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"/disk/ssd1/ngx/donev2/off8j_%s.a"</span>,unique_id)</span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(filename,<span class="string">"a"</span>)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">output</span>(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = <span class="function"><span class="keyword">function</span><span class="params">(status, headers, body)</span></span></span><br><span class="line">   rtime = headers[<span class="string">"X-RTime"</span>]</span><br><span class="line">   ltime = headers[<span class="string">"X-LTime"</span>]</span><br><span class="line">   <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"[%s] %s\n"</span>,ltime ,rtime))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>每次请求后会执行函数，获取 header 中的某些字段，目的是<strong>在关闭日志后收集request time，由于 response body 很小，body 发送时间几乎可以忽略</strong>。此处 nginx 配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8088</span>;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">"hello world xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>;</span><br><span class="line">        <span class="comment">#proxy_pass http://127.0.0.1:8089;</span></span><br><span class="line">       <span class="comment">#access_log /disk/ssd1/jmh/access.log simple buffer=32k;</span></span><br><span class="line">       <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">       <span class="attribute">error_log</span>  <span class="literal">off</span>;</span><br><span class="line">       <span class="attribute">add_header</span>  X-RTime <span class="variable">$request_time</span>;</span><br><span class="line">       <span class="attribute">add_header</span>  X-LTime <span class="variable">$time_local</span>;</span><br><span class="line">       <span class="attribute">add_header</span>  X-Time <span class="string">'[<span class="variable">$time_local</span>] <span class="variable">$request_time</span>'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后过滤日志文件得到 request time，当然这是关闭日志的情况下，如果没有关闭日志，自然只需要分析 access.log 文件即可。</p><p>ab -v 参数可以获取 response header ，使用 linux 管道等命令收集 request time，也是在关闭日志的情况下。</p><h4 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep_alive"></a>keep_alive</h4><p>改变这个参数的值，进行对比压测。</p><h4 id="不同机器"><a href="#不同机器" class="headerlink" title="不同机器"></a>不同机器</h4><p>request time 波动的情况是否只是出现在这一台机器还是其他机器也会出现，故需要对比其他机器，对其他机器进行压测对比。</p><h4 id="压测客户端（wrk-ab）与-nginx-是否位于同一台机器"><a href="#压测客户端（wrk-ab）与-nginx-是否位于同一台机器" class="headerlink" title="压测客户端（wrk/ab）与 nginx 是否位于同一台机器"></a>压测客户端（wrk/ab）与 nginx 是否位于同一台机器</h4><p>压测客户端也是需要需要大量 cpu 资源的，甚至 I/O 资源，如果与 nginx 两者位于同一台机器，是否也可能对 nginx 产生影响呢？故让压测客户端从另外一台机器发起请求，然后对比分析。</p><h3 id="初步结论-1"><a href="#初步结论-1" class="headerlink" title="初步结论"></a>初步结论</h3><p><strong>很遗憾，经过上述的探究，没有得出很确切的结论，request time 波动情况一直存在，不过可以注意到的是对不同机器进行压测的时候，我选择了好几台机器，其中包括我自己本地的一台虚拟机，就没有出现 request time 波动的情况，初步可以怀疑是那批机器本身的一些问题，可能是内核方面的问题，因为那批机器内核是经过了裁剪的。但不能确定，依然是模凌两可的结论。</strong></p><h2 id="末了"><a href="#末了" class="headerlink" title="末了"></a>末了</h2><p>探究过程是一个比较无聊的过程，改变某个变量，重复的进行研究，想起了高中做的一些化学实验，确实比较无趣。</p><p><strong>但是很多问题不可能是暴露在表面的，而且埋的很深，甚至最后都没法找到确切的根源，这些就需要很细心的分析，考虑的也要很周全，要根据当前的情况考虑更多的可能性，要排除一切可能导致的原因。这种分析过程，这种全面考虑问题的能力能得到提高和锻炼！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;问题的提出是为了精细化提高 nginx(marxxx) 的性能，遂分析写日志对于请求的影响，上一篇《&lt;a href=&quot;http://rebootcat.com/2017/12/06/influence_of_dumplog_to_performance_of_nginx/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nginx写日志对于响应速度的影响探究（一）&lt;/a&gt;》中其实提出了两个问题还有待研究：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;log buffer 分别为 4k、64k、128k 不同情况下，相较而言 log buffer 为 64k 时 nginx 性能表现更优，这里的表现指 cpu 压满情况下 qps 更高。so why ?&lt;/li&gt;
&lt;li&gt;request time 成周期性波动，周期为 60s，即大概每 60s request time 会出现一个突峰，如下图。so why ？&lt;br&gt;&lt;img src=&quot;/images/requesttimebodong.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://www.rebootcat.com/categories/linux/"/>
    
      <category term="nginx" scheme="http://www.rebootcat.com/categories/linux/nginx/"/>
    
      <category term="lua" scheme="http://www.rebootcat.com/categories/linux/nginx/lua/"/>
    
    
      <category term="cpu" scheme="http://www.rebootcat.com/tags/cpu/"/>
    
      <category term="nginx" scheme="http://www.rebootcat.com/tags/nginx/"/>
    
      <category term="wrk" scheme="http://www.rebootcat.com/tags/wrk/"/>
    
      <category term="ab" scheme="http://www.rebootcat.com/tags/ab/"/>
    
      <category term="lua" scheme="http://www.rebootcat.com/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>CPU.IOWAIT 偏高问题《二》</title>
    <link href="http://www.rebootcat.com/2018/01/04/analyze-of-high-iowait/"/>
    <id>http://www.rebootcat.com/2018/01/04/analyze-of-high-iowait/</id>
    <published>2018-01-04T03:23:58.000Z</published>
    <updated>2020-04-18T16:29:28.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>今天是 2018 年 01 月 04 号，已经是 2018 年的第四天了，最近这几天一直在做年终总结，回顾自己整年的工作，成长，问题，计划新的一年。2017年对于我来说，”tough year”!发生了太多的事，太多太多的事，开心的，烦恼的，2017年初计划的事情没有一件让我自己满意，想想嘘嘘不已！</p><p>这几天好好的写一篇总结！2018年对我来说，很重要！</p><h1 id="回顾一下"><a href="#回顾一下" class="headerlink" title="回顾一下"></a>回顾一下</h1><p>上一篇文章 <a href="http://rebootcat.com/2017/12/14/instability-of-cpu/" target="_blank" rel="noopener">CPU.IOWAIT 偏高问题</a>中其实已经大致分析出了问题所在。</p><p>文中『Find The Murderer』章节也指出了可能造成 IOWAIT% 偏高的进程，但不够有说服力。故此文尝试进一步的分析造成 IOWAIT% 偏高的原因！</p><p><img src="/images/problem.png" alt=""></p><a id="more"></a><h1 id="查找最耗-IOWAIT-的进程"><a href="#查找最耗-IOWAIT-的进程" class="headerlink" title="查找最耗 IOWAIT 的进程"></a>查找最耗 IOWAIT 的进程</h1><p>造成 IOWAIT% 偏高的进程一定也是 I/O 操作比较频繁的进程，<a href="http://rebootcat.com/2017/12/14/instability-cpu-of-1umachine/" target="_blank" rel="noopener">CPU.IOWAIT 偏高问题</a>中使用了两种方法，第一种是使用 ps 命令查找状态码为 ‘D’ 的进程，这种方式找到的结果不够准确；第二种是使用 iotop 工具，这种方式可能存在的问题是机器内核版本定制过，部分模块可能没有，而 iotop 这个工具要求内核版本相对较高，虽然我做了一点修改，骗过了 iotop，让 iotop 能正常运行，但总之得到的结果可能不够准确。</p><p>基于以上的分析，有必要用另外的方法。那么如何统计每个进程的 I/O 数呢，进而找到 I/O 数最高的进程？下面是查找过程。</p><p>首先，关闭syslog:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dmesg -<span class="built_in">c</span></span><br><span class="line">/etc/<span class="keyword">init</span>.d/klogd stop</span><br></pre></td></tr></table></figure><p>接着下载一个 perl 脚本:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/true/</span>aspersa-mirror<span class="regexp">/blob/m</span>aster<span class="regexp">/iodump</span></span><br></pre></td></tr></table></figure><p>然后，打开 block_dump，这是内核关于 I/O 信息的一些日志：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">1</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/vm/</span>block_dump</span><br></pre></td></tr></table></figure><p>block_dump中设置非零值能够打开内核关于每一个 I/O 操作进行记录的开关，这时候可以看到内核已经收集到了 I/O 的日志：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost]# dmesg</span><br><span class="line">someprocess(<span class="number">1880</span>): READ block <span class="number">3830529728</span> on bcache1 (<span class="number">160</span> sectors)</span><br><span class="line">someprocess(<span class="number">1877</span>): READ block <span class="number">2492278208</span> on bcache2 (<span class="number">160</span> sectors)</span><br><span class="line">someprocess(<span class="number">1878</span>): READ block <span class="number">1407266528</span> on bcache3 (<span class="number">160</span> sectors)</span><br><span class="line">someprocess(<span class="number">1877</span>): WRITE block <span class="number">2671126368</span> on bcache2 (<span class="number">160</span> sectors)</span><br><span class="line">someprocess(<span class="number">1877</span>): WRITE block <span class="number">2671126528</span> on bcache2 (<span class="number">160</span> sectors)</span><br></pre></td></tr></table></figure><p>接下来就是对这些日志进行分析，这时就用到了 iodump 脚本：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">while</span> <span class="literal">true</span>; <span class="attribute">do</span> sleep <span class="number">1</span>; <span class="attribute">dmesg</span> -c; <span class="attribute">done</span> | perl iodump</span><br></pre></td></tr></table></figure><p>这时候可能会出错：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="string">bash:</span> <span class="string">perl:</span> command not found</span><br></pre></td></tr></table></figure><p>oho,这台机器没有 perl 环境，好吧，接着装一个好了:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.cpan.org/src/<span class="number">5.0</span>/<span class="keyword">perl</span>-<span class="number">5.26</span>.<span class="number">1</span>.tar.gz</span><br><span class="line">tar zxvf <span class="keyword">perl</span>-<span class="number">5.26</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="keyword">cd</span> <span class="keyword">perl</span>-<span class="number">5.26</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">./Configure -des -Dprefix=./localperl</span><br><span class="line"><span class="keyword">make</span> test</span><br><span class="line"><span class="keyword">make</span> install</span><br></pre></td></tr></table></figure><p>然后添加环境变量：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/root/mydir/localperl/bin</span></span><br></pre></td></tr></table></figure><p>重新执行命令:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">while</span> <span class="literal">true</span>; <span class="attribute">do</span> sleep <span class="number">1</span>; <span class="attribute">dmesg</span> -c; <span class="attribute">done</span> | perl iodump</span><br></pre></td></tr></table></figure><p>又抛错了？纳尼？</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can't <span class="keyword">locate</span> strict.pm in <span class="comment">@INC (you may need to install the strict module) (@</span>INC contains: /root/mydir/localperl/<span class="keyword">lib</span>/site_perl/<span class="number">5.20</span><span class="number">.1</span>/x86_64-linux /root/mydir/localperl/<span class="keyword">lib</span>/site_perl/<span class="number">5.20</span><span class="number">.1</span> /root/mydir/localperl/<span class="keyword">lib</span>/<span class="number">5.20</span><span class="number">.1</span>/x86_64-linux /root/mydir/localperl/<span class="keyword">lib</span>/<span class="number">5.20</span><span class="number">.1</span> .) at iodump <span class="keyword">line</span> <span class="number">34.</span></span><br></pre></td></tr></table></figure><p>好吧，设置下库路径:</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PERL5LIB=$<span class="symbol">PERL5LIB:</span>/root/mydir/localperl/<span class="class"><span class="keyword">lib</span></span></span><br></pre></td></tr></table></figure><p>重新运行命令，正常的话可以看到下面的输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost]# <span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> sleep <span class="number">1</span>; dmesg -c; done | ./localperl/bin/perl iodump</span><br><span class="line">TASK                   PID      TOTAL       READ      WRITE      DIRTY DEVICES</span><br><span class="line">someproce             <span class="number">1877</span>       <span class="number">7236</span>       <span class="number">5923</span>       <span class="number">1313</span>          <span class="number">0</span> sda3</span><br><span class="line">someproce             <span class="number">1879</span>       <span class="number">7206</span>       <span class="number">5877</span>       <span class="number">1329</span>          <span class="number">0</span> sda3</span><br><span class="line">jbd2/sda3<span class="number">-8</span>           <span class="number">1241</span>        <span class="number">235</span>          <span class="number">0</span>        <span class="number">235</span>          <span class="number">0</span> sda3</span><br><span class="line">kworker/u16:<span class="number">2</span>       <span class="number">949469</span>         <span class="number">84</span>          <span class="number">0</span>         <span class="number">84</span>          <span class="number">0</span> sda3, sda1</span><br><span class="line">jbd2/sda1<span class="number">-8</span>            <span class="number">509</span>         <span class="number">82</span>          <span class="number">0</span>         <span class="number">82</span>          <span class="number">0</span> sda1</span><br><span class="line">edge-speeds-ale    <span class="number">1265169</span>          <span class="number">3</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">0</span> sda3</span><br><span class="line">falcon-agent          <span class="number">4144</span>          <span class="number">2</span>          <span class="number">0</span>          <span class="number">2</span>          <span class="number">0</span> sda3</span><br><span class="line">falcon-agent          <span class="number">1831</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">wc                 <span class="number">1266086</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">curl               <span class="number">1266655</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">curl               <span class="number">1265033</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">wc                 <span class="number">1266089</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">falcon-agent        <span class="number">116709</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">bash               <span class="number">1264583</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda1</span><br><span class="line">falcon-agent          <span class="number">4142</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">wc                 <span class="number">1266083</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">falcon-agent          <span class="number">4150</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">falcon-agent        <span class="number">116710</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br></pre></td></tr></table></figure><p>统计结果很明白了，I/O 频繁的进程自然是导致 IOWAIT% 偏高的原因，那么根本原因还是硬件性能不足，磁盘 SSD 性能退化问题。</p><h1 id="告一段落"><a href="#告一段落" class="headerlink" title="告一段落"></a>告一段落</h1><p><a href="http://rebootcat.com/2017/12/14/instability-cpu-of-1umachine/" target="_blank" rel="noopener">CPU.IOWAIT 偏高问题</a>以及本篇文章，做了很多关于 I/O、CPU、磁盘的比较细的研究，这些手段和方法值得以后排查其他问题借鉴！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.xaprb.com/blog/2009/08/23/how-to-find-per-process-io-statistics-on-linux/" target="_blank" rel="noopener">How to find per-process I/O statistics on Linux</a></li><li><a href="http://www.opensoce.com/2302.html" target="_blank" rel="noopener">linux iowait过高的分析</a></li><li><a href="https://lenciel.com/2014/02/hunting-the-iowait-problem-maker/" target="_blank" rel="noopener">解决iowait过高的告警</a></li><li><a href="https://stackoverflow.com/questions/249570/how-can-i-record-what-process-or-kernel-activity-is-using-the-disk-in-gnu-linux" target="_blank" rel="noopener">How can I record what process or kernel activity is using the disk in GNU/Linux?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;今天是 2018 年 01 月 04 号，已经是 2018 年的第四天了，最近这几天一直在做年终总结，回顾自己整年的工作，成长，问题，计划新的一年。2017年对于我来说，”tough year”!发生了太多的事，太多太多的事，开心的，烦恼的，2017年初计划的事情没有一件让我自己满意，想想嘘嘘不已！&lt;/p&gt;
&lt;p&gt;这几天好好的写一篇总结！2018年对我来说，很重要！&lt;/p&gt;
&lt;h1 id=&quot;回顾一下&quot;&gt;&lt;a href=&quot;#回顾一下&quot; class=&quot;headerlink&quot; title=&quot;回顾一下&quot;&gt;&lt;/a&gt;回顾一下&lt;/h1&gt;&lt;p&gt;上一篇文章 &lt;a href=&quot;http://rebootcat.com/2017/12/14/instability-of-cpu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CPU.IOWAIT 偏高问题&lt;/a&gt;中其实已经大致分析出了问题所在。&lt;/p&gt;
&lt;p&gt;文中『Find The Murderer』章节也指出了可能造成 IOWAIT% 偏高的进程，但不够有说服力。故此文尝试进一步的分析造成 IOWAIT% 偏高的原因！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/problem.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://www.rebootcat.com/categories/linux/"/>
    
    
      <category term="cpu" scheme="http://www.rebootcat.com/tags/cpu/"/>
    
      <category term="iowait" scheme="http://www.rebootcat.com/tags/iowait/"/>
    
      <category term="iotop" scheme="http://www.rebootcat.com/tags/iotop/"/>
    
      <category term="iostat" scheme="http://www.rebootcat.com/tags/iostat/"/>
    
      <category term="perl" scheme="http://www.rebootcat.com/tags/perl/"/>
    
      <category term="kernel" scheme="http://www.rebootcat.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>CPU.IOWAIT 偏高问题</title>
    <link href="http://www.rebootcat.com/2017/12/14/instability-of-cpu/"/>
    <id>http://www.rebootcat.com/2017/12/14/instability-of-cpu/</id>
    <published>2017-12-14T03:23:58.000Z</published>
    <updated>2020-04-18T16:29:28.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>小米监控发现我自己的一台机器的cpu.iowait偏高，波动很严重。</p><p><img src="/images/problem.png" alt=""></p><a id="more"></a><p>那么是什么导致这个问题的产生呢？下面听我细细道来。</p><h1 id="探究过程"><a href="#探究过程" class="headerlink" title="探究过程"></a>探究过程</h1><blockquote><p>每当出现一个问题的时候，背后一定存在着因果关系，区别只是背后的因素隐藏的多深！</p></blockquote><p>这句话可以辩证的看待，不用过分纠结这句话本身，因为任何东西纠结到极致其实都失去了意义，比如普朗克时间内追求因果律就没有意义。</p><h2 id="分析途径"><a href="#分析途径" class="headerlink" title="分析途径"></a>分析途径</h2><p>问题出现后需要定位问题来源，离不开各种工具的辅助甚至人肉辅助。目前我手里现有的分析途径如下：</p><ul><li>小米监控</li><li>各种linux命令 &amp;&amp; 各种代码技能</li><li><strong>一颗充满兴趣的心</strong>（最重要的东西）</li></ul><h2 id="初步怀疑"><a href="#初步怀疑" class="headerlink" title="初步怀疑"></a>初步怀疑</h2><p>问题已经比较明确了，看着这么大幅度的波动，我<strong>首先怀疑的是小米监控的agent采集的数据是不是出了问题？</strong></p><p>小米监控的agent是每分钟采集一次数据，具体的计算方法应该是分析 <strong><a href="http://man7.org/linux/man-pages/man5/proc.5.html" target="_blank" rel="noopener">/proc/stat</a></strong> 文件。包括top命令也是分析这个文件得出的cpu占用率。那么我自己来分析这个文件试试。核心代码部分如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">'cat /proc/stat |grep "cpu "'</span></span><br><span class="line">ret = os.popen(cmd).readlines()[0]</span><br><span class="line">ret = ret.split()</span><br><span class="line">ret = ret[1:]</span><br><span class="line">total = 0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">  total += int(i)</span><br><span class="line"></span><br><span class="line">user = int(ret[0])</span><br><span class="line">nice = int(ret[1])</span><br><span class="line">system = int(ret[2])</span><br><span class="line">idle = int(ret[3])</span><br><span class="line">iowait = int(ret[4])</span><br><span class="line">irq = int(ret[5])</span><br><span class="line">softirq = int(ret[6])</span><br><span class="line">cpubusy = total - idle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user = float(user / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">nice = float(nice / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">system = float(system / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">idle = float(idle / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">iowait = float(iowait / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">irq = float(irq / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">softirq = float(softirq / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">cpubusy = float(cpubusy / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line"></span><br><span class="line">timestamp = int(time.time())</span><br><span class="line"></span><br><span class="line">STORE[<span class="string">'user'</span>] = user</span><br><span class="line">STORE[<span class="string">'nice'</span>] = nice</span><br><span class="line">STORE[<span class="string">'system'</span>] = system</span><br><span class="line">STORE[<span class="string">'idle'</span>] = idle</span><br><span class="line">STORE[<span class="string">'iowait'</span>] = iowait</span><br><span class="line">STORE[<span class="string">'irq'</span>] = irq</span><br><span class="line">STORE[<span class="string">'softirq'</span>] = softirq</span><br><span class="line">STORE[<span class="string">'cpubusy'</span>] = cpubusy</span><br><span class="line"></span><br><span class="line">STORE[<span class="string">'timestamp'</span>] = timestamp</span><br><span class="line">with open(CPUSTORE,<span class="string">'w'</span>) as fout:</span><br><span class="line">  fout.write(json.dumps(STORE))</span><br></pre></td></tr></table></figure><p>采集到的数据先暂存到redis:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">t1 = <span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'timestamp'</span>)</span><br><span class="line">t1 = int(t1)</span><br><span class="line">l1 = <span class="built_in">time</span>.localtime(t1)</span><br><span class="line">d1 = <span class="built_in">time</span>.strftime(<span class="string">'%d%H%M%S'</span>, l1)</span><br><span class="line">hostname = os.uname()[<span class="number">1</span>]</span><br><span class="line">skey = <span class="string">'scpu_%s'</span> % hostname</span><br><span class="line">hkey = <span class="string">'cpu_%s_%s'</span> % (hostname,d1)</span><br><span class="line">r.sadd(skey,hkey)</span><br><span class="line">r.hset(hkey,<span class="string">'timestamp'</span>,d1)</span><br><span class="line">r.hset(hkey,<span class="string">'cpubusy'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'cpubusy'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'user'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'user'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'nice'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'nice'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'system'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'system'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'idle'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'idle'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'iowait'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'iowait'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'irq'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'irq'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'softirq'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'softirq'</span>))</span><br><span class="line"><span class="comment">#每隔5s采集一次</span></span><br><span class="line"><span class="built_in">time</span>.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>所以最终redis里面的数据如下所示：<img src="/images/rediscpubusy.png" alt=""><br>有了数据，现在就缺一个前端的展示，很简单，<a href="https://www.hcharts.cn/" target="_blank" rel="noopener">highcharts</a>用起来，最终前端展示得到的曲线如下图：<img src="/images/p1.png" alt=""></p><p>可以看到这台机器的cpu.iowait确实波动很厉害，说明小米监控的agent采集到的数据是准确的。</p><p>那么：</p><ul><li>什么是cpu.iowait呢？</li><li>cpu.iowait过高是否说明了系统存在I/O问题？</li><li>是什么导致了cpu.iowait这么高？</li></ul><h2 id="iowait深入探究"><a href="#iowait深入探究" class="headerlink" title="iowait深入探究"></a>iowait深入探究</h2><p>%iowait表示什么？其实我自己也是一知半解，google了一番，找到讲的比较透彻的一篇文章：<a href="http://linuxperf.com/?p=33" target="_blank" rel="noopener">理解 %IOWAIT (%WIO)</a>，文中核心的两段话是：</p><blockquote><p>我们不妨采纳Linux的措辞，%iowait 表示在一个采样周期内有百分之几的时间属于以下情况：<strong>CPU空闲、并且有仍未完成的I/O请求。</strong></p></blockquote><blockquote><p>对 %iowait 常见的误解有两个：一是误以为 %iowait 表示CPU不能工作的时间，二是误以为 %iowait 表示I/O有瓶颈。</p></blockquote><p>看来%iowait偏高不能说明什么问题。根据定义，它需要同时满足<strong>CPU空闲和有仍未完成的I/O请求</strong>这两个条件，说明CPU其实有空闲的，而且空闲率很高，且落在CPU空闲状态的I/O很多，才导致iowait%偏高。</p><h3 id="CPU不能工作？"><a href="#CPU不能工作？" class="headerlink" title="CPU不能工作？"></a>CPU不能工作？</h3><p>为了证明CPU确实是有空闲的，仍然能进行工作，那么如果我把CPU压满，CPU没有了空闲，iowait%理应很低或者波动很小。所以简单写了一个cpu密集型的任务：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing import Pool</span><br><span class="line"></span><br><span class="line">def <span class="builtin-name">run</span>(num):</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    num += 1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"> <span class="built_in"> pool </span>= Pool(6)</span><br><span class="line">  pool.map(run,range(6))</span><br><span class="line">  pool.close()</span><br><span class="line">  pool.join()</span><br></pre></td></tr></table></figure><p>没错，就是这么简单！！</p><p>为了进行对比，故采取的方式为跑压力一段时间，然后撤掉压力再收集一段时间，最后的曲线图如下：<br><img src="/images/irukayali1.png" alt=""><br>局部放大之后：<br><img src="/images/irukayali2.png" alt=""></p><p>从这两幅曲线图可以很明显的看到cpu.busy压到了 70 ~ 90 ，波动范围变小了很多，同时cpu.iowait波动范围也很小了，对比撤掉压力之后的，可以说差别很大。从这里也证明了之前的猜想，<strong>CPU确实是有空闲的，也确实能进行工作，造成cpu.busy波动严重的指标就是cpu.iowait</strong>。那么是什么导致了cpu.iowait偏高，I/O是不是到了瓶颈呢？</p><h3 id="I-O存在瓶颈？"><a href="#I-O存在瓶颈？" class="headerlink" title="I/O存在瓶颈？"></a>I/O存在瓶颈？</h3><p>要分析I/O是不是存在瓶颈，必然要借助一些磁盘、I/O性能分析工具，通常分析磁盘性能的工具有iostat,sar等，分析I/O情况的有iotop等，同时结合小米监控的数据进行分析。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>xxx<span class="number">-008</span> ~]# iostat  -xk <span class="number">2</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           <span class="number">6.77</span>    <span class="number">0.00</span>    <span class="number">3.88</span>    <span class="number">4.31</span>    <span class="number">0.00</span>   <span class="number">85.05</span></span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await  svctm  %util</span><br><span class="line">sda               <span class="number">0.02</span>    <span class="number">10.39</span>  <span class="number">254.22</span>  <span class="number">104.63</span> <span class="number">12579.25</span>  <span class="number">5175.08</span>    <span class="number">98.95</span>     <span class="number">0.44</span>    <span class="number">1.21</span>   <span class="number">0.50</span>  <span class="number">17.79</span></span><br><span class="line">sdb               <span class="number">0.00</span>     <span class="number">5.04</span>   <span class="number">23.05</span>   <span class="number">23.75</span>  <span class="number">1375.87</span>  <span class="number">1809.86</span>   <span class="number">136.14</span>     <span class="number">0.34</span>    <span class="number">7.28</span>   <span class="number">5.69</span>  <span class="number">26.63</span></span><br><span class="line">sdc               <span class="number">0.00</span>     <span class="number">4.66</span>   <span class="number">23.00</span>   <span class="number">24.04</span>  <span class="number">1372.72</span>  <span class="number">1796.91</span>   <span class="number">134.77</span>     <span class="number">0.35</span>    <span class="number">7.41</span>   <span class="number">5.67</span>  <span class="number">26.67</span></span><br><span class="line">sdd               <span class="number">0.00</span>     <span class="number">6.23</span>   <span class="number">22.83</span>   <span class="number">18.82</span>  <span class="number">1356.25</span>  <span class="number">1697.11</span>   <span class="number">146.61</span>     <span class="number">0.39</span>    <span class="number">9.42</span>   <span class="number">6.17</span>  <span class="number">25.71</span></span><br><span class="line">sde               <span class="number">0.00</span>     <span class="number">7.01</span>   <span class="number">20.54</span>   <span class="number">19.57</span>  <span class="number">1227.02</span>  <span class="number">1724.81</span>   <span class="number">147.18</span>     <span class="number">0.10</span>    <span class="number">2.45</span>   <span class="number">8.01</span>  <span class="number">32.14</span></span><br></pre></td></tr></table></figure><p>关于iostat的各项参数解释如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rrqm</span>/<span class="selector-tag">s</span>:  每秒进行 <span class="selector-tag">merge</span> 的读操作数目。即 <span class="selector-tag">delta</span>(rmerge)/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">wrqm</span>/<span class="selector-tag">s</span>:每秒进行 <span class="selector-tag">merge</span> 的写操作数目。即 <span class="selector-tag">delta</span>(wmerge)/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">r</span>/<span class="selector-tag">s</span>:每秒完成的读 <span class="selector-tag">I</span>/<span class="selector-tag">O</span> 设备次数。即 <span class="selector-tag">delta</span>(rio)/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">w</span>/<span class="selector-tag">s</span>:每秒完成的写 <span class="selector-tag">I</span>/<span class="selector-tag">O</span> 设备次数。即 <span class="selector-tag">delta</span>(wio)/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">rsec</span>/<span class="selector-tag">s</span>:每秒读扇区数。即 <span class="selector-tag">delta</span>(rsect)/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">wsec</span>/<span class="selector-tag">s</span>:每秒写扇区数。即 <span class="selector-tag">delta</span>(wsect)/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">rkB</span>/<span class="selector-tag">s</span>:每秒读<span class="selector-tag">K</span>字节数。是 <span class="selector-tag">rsect</span>/<span class="selector-tag">s</span> 的一半，因为每扇区大小为<span class="selector-tag">512</span>字节。(需要计算)</span><br><span class="line"><span class="selector-tag">wkB</span>/<span class="selector-tag">s</span>:每秒写<span class="selector-tag">K</span>字节数。是 <span class="selector-tag">wsect</span>/<span class="selector-tag">s</span> 的一半。(需要计算)</span><br><span class="line"><span class="selector-tag">avgrq-sz</span>:平均每次设备<span class="selector-tag">I</span>/<span class="selector-tag">O</span>操作的数据大小 (扇区)。<span class="selector-tag">delta</span>(rsect+wsect)/<span class="selector-tag">delta</span>(rio+wio)</span><br><span class="line"><span class="selector-tag">avgqu-sz</span>:平均<span class="selector-tag">I</span>/<span class="selector-tag">O</span>队列长度。即 <span class="selector-tag">delta</span>(aveq)/<span class="selector-tag">s</span>/<span class="selector-tag">1000</span> (因为aveq的单位为毫秒)。</span><br><span class="line"><span class="selector-tag">await</span>:平均每次设备<span class="selector-tag">I</span>/<span class="selector-tag">O</span>操作的等待时间 (毫秒)。即 <span class="selector-tag">delta</span>(ruse+wuse)/<span class="selector-tag">delta</span>(rio+wio)</span><br><span class="line"><span class="selector-tag">svctm</span>:平均每次设备<span class="selector-tag">I</span>/<span class="selector-tag">O</span>操作的服务时间 (毫秒)。即 <span class="selector-tag">delta</span>(use)/<span class="selector-tag">delta</span>(rio+wio)</span><br><span class="line">%<span class="selector-tag">util</span>:一秒中有百分之多少的时间用于 <span class="selector-tag">I</span>/<span class="selector-tag">O</span> 操作，或者说一秒中有多少时间 <span class="selector-tag">I</span>/<span class="selector-tag">O</span> 队列是非空的。即 <span class="selector-tag">delta</span>(use)/<span class="selector-tag">s</span>/<span class="selector-tag">1000</span> (因为use的单位为毫秒)</span><br></pre></td></tr></table></figure><p>其中重点需要关注的是<strong>avgqu-sz、await、svctm、util</strong>这四个指标，这里推荐可以看一下这篇文章<a href="http://linuxperf.com/?p=156" target="_blank" rel="noopener">容易被误读的IOSTAT</a>，里面提到util和await两个指标要辩证的看待，并不绝对。对于util，由于当今世界的ssd已经具有较高的并行速度，即便util达到了100%也并不能证明磁盘利用率很高，await这个指标也没有较为标准的衡量。<strong>但是，我们可以借此来分析，作为参考</strong>，这是可以的。</p><p>同时，查看小米监控关于磁盘的各项数据(主要是disk.io.avgqu-sz、disk.io.util、disk.io.svctm、disk.io.await)：<br><img src="/images/opendisk.png" alt=""></p><p>上图可以看到这几个指标波动很大，disk.io.util波动幅度很大很严重；disk.io.await最大值竟然达到了1.252k；disk.io.svctm最大值竟然飙到了192.6；同时disk.io.avgqu-sz也波动，该指标是I/O量的衡量。<strong>猜测这台机器的SSD磁盘确实可能存在I/O性能问题。</strong></p><p>那么怎么验证呢？</p><h2 id="Find-The-Murderer"><a href="#Find-The-Murderer" class="headerlink" title="Find The Murderer"></a>Find The Murderer</h2><blockquote><p>一定要找到凶手！  《致命ID》</p></blockquote><p>上面的过程可谓拨开云雾见青天，经过一步一步的分析探究，最终得到了猜想：</p><blockquote><p><strong>猜测这台机器的SSD磁盘确实可能存在I/O性能问题。</strong></p></blockquote><p>那么怎么来验证呢？很简单，找到造成这些I/O的凶手就行！怎么找，过程中我先后使用了两种方法。</p><h3 id="Process-Status-D"><a href="#Process-Status-D" class="headerlink" title="Process  Status D"></a>Process  Status D</h3><p>ps 命令可以查看有关进程的详细信息，比如状态码，关于进程状态码的解释如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PROCESS STATE CODES</span><br><span class="line">       D   uninterruptible sleep (usually IO)</span><br><span class="line">       R   runnable (<span class="keyword">on</span> <span class="title">run</span> <span class="title">queue</span>)</span><br><span class="line">       S   sleeping</span><br><span class="line">       T   traced <span class="keyword">or</span> stopped</span><br><span class="line">       Z   <span class="keyword">a</span> defunct (<span class="string">"zombie"</span>) <span class="built_in">process</span></span><br><span class="line"></span><br><span class="line">       For BSD formats <span class="keyword">and</span> when <span class="keyword">the</span> <span class="string">"stat"</span> keyword is used, additional letters may be displayed:</span><br><span class="line">       W   has no resident pages</span><br><span class="line">       &lt;   high-priority <span class="built_in">process</span></span><br><span class="line">       N   low-priority task</span><br><span class="line">       L   has pages locked <span class="keyword">into</span> memory (<span class="keyword">for</span> real-<span class="built_in">time</span> <span class="keyword">and</span> custom IO)</span><br></pre></td></tr></table></figure><p>其中重点关注的状态码为<strong>D</strong>，它表示不可中断的休眠状态，通常表示I/O操作。这就很简单了，要找到进行I/O操作的进程，写个脚本抓一下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">def run():</span><br><span class="line">  <span class="built_in">result</span> = []</span><br><span class="line">  timestamp = <span class="built_in">time</span>.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, <span class="built_in">time</span>.localtime(<span class="built_in">time</span>.<span class="built_in">time</span>()))</span><br><span class="line">  cmd = <span class="string">'ps auxf'</span></span><br><span class="line">  ret = os.popen(cmd).readlines()</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">    <span class="keyword">item</span> = i.<span class="built_in">split</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="keyword">item</span>) &gt; <span class="number">7</span>:</span><br><span class="line">      <span class="keyword">item</span> = <span class="keyword">item</span>[<span class="number">7</span>]</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">item</span> == <span class="string">'D'</span>:</span><br><span class="line">        <span class="built_in">result</span>.append(i)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">result</span>:</span><br><span class="line">    <span class="built_in">process</span> = <span class="string">'%s %s'</span> % ( timestamp,r[:<span class="number">-1</span>])</span><br><span class="line">    print <span class="built_in">process</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">result</span>:</span><br><span class="line">    print <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  <span class="keyword">while</span> True:</span><br><span class="line">    run()</span><br><span class="line">    <span class="built_in">time</span>.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>最终得到的结果如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">378315</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">27</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">5</span>:<span class="number">18</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">378337</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">27</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">7</span>:<span class="number">34</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">378339</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">27</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">7</span>:<span class="number">36</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">378340</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">27</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">7</span>:<span class="number">37</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">378343</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">27</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">7</span>:<span class="number">40</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">378344</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">27</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">7</span>:<span class="number">41</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">382918</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">31</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">3</span>:<span class="number">1</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">383821</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">31</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">6</span>:<span class="number">8</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384627</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">3</span>:<span class="number">2</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384638</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">3</span>:<span class="number">3</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384640</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">0</span>:<span class="number">0</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384642</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">4</span>:<span class="number">0</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384643</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">4</span>:<span class="number">1</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384644</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">4</span>:<span class="number">3</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384645</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">4</span>:<span class="number">4</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384654</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">2</span>:<span class="number">10</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384655</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">2</span>:<span class="number">11</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384656</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">2</span>:<span class="number">12</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384659</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">5</span>:<span class="number">1</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384660</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">5</span>:<span class="number">2</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384661</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">5</span>:<span class="number">3</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384662</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">5</span>:<span class="number">4</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384663</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">5</span>:<span class="number">5</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">393220</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">36</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">3</span>:<span class="number">4</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">393222</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">36</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> nobody   <span class="number">2646439</span>  <span class="number">2.5</span>  <span class="number">1.1</span> <span class="number">2626256</span> <span class="number">191388</span> ?      D    Dec04 <span class="number">369</span>:<span class="number">05</span>      \_ nginx: worker process</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> nobody   <span class="number">2646440</span>  <span class="number">2.9</span>  <span class="number">1.1</span> <span class="number">2029968</span> <span class="number">185368</span> ?      D    Dec04 <span class="number">422</span>:<span class="number">39</span>      \_ nginx: worker process</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> nobody   <span class="number">2646441</span>  <span class="number">2.5</span>  <span class="number">1.2</span> <span class="number">3371008</span> <span class="number">208164</span> ?      D    Dec04 <span class="number">363</span>:<span class="number">58</span>      \_ nginx: worker process</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> nobody   <span class="number">2646442</span>  <span class="number">3.4</span>  <span class="number">1.1</span> <span class="number">2337132</span> <span class="number">188544</span> ?      D    Dec04 <span class="number">490</span>:<span class="number">30</span>      \_ nginx: worker process</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> nobody   <span class="number">2646443</span>  <span class="number">2.5</span>  <span class="number">1.1</span> <span class="number">2646092</span> <span class="number">195748</span> ?      D    Dec04 <span class="number">371</span>:<span class="number">57</span>      \_ nginx: worker process</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> nobody   <span class="number">2646445</span>  <span class="number">4.6</span>  <span class="number">1.1</span> <span class="number">2576596</span> <span class="number">195664</span> ?      D    Dec04 <span class="number">662</span>:<span class="number">33</span>      \_ nginx: worker process</span><br></pre></td></tr></table></figure><p>这里发现有nginx进程，这个并不奇怪，但是也有大量的kworker进程，一脸懵逼！</p><h3 id="使用iotop"><a href="#使用iotop" class="headerlink" title="使用iotop"></a>使用iotop</h3><p>这台机器没有这个工具，本地下载了iotop的源码包后传上去，运行抛错：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Could <span class="keyword">not</span> <span class="builtin-name">run</span> iotop as some of the requirements are <span class="keyword">not</span> met:</span><br><span class="line">- Linux &gt;= 2.6.20 with</span><br><span class="line">  - I/O<span class="built_in"> accounting </span>support (CONFIG_TASKSTATS, CONFIG_TASK_DELAY_ACCT, CONFIG_TASK_IO_ACCOUNTING)</span><br></pre></td></tr></table></figure><p>错误的原因很明显，内核版本不对，因为这台机器是裁剪了linux内核并重新进行了命名，那么怎么办？</p><p>也很简单，修改iotop/data.py，注释掉下面这段代码就行，骗一下iotop:</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">'''</span><br><span class="line">if not ioaccounting or not vm<span class="emphasis">_event_</span>counters:</span><br><span class="line"><span class="code">    print('Could not run iotop as some of the requirements are not met:')</span></span><br><span class="line"><span class="code">    print('- Linux &gt;= 2.6.20 with')</span></span><br><span class="line"><span class="code">    if not ioaccounting:</span></span><br><span class="line"><span class="code">        print('  - I/O accounting support ' \</span></span><br><span class="line"><span class="code">          '(CONFIG_TASKSTATS, CONFIG_TASK_DELAY_ACCT, ' \</span></span><br><span class="line"><span class="code">          'CONFIG_TASK_IO_ACCOUNTING)')</span></span><br><span class="line"><span class="code">    if not vm_event_counters:</span></span><br><span class="line"><span class="code">        print('  - VM event counters (CONFIG_VM_EVENT_COUNTERS)')</span></span><br><span class="line"><span class="code">    sys.exit(1)</span></span><br><span class="line">'''</span><br></pre></td></tr></table></figure><p>iotop命令的使用很简单，我常用命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> iotop.<span class="keyword">py</span> -<span class="keyword">o</span></span><br></pre></td></tr></table></figure><p> <strong>-o</strong>参数表示：only show processes or threads actually doing I/O。</p><p> <strong>在寻找进行I/O操作的进程的同时，我同时也打开了iostat命令，重点关心%iowait，看当有I/O操作的时候%iowait是不是变高了，两个命令均是动态运行，所以能够抓到同时产生的现象</strong>：<br> <img src="/images/iotop_iostat.png" alt=""></p><p>如上图所示，屏幕左右两边是同时产生的结果，左边iotop抓到了产生大量I/O操作的进程，同时屏幕右半边最下面iostat命令输出%iowait从一个很低的值 0.25 飙升到了 51.71，同时注意avgqu-sz、await、svctm三个指标，三个指标均出现了大幅度的增加。从这里就可以肯定的说明<strong>系统I/O确实存在问题，I/O操作量较大的进程也找到了。</strong> </p><p> 这里也出现了大量的kworker进程，那么到底kworker是什么？谷歌了一番：</p><ul><li><a href="https://askubuntu.com/a/421916" target="_blank" rel="noopener">what is kworker</a></li></ul><p>简而言之，kworker进程是内核在做一些工作，比如系统调用等等。这里的kworker伴随着X进程大量出现，可以猜测是bear进程进行的一些系统调用。</p><p>到这里，其实已经可以得出结论了。</p><h1 id="最终结论"><a href="#最终结论" class="headerlink" title="最终结论"></a>最终结论</h1><p>经过上述的探究，可以得到如下的结论：</p><p><strong>系统存在I/O瓶颈，这台机器的SSD系统盘有性能退化问题。</strong></p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>整个探究过程经过了大概3天左右的时间，相对来说还是有点复杂，有些时候信息太多也不是一件好事，因为太多的信息反而会让你忽视掉一些东西，我说的是小米监控上的数据，小米监控上的指标太多了，而且精度也不算很高。探究问题的过程就是慢慢的把复杂的繁杂的信息简化剥离成清晰明了的东西。没错！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;小米监控发现我自己的一台机器的cpu.iowait偏高，波动很严重。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/problem.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://www.rebootcat.com/categories/linux/"/>
    
      <category term="python" scheme="http://www.rebootcat.com/categories/linux/python/"/>
    
      <category term="open-falcon" scheme="http://www.rebootcat.com/categories/linux/python/open-falcon/"/>
    
    
      <category term="cpu" scheme="http://www.rebootcat.com/tags/cpu/"/>
    
      <category term="iowait" scheme="http://www.rebootcat.com/tags/iowait/"/>
    
      <category term="iotop" scheme="http://www.rebootcat.com/tags/iotop/"/>
    
      <category term="iostat" scheme="http://www.rebootcat.com/tags/iostat/"/>
    
      <category term="open-falcon" scheme="http://www.rebootcat.com/tags/open-falcon/"/>
    
  </entry>
  
  <entry>
    <title>nginx 写日志对响应速度的影响探究（一）</title>
    <link href="http://www.rebootcat.com/2017/12/06/influence_of_dumplog_to_performance_of_nginx/"/>
    <id>http://www.rebootcat.com/2017/12/06/influence_of_dumplog_to_performance_of_nginx/</id>
    <published>2017-12-06T03:23:58.000Z</published>
    <updated>2020-04-18T16:29:28.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="惯例闲聊"><a href="#惯例闲聊" class="headerlink" title="惯例闲聊"></a>惯例闲聊</h1><p>现在是杭州的冬天，鼻炎让我一直难受，特别不舒服，鼻子快被我拧坏了，最近过的也很糟心，各种烦心事，几乎一周一件烦心事甚至一周好几件烦心事，最近过得感觉很不好！以前我感觉我自己很潇洒，很酷，现在越来越发现我不酷了，连自身形象我都懒得去整理了，胡子一周不想剃，衣服放一周不想洗，头发每天乱糟糟的，几乎每天都不敢去看镜子了。</p><p>真的很不喜欢冬天！不喜欢冷！不喜欢浑浑噩噩！不喜欢越来越没激情！</p><p>这已经是2017年的最后一个月了，回想年初定下的目标，几乎没有一件事达成或满意，一直想学的茶道一直也没去做，茶具也没买，骑车这件大事也慢慢落下了，身体也慢慢垮了，唯一感觉工作本身成长很大，这样下去不行的！</p><p>好了，废话不多说，这篇博文是完完全全的工作内容，所以内容会很技术，很严肃很干货。</p><h1 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h1><p>为了精细化提高 nginx(marxxx) 的性能, 现分析写日志对于请求的影响。</p><ul><li>条件</li></ul><ol><li>日志大小为 500 字节</li><li>响应大小  111 字节</li><li>除日志外 nginx 服务不进行任何 io 操作，使用 nginx 语法直接返回响应</li></ol><ul><li>变量</li></ul><ol><li>qps服务压力了决定的磁盘承受的写日志的压力</li><li>request time分布</li><li>nginx log buffer: 分别测试 log buffer 为 4k,  64k, 128k 以及关闭log的情况</li></ol><h1 id="探究结论"><a href="#探究结论" class="headerlink" title="探究结论"></a>探究结论</h1><a id="more"></a><p>1 . 关闭日志与否</p><p><strong>开启log的情况下，request time波动明显，也即nginx提供服务的功率不稳定；而关闭日志后，request time波动微小，几乎可以忽略，也即nginx能提供更为稳定的服务，说明写日志操作对nginx的输出功率的稳定性具有关键性影响。因此线上的服务，对于要求较为苛刻的大客户可以考虑关闭日志，提供更为稳定更为高性能的服务。</strong></p><p>2 . log buffer的大小</p><p><strong>探究过程中发现log buffer 分别为4k、64k、128k下，nginx的性能表现不同，log buffer 为 64k 情况下表现相对更优，这里的表现指qps相对更高，request time相对更低。关于该条结论更为详细的探究将在（二）中描述。</strong></p><p><strong>另外，log buffer调大对cpu利用率下降，大约下降 0% ~ 5%。</strong></p><p>3 . 磁盘压力</p><p><strong>整体来看，记录日志导致的磁盘压力并没有很高，但不同的log buffer磁盘压力不一样。</strong></p><h1 id="探究过程"><a href="#探究过程" class="headerlink" title="探究过程"></a>探究过程</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于条件的限制，在响应为 111 字节（实际情况为132字节），request time很小，几乎都是0ms、1ms，对后面分析不利，故调整了ngxin.conf的配置，使用连续多跳的机制，比如从 8088 端口，到 8089 再到 8090 再到8091 …最后返回。这样增大了request time的同时避免了其他的任何IO操作。</p><p><strong>故下文会出现4k8j，64k8j的字样，代表的意思如下：</strong></p><ul><li><strong>4K8j: 表示log buffer为 4k，在ngxin内部经过了 8 个端口(8 jump)</strong></li><li><strong>64k8j: 表示log buffer为 64k，在nginx内部经过了 8 个端口(8 jump)</strong></li><li><strong>128K8j: 表示log buffer为 128k，在ngxin内部经过了 8 个端口(8 jump)</strong></li><li><strong>128k2j: 表示log buffer为 128k，在nginx内部经过了 2 个端口(2 jump)</strong></li><li><strong>off8j: 表示关闭了log，在nginx内部经过了 8 个端口(8 jump)</strong></li><li><strong>off8jvx: 表示关闭日志后，调整了其他变量再次进行研究，简单理解为第几版本</strong></li></ul><h2 id="探究方法"><a href="#探究方法" class="headerlink" title="探究方法"></a>探究方法</h2><p>1 . 使用小米监控，编写脚本采集不同条件下的指标（精度有限，只做参考）</p><ul><li>nginx status 开启，编写小米监控脚本收集连接数，请求数等，目标指标是nginx的qps</li><li>编写小米监控脚本计算nginx平均每个worker占用的cpu(%)情况</li><li>request time的采集使用抽样方式，每分钟取access.log的后1000条日志计算平均request time</li></ul><p>2 . 搭建nginx，收集压测日志</p><ul><li>使用wrk压测，结合lua脚本。lua脚本功能是当关闭日志后通过nginx 将request time写到响应头（body 132字节，忽略body发送时间），分析每次请求的响应头过滤request time</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup wrk -c <span class="number">100</span> -t <span class="number">8</span> -d20m http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8088</span> -s <span class="regexp">/disk/</span>ssd1<span class="regexp">/ngx/</span>benchngx_logoff.lua &gt; <span class="regexp">/dev/</span>null &amp; <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>使用ab压测，排除压测客户端本身带来的影响，比如提供http请求的稳定度</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n <span class="number">5000000</span> -c <span class="number">8</span>  -v <span class="number">3</span>   -k http:<span class="comment">//127.0.0.1:8088/   |grep 'X-Time'  |cut -d ' ' -f 2,3,4  &gt;&gt; off8jv13.a</span></span><br></pre></td></tr></table></figure><ul><li>分析大量日志，计算指标间关系，绘制关系图。使用到python/redis/highcharts</li></ul><h2 id="探究过程记录"><a href="#探究过程记录" class="headerlink" title="探究过程记录"></a>探究过程记录</h2><p>1 . <strong>log buffer = 4k &amp;&amp; 8 jump</strong></p><ul><li><p>小米监控的结果（qps，cpu，request time，磁盘指标）<br><img src="/images/4k8j_falcon.png" alt=""><br><img src="/images/4k8j_falcon_disk.png" alt=""></p></li><li><p>日志分析<br><img src="/images/4k8j_iruka_a.png" alt=""><br><img src="/images/4k8j_iruka_b.png" alt=""></p></li></ul><p><strong><em>局部放大后：</em></strong><br><img src="/images/4k8j_iruka_bb.png" alt=""><br><img src="/images/4k8j_iruka_c.png" alt=""><br><strong><em>局部放大后：</em></strong><br><img src="/images/4k8j_iruka_cc.png" alt=""></p><ul><li>初步分析结果：</li></ul><p>a . 从小米监控来看，压测过程几乎跑满了cpu，平均每个worker的cpu在92%左右，qps在 120.5k 左右，磁盘压力不算大</p><p>b . 分析大量日志来看，qps比较稳定，在 120k ~ 125k之间，request time在 12ms ~ 13ms之间，也比较稳定。两者之间的关系，qps随request time增加有所下降</p><p>2 . <strong>log buffer = 64k &amp;&amp; 8 jump</strong></p><ul><li><p>小米监控的结果（qps，cpu，request time，磁盘指标）<br><img src="/images/64k8j_falcon.png" alt=""><br><img src="/images/64k8j_falcon_disk.png" alt=""></p></li><li><p>日志分析<br><img src="/images/64k8j_iruka_a.png" alt=""><br><img src="/images/64k8j_iruka_b.png" alt=""></p></li></ul><ul><li>初步分析结果：</li></ul><p>a . 从小米监控来看，压测过程ngxin的平均每个worker跑到88%左右的cpu，相较上面log buffer为 4k 的情况有所下降，qps平均为124k，有所上升；磁盘压力不大</p><p>b . 分析大量日志来看，qps比较稳定，在 120k ~ 125k之间，request time在 12ms ~ 13ms之间，也比较稳定。两者之间的关系，qps随request time增加有所下降</p><p>3 . <strong>log buffer = 128k &amp;&amp; 8 jump</strong></p><ul><li><p>小米监控的结果（qps，cpu，request time，磁盘指标）<br><img src="/images/128k8j_falcon.png" alt=""><br><img src="/images/128k8j_falcon_disk.png" alt=""></p></li><li><p>日志分析<br><img src="/images/128k8j_iruka_a.png" alt=""><br><img src="/images/128k8j_iruka_b.png" alt=""></p></li><li><p>初步分析结果：</p></li></ul><p>a . 从小米监控来看，nginx平均每个worker跑到 87% cpu，qps在 123.6k 左右。磁盘压力不大</p><p>b .分析大量日志来看，qps比较稳定，在 120k ~ 130k之间，request time在 12ms ~ 13ms之间，也比较稳定。两者之间的关系，qps随request time增加有所下降</p><p>4 . <strong>log buffer = 128k &amp;&amp; 2 jump</strong></p><ul><li><p>日志分析<br><img src="/images/128k2j_iruka_a.png" alt=""><br><img src="/images/128k2j_iruka_b.png" alt=""></p></li><li><p>初步分析结果：</p></li></ul><p>a . 分析大量日志来看，qps在 150k  ~ 170k之间，并且qps相对不稳定。request time在 2ms ~ 3ms之间</p><p>5 . <strong>log off &amp;&amp; 8 jump</strong><br><img src="/images/off8j_falcon.png" alt=""><br><img src="/images/off8j_falcon_disk.png" alt=""><br><img src="/images/off8j_iruka_a.png" alt=""><br><img src="/images/off8j_iruka_c.png" alt=""><br><img src="/images/off8j_iruka_d.png" alt=""></p><ul><li>初步分析结果：</li></ul><p>a . 压测nginx平均每个worker跑满88%左右的cpu，qps在128k左右，是同样条件下qps最高的，磁盘压力很小。</p><p>b. 图中可以看到关闭日志后request time相较其他几种情况很平稳，几乎是一条直线的状态</p><p>c. 所以可以考虑线上某些要求较为苛刻的客户针对性的关闭日志，提高服务的稳定性</p><p>d. request time有周期性（后面有说到）</p><p>6 . <strong>汇总来看</strong><br><img src="/images/sum_iruka_a.png" alt=""><br><img src="/images/sum_iruka_b.png" alt=""></p><ul><li>初步分析结果：</li></ul><p>a . 从汇总的结果来看，抛开128k2j的那项，其他几个（4k8j,64k8j,128k8j）几乎都是重合状态，说明log buffer的大小对qps的影响不大，同时对request time的影响也不大</p><p>b . 128k2j的那项明显qps高出其他几项好多，同时request time低的也很明显</p><p>7 . <strong>其他分析</strong><br><img src="/images/iruka_d.png" alt=""><br><img src="/images/iruka_e.png" alt=""><br><img src="/images/iruka_f.png" alt=""></p><ul><li><p>初步分析结果：</p><p>a . request time凸峰的时候，qps凹峰，即request time增加，qps减少</p><p>b . log buffer 分别为4k，64k，128k的情况下，<strong>log buffer 为64k的情况下表现最优（原因？将在《二》里详细分析）</strong></p></li></ul><h2 id="探究过程的难点"><a href="#探究过程的难点" class="headerlink" title="探究过程的难点"></a>探究过程的难点</h2><ul><li>通过小米监控采集的指标精度很差，而且探究过程中由于小米监控自身的问题，导致很多曲线数据丢失，像类似cpu，磁盘压力等指标只能作为参考</li><li>日志的分析相对是比较精确的，但问题是数据量很大，由于qps在十万以上，压测10分钟，日志量可能就有接近10~15G,所以最后分析的样本总大小160G，这是一个比较大的数据量了。但从日志里只能分析得到qps，request time等指标</li><li>整个过程很难得出比较明确的结论，由于精度的问题，另外有其他变量的影响，分析得到的结论不会有很巨大的差距，得出很明确的结论。所以最终结论只能参考</li><li>当探究的精度更高的时候往往目标指标更容易受到其他变量的影响，要排除这些因素往往要做很多次测试，一次次排除分析，而且不一定找对影响变量，整体来讲，精细化的探究受其他因素影响较为敏感，探究更难</li></ul><h1 id="意外发现"><a href="#意外发现" class="headerlink" title="意外发现"></a>意外发现</h1><p>关闭或者不关闭日志的情况下，request time以每分钟的周期波动，如下：<br><img src="/images/iruka_zhouqi_a.png" alt=""><br><img src="/images/iruka_zhouqi_b.png" alt=""><br><img src="/images/iruka_zhouqi_c.png" alt=""><br>从上面三福图可以看出，request time成周期性波动，周期为60s。关于这块的深入探究另起篇幅进行研究。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;惯例闲聊&quot;&gt;&lt;a href=&quot;#惯例闲聊&quot; class=&quot;headerlink&quot; title=&quot;惯例闲聊&quot;&gt;&lt;/a&gt;惯例闲聊&lt;/h1&gt;&lt;p&gt;现在是杭州的冬天，鼻炎让我一直难受，特别不舒服，鼻子快被我拧坏了，最近过的也很糟心，各种烦心事，几乎一周一件烦心事甚至一周好几件烦心事，最近过得感觉很不好！以前我感觉我自己很潇洒，很酷，现在越来越发现我不酷了，连自身形象我都懒得去整理了，胡子一周不想剃，衣服放一周不想洗，头发每天乱糟糟的，几乎每天都不敢去看镜子了。&lt;/p&gt;
&lt;p&gt;真的很不喜欢冬天！不喜欢冷！不喜欢浑浑噩噩！不喜欢越来越没激情！&lt;/p&gt;
&lt;p&gt;这已经是2017年的最后一个月了，回想年初定下的目标，几乎没有一件事达成或满意，一直想学的茶道一直也没去做，茶具也没买，骑车这件大事也慢慢落下了，身体也慢慢垮了，唯一感觉工作本身成长很大，这样下去不行的！&lt;/p&gt;
&lt;p&gt;好了，废话不多说，这篇博文是完完全全的工作内容，所以内容会很技术，很严肃很干货。&lt;/p&gt;
&lt;h1 id=&quot;问题提出&quot;&gt;&lt;a href=&quot;#问题提出&quot; class=&quot;headerlink&quot; title=&quot;问题提出&quot;&gt;&lt;/a&gt;问题提出&lt;/h1&gt;&lt;p&gt;为了精细化提高 nginx(marxxx) 的性能, 现分析写日志对于请求的影响。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;日志大小为 500 字节&lt;/li&gt;
&lt;li&gt;响应大小  111 字节&lt;/li&gt;
&lt;li&gt;除日志外 nginx 服务不进行任何 io 操作，使用 nginx 语法直接返回响应&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;qps服务压力了决定的磁盘承受的写日志的压力&lt;/li&gt;
&lt;li&gt;request time分布&lt;/li&gt;
&lt;li&gt;nginx log buffer: 分别测试 log buffer 为 4k,  64k, 128k 以及关闭log的情况&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;探究结论&quot;&gt;&lt;a href=&quot;#探究结论&quot; class=&quot;headerlink&quot; title=&quot;探究结论&quot;&gt;&lt;/a&gt;探究结论&lt;/h1&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://www.rebootcat.com/categories/linux/"/>
    
      <category term="nginx" scheme="http://www.rebootcat.com/categories/linux/nginx/"/>
    
    
      <category term="nginx" scheme="http://www.rebootcat.com/tags/nginx/"/>
    
      <category term="wrk" scheme="http://www.rebootcat.com/tags/wrk/"/>
    
  </entry>
  
</feed>
