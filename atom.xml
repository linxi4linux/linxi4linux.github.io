<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林夕水共</title>
  
  <subtitle>关于技术,关于生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rebootcat.com/"/>
  <updated>2020-10-29T11:33:32.884Z</updated>
  <id>https://rebootcat.com/</id>
  
  <author>
    <name>Smaug</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux上隐藏进程名（初级版）</title>
    <link href="https://rebootcat.com/2020/10/25/hiddenproc/"/>
    <id>https://rebootcat.com/2020/10/25/hiddenproc/</id>
    <published>2020-10-25T14:23:58.000Z</published>
    <updated>2020-10-29T11:33:32.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>上一篇博文 <a href="https://rebootcat.com/2020/10/25/setproctitle/">模仿nginx修改进程名</a> 中提到了一种修改进程名的方法，就像 nginx 一样，给不同进程命名为 master 以及 worker 等。那么能不能把新进程名设置为空字符串呢？如果能，又会有哪些应用场景呢？</p><p>答案可能是能的，设置新进程的名字为空，通常用来隐藏进程，用于攻击或者反攻击。</p><h1 id="prctl-函数"><a href="#prctl-函数" class="headerlink" title="prctl 函数"></a>prctl 函数</h1><p>上一篇博文 <a href="https://rebootcat.com/2020/10/25/setproctitle/">模仿nginx修改进程名</a> 文章末尾提到了 <code>prctl</code> 这个函数，它也可以用来修改进程名。</p><p>只不过如果单单使用 prctl 来修改进程名的话，使用 ps 或者 top 等工具看到的可能还是原来的名字。</p><p>源代码可以在我的 github 找到：</p><p><a href="https://github.com/smaugx/setproctitle/blob/main/hidden_process/prctl_main.cc" target="_blank" rel="noopener">https://github.com/smaugx/setproctitle/blob/main/hidden_process/prctl_main.cc</a></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main(<span class="built_in">int</span> argc, char* argv[], char *envp[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> char *new_title = <span class="string">"prctl_new_name"</span><span class="comment">;</span></span><br><span class="line">    prctl(PR_SET_NAME, new_title, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">2</span>)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#  g++ prctl_main.cc   -o  prctl_main -std=c++11</span></span><br><span class="line"><span class="meta"># ./prctl_main</span></span><br></pre></td></tr></table></figure><p>然后我们查看一下进程的名字：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ps -ef |grep prctl</span><br><span class="line">root     <span class="number">20758</span> <span class="number">12289</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">39</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ./prctl_main</span><br><span class="line">root     <span class="number">20791</span> <span class="number">20422</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">39</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=<span class="built_in">auto</span> prctl</span><br></pre></td></tr></table></figure><p>可以看到 ps 看到的进程名依然是 <code>prctl_main</code> 而不是 <code>prctl_new_name</code>。那么 <code>prctl</code> 函数到底修改了哪里呢？ ps 命令又是从哪里读取的进程名呢？</p><h2 id="proc-lt-pid-gt-虚拟文件夹"><a href="#proc-lt-pid-gt-虚拟文件夹" class="headerlink" title="/proc/&lt;pid&gt; 虚拟文件夹"></a>/proc/&lt;pid&gt; 虚拟文件夹</h2><p>linux 上一切皆文件，启动一个进程，就会在系统的 <code>/proc</code> 这个虚拟文件系统下创建这个进程相关的文件夹，里面记录了这个进程的数据。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls /proc/20758</span></span><br><span class="line">attr       cgroup      comm             cwd      fd       io        map_files  mountinfo   net        oom_adj        pagemap      projid_map  <span class="keyword">schedstat </span> smaps  statm    task     wchan</span><br><span class="line">autogroup  clear_refs  coredump_filter  environ  fdinfo   limits    maps       mounts      ns         oom_score      patch_state  root        sessionid  stack  status   timers</span><br><span class="line">auxv       cmdline     cpuset           exe      gid_map  loginuid  mem        mountstats  numa_maps  oom_score_adj  personality  <span class="keyword">sched </span>      setgroups  stat   <span class="keyword">syscall </span> uid_map</span><br></pre></td></tr></table></figure><p>关注一下这两个虚拟文件:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /proc/20758/cmdline</span></span><br><span class="line"><span class="string">./prctl_main</span></span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /proc/20758/status</span></span><br><span class="line"><span class="attr">Name:</span><span class="string">prctl_new_name</span></span><br><span class="line"><span class="attr">Umask:</span><span class="number">0022</span></span><br><span class="line"><span class="attr">State:</span><span class="string">S</span> <span class="string">(sleeping)</span></span><br><span class="line"><span class="attr">Tgid:</span><span class="number">20758</span></span><br><span class="line"><span class="attr">Ngid:</span><span class="number">0</span></span><br><span class="line"><span class="attr">Pid:</span><span class="number">20758</span></span><br><span class="line"><span class="attr">PPid:</span><span class="number">12289</span></span><br><span class="line"><span class="attr">TracerPid:</span><span class="number">0</span></span><br><span class="line"><span class="attr">Uid:</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="attr">Gid:</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="string">...(省略）</span></span><br></pre></td></tr></table></figure><p>细心的同学应该发现上面的不一致了吧， /proc/&lt;pid&gt;/cmdline 这个文件记录的进程名是 <code>prctl_main</code>，而 /proc/&lt;pid&gt;/status 中 Name 值记录的进程名是 <code>prctl_new_name</code>。而 ps 命令正好是读取了 cmdline 这个文件，导致即便使用 prctl 修改了进程名，但 ps 依然看到的是老的进程名。</p><p>另外要注意，<strong>prctl() 这个函数有个限制，新进程的名字长度不能超过 16 字节（包括最后的 ‘\0’）</strong>，详见手册：</p><p><a href="https://man7.org/linux/man-pages/man2/prctl.2.html" target="_blank" rel="noopener">https://man7.org/linux/man-pages/man2/prctl.2.html</a></p><h1 id="prctl-结合-argv-0"><a href="#prctl-结合-argv-0" class="headerlink" title="prctl 结合 argv[0]"></a>prctl 结合 argv[0]</h1><p>上面的分析看到，不论是修改 argv[0] 还是使用 prctl，均有其局限性，那么通常可以结合两者来进行。</p><p>源码可以在我的 github 找到：</p><p><a href="https://github.com/smaugx/setproctitle/blob/main/hidden_process/hidden_main.cc" target="_blank" rel="noopener">https://github.com/smaugx/setproctitle/blob/main/hidden_process/hidden_main.cc</a></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"../setproctitle.h"</span></span></span><br><span class="line"></span><br><span class="line">char **smaug_os_argv<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main(<span class="built_in">int</span> argc, char* argv[], char *envp[])</span><br><span class="line">&#123;</span><br><span class="line">    smaug_os_argv = argv<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    // set new process <span class="literal">NULL</span> <span class="keyword">to</span> hide process</span><br><span class="line">    <span class="keyword">const</span> char *new_title = <span class="string">"hidden_main_new"</span><span class="comment">;</span></span><br><span class="line">    <span class="keyword">if</span> (smaug_init_setproctitle() == SMAUG_PROCTITLE_OK) &#123;</span><br><span class="line">        smaug_setproctitle(new_title)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    // set new process <span class="literal">NULL</span> <span class="keyword">to</span> hide process</span><br><span class="line">    prctl(PR_SET_NAME, new_title, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ps -ef |grep hidd</span><br><span class="line">root     <span class="number">21753</span> <span class="number">12289</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">55</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> hidden_main_new</span><br><span class="line">root     <span class="number">21760</span> <span class="number">20422</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">55</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=<span class="built_in">auto</span> hidd</span><br><span class="line"></span><br><span class="line"># cat /proc/<span class="number">21753</span>/cmdline</span><br><span class="line">hidden_main_new[<span class="symbol">root@</span>Jiao ~]#</span><br><span class="line"></span><br><span class="line"># cat /proc/<span class="number">21753</span>/status |grep Name</span><br><span class="line">Name:hidden_main_new</span><br></pre></td></tr></table></figure><p>可以看到，无论是通过 ps 命令还是直接查看 /proc/&lt;pid&gt;/ 下的文件的方式，均能看到修改后的名字： <code>hidden_main_new</code>。</p><h1 id="隐藏进程"><a href="#隐藏进程" class="headerlink" title="隐藏进程"></a>隐藏进程</h1><p>经过上一步，已经可以完美的修改进程名了，那么再进一步，如何隐藏进程呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *new_title = <span class="string">""</span>;</span><br></pre></td></tr></table></figure><p>只需要修改上述的一行代码，重新编译即可，然后用 ps 或者 top 看一下，能不能找到这个进程：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ps -ef |grep hidden</span><br><span class="line">root     <span class="number">22022</span> <span class="number">20422</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">59</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=<span class="built_in">auto</span> hidden</span><br></pre></td></tr></table></figure><p>可以看到 ps 无法找到 hidden* 相关的进程，那么 top 呢？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">top - <span class="number">18</span>:<span class="number">01</span>:<span class="number">06</span> up <span class="number">16</span> days,  <span class="number">4</span>:<span class="number">16</span>,  <span class="number">9</span> users,  load average: <span class="number">0.00</span>, <span class="number">0.01</span>, <span class="number">0.05</span></span><br><span class="line">Tasks: <span class="number">121</span> total,   <span class="number">1</span> running, <span class="number">120</span> sleeping,   <span class="number">0</span> stopped,   <span class="number">0</span> zombie</span><br><span class="line">%Cpu(s):  <span class="number">0.0</span> us,  <span class="number">0.0</span> sy,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> wa,  <span class="number">0.0</span> hi,  <span class="number">0.0</span> si,  <span class="number">0.0</span> st</span><br><span class="line">KiB Mem :  <span class="number">3879952</span> total,  <span class="number">3579624</span> free,    <span class="number">95660</span> used,   <span class="number">204668</span> buff/cache</span><br><span class="line">KiB Swap:  <span class="number">5242876</span> total,  <span class="number">5164352</span> free,    <span class="number">78524</span> used.  <span class="number">3272224</span> avail Mem</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line"><span class="number">31038</span> root      <span class="number">20</span>   <span class="number">0</span>  <span class="number">115800</span>    <span class="number">372</span>    <span class="number">368</span> S   <span class="number">0.0</span>  <span class="number">0.0</span>   <span class="number">0</span>:<span class="number">00.70</span> bash</span><br><span class="line"><span class="number">22081</span> root      <span class="number">20</span>   <span class="number">0</span>       <span class="number">0</span>      <span class="number">0</span>      <span class="number">0</span> S   <span class="number">0.0</span>  <span class="number">0.0</span>   <span class="number">0</span>:<span class="number">00.00</span> kworker/<span class="number">1</span>:<span class="number">0</span></span><br><span class="line"><span class="number">22078</span> root      <span class="number">20</span>   <span class="number">0</span>  <span class="number">162140</span>   <span class="number">2252</span>   <span class="number">1548</span> R   <span class="number">0.0</span>  <span class="number">0.1</span>   <span class="number">0</span>:<span class="number">00.04</span> top</span><br><span class="line"><span class="number">22013</span> root      <span class="number">20</span>   <span class="number">0</span>   <span class="number">11124</span>   <span class="number">1068</span>    <span class="number">908</span> S   <span class="number">0.0</span>  <span class="number">0.0</span>   <span class="number">0</span>:<span class="number">00.00</span></span><br><span class="line"><span class="number">21859</span> root      <span class="number">20</span>   <span class="number">0</span>  <span class="number">115892</span>    <span class="number">244</span>    <span class="number">240</span> S   <span class="number">0.0</span>  <span class="number">0.0</span>   <span class="number">0</span>:<span class="number">00.46</span> bash</span><br><span class="line"><span class="number">21725</span> root      <span class="number">20</span>   <span class="number">0</span>       <span class="number">0</span>      <span class="number">0</span>      <span class="number">0</span> S   <span class="number">0.0</span>  <span class="number">0.0</span>   <span class="number">0</span>:<span class="number">00.00</span> kworker/<span class="number">1</span>:<span class="number">2</span></span><br><span class="line"><span class="number">20811</span> root      <span class="number">20</span>   <span class="number">0</span>       <span class="number">0</span>      <span class="number">0</span>      <span class="number">0</span> S   <span class="number">0.0</span>  <span class="number">0.0</span>   <span class="number">0</span>:<span class="number">00.00</span> kworker/<span class="number">0</span>:<span class="number">0</span></span><br></pre></td></tr></table></figure><p>运行 top 命令，并且以 pid 倒叙排序，注意第四行的进程，可以看到 COMMAND 为空，这个进程就是刚才的这个进程，但是看不到进程名了，达到了简单的、初级的隐藏进程的目的。</p><h1 id="扩展一下"><a href="#扩展一下" class="headerlink" title="扩展一下"></a>扩展一下</h1><p>上述相关代码均可以在我的 github 找到：</p><p><a href="https://github.com/smaugx/setproctitle/tree/main/hidden_process" target="_blank" rel="noopener">https://github.com/smaugx/setproctitle/tree/main/hidden_process</a></p><p>上面的讨论可以看到，能实现初级的，简单的进程隐藏，但是使用 top 命令还是能看到这个无名进程，那么这点改怎么解决呢？</p><p>这里就不展开了，我没有这方面的经验。不过通常来说有两种办法：</p><ul><li>修改进程名为常见的一些进程名，比如 bash, top, nginx 等以达到混淆的目的</li><li>想办法把 /proc/&lt;pid&gt;/ 这个虚拟文件夹隐藏或者达到隐藏类的效果（不太擅长）</li></ul><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#105;&#110;&#x75;&#120;&#x63;&#111;&#x64;&#x65;&#50;&#110;&#x69;&#x6b;&#105;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;">&#x6c;&#105;&#110;&#x75;&#120;&#x63;&#111;&#x64;&#x65;&#50;&#110;&#x69;&#x6b;&#105;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p></li></ul><p>2020-10-25 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h1&gt;&lt;p&gt;上一篇博文 &lt;a href=&quot;https://rebootcat.com/2020/10/25/setproctitle/&quot;&gt;模仿nginx
      
    
    </summary>
    
    
      <category term="c++" scheme="https://rebootcat.com/categories/c/"/>
    
    
      <category term="c++" scheme="https://rebootcat.com/tags/c/"/>
    
      <category term="linux" scheme="https://rebootcat.com/tags/linux/"/>
    
      <category term="setproctitle" scheme="https://rebootcat.com/tags/setproctitle/"/>
    
      <category term="fork" scheme="https://rebootcat.com/tags/fork/"/>
    
      <category term="ps" scheme="https://rebootcat.com/tags/ps/"/>
    
      <category term="cmdline" scheme="https://rebootcat.com/tags/cmdline/"/>
    
  </entry>
  
  <entry>
    <title>模仿nginx修改进程名</title>
    <link href="https://rebootcat.com/2020/10/25/setproctitle/"/>
    <id>https://rebootcat.com/2020/10/25/setproctitle/</id>
    <published>2020-10-25T03:23:58.000Z</published>
    <updated>2020-10-28T15:09:43.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx-进程名"><a href="#nginx-进程名" class="headerlink" title="nginx 进程名"></a>nginx 进程名</h1><p>使用 nginx 的过程中，我们经常看到 nginx 的进程名是不同的，如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef |grep nginx </span><br><span class="line">smaug    <span class="number">1183</span>  <span class="number">1115</span>  <span class="number">0</span> <span class="number">05</span>:<span class="number">46</span> pts/<span class="number">2</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=<span class="built_in">auto</span> nginx</span><br><span class="line">root     <span class="number">14201</span>     <span class="number">1</span>  <span class="number">0</span>  <span class="number">2019</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> nginx: master process ./sbin/nginx</span><br><span class="line">nobody   <span class="number">28887</span> <span class="number">14201</span>  <span class="number">0</span> Oct14 ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> nginx: worker process</span><br><span class="line">nobody   <span class="number">28888</span> <span class="number">14201</span>  <span class="number">0</span> Oct14 ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> nginx: worker process</span><br></pre></td></tr></table></figure><p>可以看到 nginx 的进程名是不同的，那么它是怎么做到的呢？</p><h1 id="argv-0"><a href="#argv-0" class="headerlink" title="argv[0]"></a>argv[0]</h1><p>首先来看一下 C 语言中的 main 函数的定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>;</span><br></pre></td></tr></table></figure><p>这个应该大家都是比较熟悉的，argc 表示命令行参数个数， argv 保存了各个命令行参数的内容。<strong>其中 <code>argv[0]</code> 表示的是进程的名字</strong>，这就是修改进程名的关键点所在。</p><p><strong>只需要修改  argv[0] 的值即可完成修改进程名</strong>。</p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>下面以程序员经典入门代码为例说明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filename: hello_world_setproctitle.cc</span></span><br><span class="line"><span class="comment">// build: g++ hello_world_setproctitle.cc -o hello_world_setproctitle</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// block here</span></span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">g</span>++ <span class="comment">hello_world_setproctitle</span><span class="string">.</span><span class="comment">cc</span> <span class="literal">-</span><span class="comment">o</span> <span class="comment">hello_world_setproctitle</span></span><br><span class="line"><span class="comment"></span><span class="string">.</span><span class="comment">/hello_world_setproctitle</span></span><br></pre></td></tr></table></figure><p>查看一下进程名：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ps -ef |grep hello_world</span><br><span class="line">root     <span class="number">26356</span> <span class="number">12289</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">17</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ./hello_world_setproctitle</span><br><span class="line">root     <span class="number">26366</span> <span class="number">20422</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">18</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=<span class="built_in">auto</span> hello_world</span><br></pre></td></tr></table></figure><a id="more"></a><p>可以看到进程名是 <code>hello_world_setproctitle</code>，接下来我们修改一下 argv[0] 的值，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filename: hello_world_setproctitle.cc</span></span><br><span class="line"><span class="comment">// build: g++ hello_world_setproctitle.cc -o hello_world_setproctitle</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// new process name</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* new_name = <span class="string">"new_new_hello_world_setproctitle"</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(argv[<span class="number">0</span>], new_name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// block here</span></span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行之后，查看进程名：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ps -ef |grep hello_world</span><br><span class="line">root     <span class="number">26750</span> <span class="number">12289</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">23</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> new_new_hello_world_setproctitle</span><br><span class="line">root     <span class="number">26754</span> <span class="number">20422</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">23</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=<span class="built_in">auto</span> hello_world</span><br></pre></td></tr></table></figure><p>可以看到进程名已经修改为 <code>new_new_hello_world_setproctitle</code> 了。</p><p>是不是很简单？</p><p><strong>不过上面的代码是有一定的风险的，如果新的进程名超过了原来 argv[0] 的长度，就可能会影响到后面的 environ 的内容</strong>。</p><h1 id="环境变量-environ"><a href="#环境变量-environ" class="headerlink" title="环境变量 environ"></a>环境变量 environ</h1><p>C 语言中 main 函数的定义还有一个:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[], <span class="keyword">char</span> *envp[])</span></span>;</span><br></pre></td></tr></table></figure><p>这个版本提供了第三个参数，大多数 Unix 系统支持，但是  POSIX.1 不建议这么做，如果要访问环境变量建议使用 <code>getenv</code> 和 <code>putenv</code> 接口。这里就不展开讲了。</p><p>envp 这个参数表示环境变量，<strong>每一个进程都有与之相关的环境变量，其中每个字符串都以(name=value)形式定义，并且 envp 的地址紧跟在 argv 之后</strong>。</p><h2 id="hello-world-environ"><a href="#hello-world-environ" class="headerlink" title="hello world environ"></a>hello world environ</h2><p>接下来我们打印一下 envp 这个参数的值，基于上面的代码，简单修改一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filename: hello_world_setproctitle.cc</span></span><br><span class="line"><span class="comment">// build: g++ hello_world_setproctitle.cc -o hello_world_setproctitle</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[], <span class="keyword">char</span> *envp[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"mem:%p len:%d argv[%d]: %s\n"</span>, argv[i], <span class="built_in">strlen</span>(argv[i]), i, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; envp[i] != <span class="literal">NULL</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"mem:%p len:%d envp[%d]: %s\n"</span>, envp[i], <span class="built_in">strlen</span>(envp[i]), i, envp[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* new_name = <span class="string">"new_new_hello_world_setproctitle"</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(argv[<span class="number">0</span>], new_name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// block here</span></span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码同时也打印了每个参数的地址以及长度，编译并执行：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># ./hello_world_setproctitle <span class="number">1</span> <span class="number">22</span></span><br><span class="line">mem:<span class="number">0x7ffc84cf7544</span> len:<span class="number">26</span> argv[<span class="number">0</span>]: ./hello_world_setproctitle</span><br><span class="line">mem:<span class="number">0x7ffc84cf755f</span> len:<span class="number">1</span> argv[<span class="number">1</span>]: <span class="number">1</span></span><br><span class="line">mem:<span class="number">0x7ffc84cf7561</span> len:<span class="number">2</span> argv[<span class="number">2</span>]: <span class="number">22</span></span><br><span class="line"></span><br><span class="line">mem:<span class="number">0x7ffc84cf7564</span> len:<span class="number">19</span> envp[<span class="number">0</span>]: XDG_SESSION_ID=<span class="number">2554</span></span><br><span class="line">mem:<span class="number">0x7ffc84cf7578</span> len:<span class="number">13</span> envp[<span class="number">1</span>]: HOSTNAME=Jiao</span><br><span class="line">mem:<span class="number">0x7ffc84cf7586</span> len:<span class="number">23</span> envp[<span class="number">2</span>]: SELINUX_ROLE_REQUESTED=</span><br><span class="line">mem:<span class="number">0x7ffc84cf759e</span> len:<span class="number">19</span> envp[<span class="number">3</span>]: TERM=xterm<span class="number">-256</span>color</span><br><span class="line">mem:<span class="number">0x7ffc84cf75b2</span> len:<span class="number">15</span> envp[<span class="number">4</span>]: SHELL=/bin/bash</span><br><span class="line">mem:<span class="number">0x7ffc84cf75c2</span> len:<span class="number">13</span> envp[<span class="number">5</span>]: HISTSIZE=<span class="number">1000</span></span><br><span class="line">mem:<span class="number">0x7ffc84cf75d0</span> len:<span class="number">31</span> envp[<span class="number">6</span>]: SSH_CLIENT=<span class="number">192.168</span><span class="number">.1</span><span class="number">.3</span> <span class="number">61311</span> <span class="number">22</span></span><br><span class="line">mem:<span class="number">0x7ffc84cf75f0</span> len:<span class="number">26</span> envp[<span class="number">7</span>]: SELINUX_USE_CURRENT_RANGE=</span><br><span class="line">mem:<span class="number">0x7ffc84cf760b</span> len:<span class="number">75</span> envp[<span class="number">8</span>]: ANDROID_NDK_TOOLCHAIN_ROOT=/root/smaug/software/android-ndk-r16b/toolchains</span><br><span class="line">mem:<span class="number">0x7ffc84cf7657</span> len:<span class="number">12</span> envp[<span class="number">9</span>]: OLDPWD=/root</span><br><span class="line">mem:<span class="number">0x7ffc84cf7664</span> len:<span class="number">18</span> envp[<span class="number">10</span>]: SSH_TTY=/dev/pts/<span class="number">3</span></span><br><span class="line">mem:<span class="number">0x7ffc84cf7677</span> len:<span class="number">9</span> envp[<span class="number">11</span>]: USER=root</span><br><span class="line">mem:<span class="number">0x7ffc84cf7681</span> len:<span class="number">75</span> envp[<span class="number">12</span>]: LD_LIBRARY_PATH=/usr/local/lib:/usr/local/python3/lib::/usr/local/topio/lib</span><br><span class="line">mem:<span class="number">0x7ffc84cf76cd</span> len:<span class="number">1719</span> envp[<span class="number">13</span>]: LS_COLORS=rs=<span class="number">0</span>:di=<span class="number">38</span>;<span class="number">5</span>;<span class="number">27</span>:ln=<span class="number">38</span>;<span class="number">5</span>;<span class="number">51</span>:mh=<span class="number">44</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:pi=<span class="number">40</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">11</span>:so=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:<span class="keyword">do</span>=<span class="number">38</span>;<span class="number">5</span>;<span class="number">5</span>:bd=<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">11</span>:cd=<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">3</span>:<span class="keyword">or</span>=<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:mi=<span class="number">05</span>;<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:su=<span class="number">48</span>;<span class="number">5</span>;<span class="number">196</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:sg=<span class="number">48</span>;<span class="number">5</span>;<span class="number">11</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">16</span>:ca=<span class="number">48</span>;<span class="number">5</span>;<span class="number">196</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">226</span>:tw=<span class="number">48</span>;<span class="number">5</span>;<span class="number">10</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">16</span>:ow=<span class="number">48</span>;<span class="number">5</span>;<span class="number">10</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">21</span>:st=<span class="number">48</span>;<span class="number">5</span>;<span class="number">21</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:ex=<span class="number">38</span>;<span class="number">5</span>;<span class="number">34</span>:*.tar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tgz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.arc=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.arj=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.taz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lha=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lz4=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lzh=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lzma=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tlz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.txz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tzo=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.t7z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.zip=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.Z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.dz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.gz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lrz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lzo=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.xz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.bz2=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.bz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tbz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tbz2=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.deb=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.rpm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.jar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.war=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.ear=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.sar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.rar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.alz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.ace=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.zoo=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.cpio=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*<span class="number">.7</span>z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.rz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.cab=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.jpg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.jpeg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.gif=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.bmp=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.pbm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.pgm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ppm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.tga=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xbm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xpm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.tif=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.tiff=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.png=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.svg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.svgz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mng=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.pcx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mov=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mpg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mpeg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.m2v=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mkv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.webm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ogm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mp4=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.m4v=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mp4v=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.vob=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.qt=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.nuv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.wmv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.asf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.rm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.rmvb=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.flc=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.avi=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.fli=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.flv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.gl=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.dl=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xcf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xwd=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.yuv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.cgm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.emf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.axv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.anx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ogv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ogx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.aac=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.au=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.flac=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mid=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.midi=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mka=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mp3=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mpc=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.ogg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.ra=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.wav=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.axa=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.oga=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.spx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.xspf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:</span><br><span class="line">mem:<span class="number">0x7ffc84cf7d85</span> len:<span class="number">25</span> envp[<span class="number">14</span>]: MAIL=/var/spool/mail/root</span><br><span class="line">mem:<span class="number">0x7ffc84cf7d9f</span> len:<span class="number">193</span> envp[<span class="number">15</span>]: PATH=/root/.cargo/bin:/root/.cargo/bin:/usr/local/vim/bin:/usr/local/bin:/usr/loca/python3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/go/bin:/root/bin:/usr/local/topio/bin</span><br><span class="line">mem:<span class="number">0x7ffc84cf7e61</span> len:<span class="number">21</span> envp[<span class="number">16</span>]: MARKPATH=/root/.marks</span><br><span class="line">mem:<span class="number">0x7ffc84cf7e77</span> len:<span class="number">14</span> envp[<span class="number">17</span>]: PWD=/root/temp</span><br><span class="line">mem:<span class="number">0x7ffc84cf7e86</span> len:<span class="number">16</span> envp[<span class="number">18</span>]: LANG=zh_CN.UTF<span class="number">-8</span></span><br><span class="line">mem:<span class="number">0x7ffc84cf7e97</span> len:<span class="number">38</span> envp[<span class="number">19</span>]: PS1=\[\e[<span class="number">32</span>;<span class="number">1</span>m\][\<span class="symbol">u@</span>\h \w]\$ \[\e[<span class="number">0</span>m\]</span><br><span class="line">mem:<span class="number">0x7ffc84cf7ebe</span> len:<span class="number">24</span> envp[<span class="number">20</span>]: SELINUX_LEVEL_REQUESTED=</span><br><span class="line">mem:<span class="number">0x7ffc84cf7ed7</span> len:<span class="number">22</span> envp[<span class="number">21</span>]: HISTCONTROL=ignoredups</span><br><span class="line">mem:<span class="number">0x7ffc84cf7eee</span> len:<span class="number">7</span> envp[<span class="number">22</span>]: SHLVL=<span class="number">1</span></span><br><span class="line">mem:<span class="number">0x7ffc84cf7ef6</span> len:<span class="number">10</span> envp[<span class="number">23</span>]: HOME=/root</span><br><span class="line">mem:<span class="number">0x7ffc84cf7f01</span> len:<span class="number">12</span> envp[<span class="number">24</span>]: LOGNAME=root</span><br><span class="line">mem:<span class="number">0x7ffc84cf7f0e</span> len:<span class="number">47</span> envp[<span class="number">25</span>]: SSH_CONNECTION=<span class="number">192.168</span><span class="number">.1</span><span class="number">.3</span> <span class="number">61311</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.4</span> <span class="number">22</span></span><br><span class="line">mem:<span class="number">0x7ffc84cf7f3e</span> len:<span class="number">16</span> envp[<span class="number">26</span>]: GOPATH=/root/.go</span><br><span class="line">mem:<span class="number">0x7ffc84cf7f4f</span> len:<span class="number">34</span> envp[<span class="number">27</span>]: LESSOPEN=||/usr/bin/lesspipe.sh %s</span><br><span class="line">mem:<span class="number">0x7ffc84cf7f72</span> len:<span class="number">49</span> envp[<span class="number">28</span>]: ANDROID_NDK=/root/smaug/software/android-ndk-r16b</span><br><span class="line">mem:<span class="number">0x7ffc84cf7fa4</span> len:<span class="number">27</span> envp[<span class="number">29</span>]: XDG_RUNTIME_DIR=/run/user/<span class="number">0</span></span><br><span class="line">mem:<span class="number">0x7ffc84cf7fc0</span> len:<span class="number">28</span> envp[<span class="number">30</span>]: _=./hello_world_setproctitle</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>可以看到上述各个 argv 的值以及 envp 参数的内容。</p><p>这里需要重点注意一下最后一个 argv[2] 参数以及第一个 envp[0] 参数的地址：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mem:<span class="number">0x7ffc84cf7561</span> len:<span class="number">2</span> argv[<span class="number">2</span>]: <span class="number">22</span></span><br><span class="line"></span><br><span class="line">mem:<span class="number">0x7ffc84cf7564</span> len:<span class="number">19</span> envp[<span class="number">0</span>]: XDG_SESSION_ID=<span class="number">2554</span></span><br></pre></td></tr></table></figure><p>0x7ffc84cf7564 正好等于 0x7ffc84cf7561 + 3 （argv[2] 的长度加上最后一个 ‘\0’)。可以多试几次，不同的参数个数验证下这个。</p><p>所以 environ 的地址（envp[0] 的地址）是紧跟在 argv 后面的，那么前面提到的如果当新的进程名长度超出 argv 的长度后，可能就会覆盖后面的 environ 内容，导致其他一些问题。</p><h2 id="新进程名过长，覆盖-envp"><a href="#新进程名过长，覆盖-envp" class="headerlink" title="新进程名过长，覆盖 envp"></a>新进程名过长，覆盖 envp</h2><p>修改如上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filename: hello_world_setproctitle.cc</span></span><br><span class="line"><span class="comment">// build: g++ hello_world_setproctitle.cc -o hello_world_setproctitle</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[], <span class="keyword">char</span> *envp[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* new_name = <span class="string">"new_new_hello_world_setproctitlexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(argv[<span class="number">0</span>], new_name);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"mem:%p len:%d argv[%d]: %s\n"</span>, argv[i], <span class="built_in">strlen</span>(argv[i]), i, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; envp[i] != <span class="literal">NULL</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"mem:%p len:%d envp[%d]: %s\n"</span>, envp[i], <span class="built_in">strlen</span>(envp[i]), i, envp[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// block here</span></span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># ./hello_world_setproctitle</span><br><span class="line">mem:<span class="number">0x7fff872c3549</span> len:<span class="number">125</span> argv[<span class="number">0</span>]: new_new_hello_world_setproctitlexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">mem:<span class="number">0x7fff872c3564</span> len:<span class="number">98</span> envp[<span class="number">0</span>]: titlexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">mem:<span class="number">0x7fff872c3578</span> len:<span class="number">78</span> envp[<span class="number">1</span>]: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">mem:<span class="number">0x7fff872c3586</span> len:<span class="number">64</span> envp[<span class="number">2</span>]: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">mem:<span class="number">0x7fff872c359e</span> len:<span class="number">40</span> envp[<span class="number">3</span>]: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">mem:<span class="number">0x7fff872c35b2</span> len:<span class="number">20</span> envp[<span class="number">4</span>]: xxxxxxxxxxxxxxxxxxxx</span><br><span class="line">mem:<span class="number">0x7fff872c35c2</span> len:<span class="number">4</span> envp[<span class="number">5</span>]: xxxx</span><br><span class="line">mem:<span class="number">0x7fff872c35d0</span> len:<span class="number">31</span> envp[<span class="number">6</span>]: SSH_CLIENT=<span class="number">192.168</span><span class="number">.1</span><span class="number">.3</span> <span class="number">55187</span> <span class="number">22</span></span><br><span class="line">mem:<span class="number">0x7fff872c35f0</span> len:<span class="number">26</span> envp[<span class="number">7</span>]: SELINUX_USE_CURRENT_RANGE=</span><br><span class="line">mem:<span class="number">0x7fff872c360b</span> len:<span class="number">75</span> envp[<span class="number">8</span>]: ANDROID_NDK_TOOLCHAIN_ROOT=/root/smaug/software/android-ndk-r16b/toolchains</span><br><span class="line">mem:<span class="number">0x7fff872c3657</span> len:<span class="number">12</span> envp[<span class="number">9</span>]: OLDPWD=/root</span><br><span class="line">mem:<span class="number">0x7fff872c3664</span> len:<span class="number">18</span> envp[<span class="number">10</span>]: SSH_TTY=/dev/pts/<span class="number">1</span></span><br><span class="line">mem:<span class="number">0x7fff872c3677</span> len:<span class="number">9</span> envp[<span class="number">11</span>]: USER=root</span><br></pre></td></tr></table></figure><p>可以看到，上面打印出来的 envp[0], envp[1].. envp[5] 都已经被覆盖了。</p><p>所以，<strong>通过 argv[0] 修改进程名，如果新进程名过长，需要考虑到 envp 的覆盖问题，通常做法是把 envp 的内容先保存，然后指向新的内存，再把保存的环境变量复制到新的内存，然后再去修改 argv[0]</strong>。</p><h1 id="setproctitle-修改进程名"><a href="#setproctitle-修改进程名" class="headerlink" title="setproctitle 修改进程名"></a>setproctitle 修改进程名</h1><p>可以参考 nginx 的源码: <a href="https://github.com/nginx/nginx/blob/master/src/os/unix/ngx_setproctitle.c" target="_blank" rel="noopener">https://github.com/nginx/nginx/blob/master/src/os/unix/ngx_setproctitle.c</a></p><p>下面直接上源码，源码可以在我的 github 找到：</p><p><a href="https://github.com/smaugx/setproctitle" target="_blank" rel="noopener">https://github.com/smaugx/setproctitle</a></p><blockquote><p>setproctitle.h</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: smaug</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SMAUG_SETPROCTITLE_H_INCLUDED_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SMAUG_SETPROCTITLE_H_INCLUDED_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SMAUG_PROCTITLE_ERROR  -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SMAUG_PROCTITLE_OK   0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">smaug_init_setproctitle</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">smaug_setproctitle</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *title)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _SMAUG_SETPROCTITLE_H_INCLUDED_ */</span></span></span><br></pre></td></tr></table></figure><blockquote><p>setproctitle.cc</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: smaug</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"setproctitle.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * To change the process title in Linux and Solaris we have to set argv[1]</span></span><br><span class="line"><span class="comment"> * to NULL and to copy the title to the same place where the argv[0] points to.</span></span><br><span class="line"><span class="comment"> * However, argv[0] may be too small to hold a new title.  Fortunately, Linux</span></span><br><span class="line"><span class="comment"> * and Solaris store argv[] and environ[] one after another.  So we should</span></span><br><span class="line"><span class="comment"> * ensure that is the continuous memory and then we allocate the new memory</span></span><br><span class="line"><span class="comment"> * for environ[] and copy it.  After this we could use the memory starting</span></span><br><span class="line"><span class="comment"> * from argv[0] for our process title.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **environ;</span><br><span class="line"><span class="comment">// same as argv</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>** smaug_os_argv;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *smaug_os_argv_last;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">smaug_init_setproctitle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计所有 environ 环境变量的长度(+1 是表示每个字符串后的 '\0')</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; environ[i]; i++) &#123;</span><br><span class="line">        <span class="built_in">size</span> += <span class="built_in">strlen</span>(environ[i]) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新分配一段内存，待会用来保存 environ 指向的环境变量</span></span><br><span class="line">    p = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> SMAUG_PROCTITLE_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    smaug_os_argv_last = smaug_os_argv[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历 argv，完成后指向 argv 最后一个参数的 '\0' 的下一个位置，也就是 envp[0] 的地址</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; smaug_os_argv[i]; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (smaug_os_argv_last == smaug_os_argv[i]) &#123;</span><br><span class="line">            smaug_os_argv_last = smaug_os_argv[i] + <span class="built_in">strlen</span>(smaug_os_argv[i]) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; environ[i]; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (smaug_os_argv_last == environ[i]) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 包括 '\0'</span></span><br><span class="line">            <span class="built_in">size</span> = <span class="built_in">strlen</span>(environ[i]) + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// smaug_os_argv_last 接着往前递进, 经过每一个环境变量</span></span><br><span class="line">            smaug_os_argv_last = environ[i] + <span class="built_in">size</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 拷贝每一个 环境变量到上面刚申请的新内存中</span></span><br><span class="line">            <span class="built_in">strncpy</span>(p, environ[i], <span class="built_in">size</span>);</span><br><span class="line">            <span class="comment">// 修改 environ[i] 指向这块新的内存地址（避免后续修改 argv[0] 造成覆盖)</span></span><br><span class="line">            environ[i] = (<span class="keyword">char</span> *) p;</span><br><span class="line">            <span class="comment">// 新内存指针 p 前移，称为下一轮 environ[i+1] 的值</span></span><br><span class="line">            p += <span class="built_in">size</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指针往前移 1 个字节，指向 最后一个环境变量的 '\0' 位置</span></span><br><span class="line">    smaug_os_argv_last--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SMAUG_PROCTITLE_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">smaug_setproctitle</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *title)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置 argv[1] = NULL 通常不必要，加上更安全</span></span><br><span class="line">    smaug_os_argv[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    char new_title[1024];</span></span><br><span class="line"><span class="comment">    bzero(new_title, sizeof(new_title));</span></span><br><span class="line"><span class="comment">    sprintf(new_title, "%s%s", "smaug: ", title);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// smaug_os_argv_last - smaug_os_argv[0] 就是最初 argv + envp 所有字符串的长度, 拷贝新进程名到 argv[0]</span></span><br><span class="line">    <span class="built_in">strncpy</span>(smaug_os_argv[<span class="number">0</span>], title, smaug_os_argv_last - smaug_os_argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"set title:%s\n"</span>, new_title);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"># sh build.sh</span><br><span class="line"># ./main</span><br><span class="line"></span><br><span class="line">#######<span class="keyword">this</span> <span class="keyword">is</span> father process###########</span><br><span class="line">master mem:<span class="number">0x7ffce4714573</span> len:<span class="number">20</span> argv[<span class="number">0</span>]: setproctitle: master</span><br><span class="line"></span><br><span class="line">master mem:<span class="number">0x12e0c20</span> len:<span class="number">19</span> envp[<span class="number">0</span>]: XDG_SESSION_ID=<span class="number">2554</span></span><br><span class="line">master mem:<span class="number">0x12e0c34</span> len:<span class="number">13</span> envp[<span class="number">1</span>]: HOSTNAME=Jiao</span><br><span class="line">master mem:<span class="number">0x12e0c42</span> len:<span class="number">23</span> envp[<span class="number">2</span>]: SELINUX_ROLE_REQUESTED=</span><br><span class="line">master mem:<span class="number">0x12e0c5a</span> len:<span class="number">19</span> envp[<span class="number">3</span>]: TERM=xterm<span class="number">-256</span>color</span><br><span class="line">master mem:<span class="number">0x12e0c6e</span> len:<span class="number">15</span> envp[<span class="number">4</span>]: SHELL=/bin/bash</span><br><span class="line">master mem:<span class="number">0x12e0c7e</span> len:<span class="number">13</span> envp[<span class="number">5</span>]: HISTSIZE=<span class="number">1000</span></span><br><span class="line">master mem:<span class="number">0x12e0c8c</span> len:<span class="number">31</span> envp[<span class="number">6</span>]: SSH_CLIENT=<span class="number">192.168</span><span class="number">.1</span><span class="number">.3</span> <span class="number">61311</span> <span class="number">22</span></span><br><span class="line">master mem:<span class="number">0x12e0cac</span> len:<span class="number">26</span> envp[<span class="number">7</span>]: SELINUX_USE_CURRENT_RANGE=</span><br><span class="line">master mem:<span class="number">0x12e0cc7</span> len:<span class="number">75</span> envp[<span class="number">8</span>]: ANDROID_NDK_TOOLCHAIN_ROOT=/root/smaug/software/android-ndk-r16b/toolchains</span><br><span class="line">master mem:<span class="number">0x12e0d13</span> len:<span class="number">17</span> envp[<span class="number">9</span>]: OLDPWD=/root/temp</span><br><span class="line">master mem:<span class="number">0x12e0d25</span> len:<span class="number">18</span> envp[<span class="number">10</span>]: SSH_TTY=/dev/pts/<span class="number">3</span></span><br><span class="line">master mem:<span class="number">0x12e0d38</span> len:<span class="number">9</span> envp[<span class="number">11</span>]: USER=root</span><br><span class="line">master mem:<span class="number">0x12e0d42</span> len:<span class="number">75</span> envp[<span class="number">12</span>]: LD_LIBRARY_PATH=/usr/local/lib:/usr/local/python3/lib::/usr/local/topio/lib</span><br><span class="line">master mem:<span class="number">0x12e0d8e</span> len:<span class="number">1719</span> envp[<span class="number">13</span>]: LS_COLORS=rs=<span class="number">0</span>:di=<span class="number">38</span>;<span class="number">5</span>;<span class="number">27</span>:ln=<span class="number">38</span>;<span class="number">5</span>;<span class="number">51</span>:mh=<span class="number">44</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:pi=<span class="number">40</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">11</span>:so=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:<span class="keyword">do</span>=<span class="number">38</span>;<span class="number">5</span>;<span class="number">5</span>:bd=<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">11</span>:cd=<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">3</span>:<span class="keyword">or</span>=<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:mi=<span class="number">05</span>;<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:su=<span class="number">48</span>;<span class="number">5</span>;<span class="number">196</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:sg=<span class="number">48</span>;<span class="number">5</span>;<span class="number">11</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">16</span>:ca=<span class="number">48</span>;<span class="number">5</span>;<span class="number">196</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">226</span>:tw=<span class="number">48</span>;<span class="number">5</span>;<span class="number">10</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">16</span>:ow=<span class="number">48</span>;<span class="number">5</span>;<span class="number">10</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">21</span>:st=<span class="number">48</span>;<span class="number">5</span>;<span class="number">21</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:ex=<span class="number">38</span>;<span class="number">5</span>;<span class="number">34</span>:*.tar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tgz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.arc=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.arj=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.taz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lha=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lz4=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lzh=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lzma=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tlz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.txz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tzo=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.t7z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.zip=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.Z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.dz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.gz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lrz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lzo=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.xz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.bz2=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.bz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tbz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tbz2=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.deb=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.rpm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.jar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.war=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.ear=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.sar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.rar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.alz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.ace=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.zoo=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.cpio=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*<span class="number">.7</span>z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.rz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.cab=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.jpg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.jpeg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.gif=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.bmp=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.pbm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.pgm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ppm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.tga=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xbm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xpm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.tif=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.tiff=<span class="number">38</span>;</span><br><span class="line"><span class="number">5</span>;<span class="number">13</span>:*.png=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.svg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.svgz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mng=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.pcx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mov=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mpg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mpeg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.m2v=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mkv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.webm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ogm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mp4=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.m4v=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mp4v=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.vob=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.qt=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.nuv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.wmv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.asf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.rm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.rmvb=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.flc=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.avi=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.fli=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.flv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.gl=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.dl=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xcf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xwd=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.yuv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.cgm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.emf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.axv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.anx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ogv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ogx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.aac=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.au=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.flac=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mid=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.midi=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mka=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mp3=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mpc=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.ogg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.ra=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.wav=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.axa=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.oga=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.spx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.xspf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:</span><br><span class="line"></span><br><span class="line">master mem:<span class="number">0x12e1446</span> len:<span class="number">25</span> envp[<span class="number">14</span>]: MAIL=/var/spool/mail/root</span><br><span class="line">master mem:<span class="number">0x12e1460</span> len:<span class="number">193</span> envp[<span class="number">15</span>]: PATH=/root/.cargo/bin:/root/.cargo/bin:/usr/local/vim/bin:/usr/local/bin:/usr/loca/python3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/go/bin:/root/bin:/usr/local/topio/bin</span><br><span class="line">master mem:<span class="number">0x12e1522</span> len:<span class="number">21</span> envp[<span class="number">16</span>]: MARKPATH=/root/.marks</span><br><span class="line">#######<span class="keyword">this</span> <span class="keyword">is</span> child process###########</span><br><span class="line">master mem:<span class="number">0x12e1538</span> len:<span class="number">27</span> envp[<span class="number">17</span>]: PWD=/root/temp/setproctitle</span><br><span class="line">master mem:<span class="number">0x12e1554</span> len:<span class="number">16</span> envp[<span class="number">18</span>]: LANG=zh_CN.UTF<span class="number">-8</span></span><br><span class="line">worker mem:<span class="number">0x7ffce4714573</span> len:<span class="number">20</span> argv[<span class="number">0</span>]: setproctitle: worker</span><br><span class="line"></span><br><span class="line">worker mem:<span class="number">0x12e0c20</span> len:<span class="number">19</span> envp[<span class="number">0</span>]: XDG_SESSION_ID=<span class="number">2554</span></span><br><span class="line">worker mem:<span class="number">0x12e0c34</span> len:<span class="number">13</span> envp[<span class="number">1</span>]: HOSTNAME=Jiao</span><br><span class="line">worker mem:<span class="number">0x12e0c42</span> len:<span class="number">23</span> envp[<span class="number">2</span>]: SELINUX_ROLE_REQUESTED=</span><br><span class="line">worker mem:<span class="number">0x12e0c5a</span> len:<span class="number">19</span> envp[<span class="number">3</span>]: TERM=xterm<span class="number">-256</span>color</span><br><span class="line">worker mem:<span class="number">0x12e0c6e</span> len:<span class="number">15</span> envp[<span class="number">4</span>]: SHELL=/bin/bash</span><br><span class="line">worker mem:<span class="number">0x12e0c7e</span> len:<span class="number">13</span> envp[<span class="number">5</span>]: HISTSIZE=<span class="number">1000</span></span><br><span class="line">worker mem:<span class="number">0x12e0c8c</span> len:<span class="number">31</span> envp[<span class="number">6</span>]: SSH_CLIENT=<span class="number">192.168</span><span class="number">.1</span><span class="number">.3</span> <span class="number">61311</span> <span class="number">22</span></span><br><span class="line">worker mem:<span class="number">0x12e0cac</span> len:<span class="number">26</span> envp[<span class="number">7</span>]: SELINUX_USE_CURRENT_RANGE=</span><br><span class="line">worker mem:<span class="number">0x12e0cc7</span> len:<span class="number">75</span> envp[<span class="number">8</span>]: ANDROID_NDK_TOOLCHAIN_ROOT=/root/smaug/software/android-ndk-r16b/toolchains</span><br><span class="line">worker mem:<span class="number">0x12e0d13</span> len:<span class="number">17</span> envp[<span class="number">9</span>]: OLDPWD=/root/temp</span><br><span class="line">worker mem:<span class="number">0x12e0d25</span> len:<span class="number">18</span> envp[<span class="number">10</span>]: SSH_TTY=/dev/pts/<span class="number">3</span></span><br><span class="line">worker mem:<span class="number">0x12e0d38</span> len:<span class="number">9</span> envp[<span class="number">11</span>]: USER=root</span><br><span class="line">worker mem:<span class="number">0x12e0d42</span> len:<span class="number">75</span> envp[<span class="number">12</span>]: LD_LIBRARY_PATH=/usr/local/lib:/usr/local/python3/lib::/usr/local/topio/lib</span><br><span class="line">worker mem:<span class="number">0x12e0d8e</span> len:<span class="number">1719</span> envp[<span class="number">13</span>]: LS_COLORS=rs=<span class="number">0</span>:di=<span class="number">38</span>;<span class="number">5</span>;<span class="number">27</span>:ln=<span class="number">38</span>;<span class="number">5</span>;<span class="number">51</span>:mh=<span class="number">44</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:pi=<span class="number">40</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">11</span>:so=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:<span class="keyword">do</span>=<span class="number">38</span>;<span class="number">5</span>;<span class="number">5</span>:bd=<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">11</span>:cd=<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">3</span>:<span class="keyword">or</span>=<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:mi=<span class="number">05</span>;<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:su=<span class="number">48</span>;<span class="number">5</span>;<span class="number">196</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:sg=<span class="number">48</span>;<span class="number">5</span>;<span class="number">11</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">16</span>:ca=<span class="number">48</span>;<span class="number">5</span>;<span class="number">196</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">226</span>:tw=<span class="number">48</span>;<span class="number">5</span>;<span class="number">10</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">16</span>:ow=<span class="number">48</span>;<span class="number">5</span>;<span class="number">10</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">21</span>:st=<span class="number">48</span>;<span class="number">5</span>;<span class="number">21</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:ex=<span class="number">38</span>;<span class="number">5</span>;<span class="number">34</span>:*.tar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tgz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.arc=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.arj=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.taz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lha=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lz4=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lzh=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lzma=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tlz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.txz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tzo=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.t7z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.zip=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.Z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.dz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.gz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lrz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lzo=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.xz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.bz2=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.bz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tbz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tbz2=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.deb=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.rpm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.jar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.war=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.ear=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.sar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.rar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.alz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.ace=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.zoo=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.cpio=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*<span class="number">.7</span>z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.rz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.cab=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.jpg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.jpeg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.gif=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.bmp=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.pbm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.pgm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ppm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.tga=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xbm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xpm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.tif=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.tiff=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.png=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.svg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.svgz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mng=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.pcx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mov=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mpg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mpeg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.m2v=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mkv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.webm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ogm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mp4=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.m4v=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mp4v=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.vob=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.qt=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.nuv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.wmv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.asf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.rm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.rmvb=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.flc=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.avi=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.fli=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.flv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.gl=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.dl=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xcf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xwd=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.yuv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.cgm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.emf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.axv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.anx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ogv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ogx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.aac=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.au=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.flac=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mid=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.midi=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mka=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mp3=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mpc=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.ogg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.ra=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.wav=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.axa=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.oga=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.spx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.xspf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:</span><br><span class="line">worker mem:<span class="number">0x12e1446</span> len:<span class="number">25</span> envp[<span class="number">14</span>]: MAIL=/var/spool/mail/root</span><br><span class="line">worker mem:<span class="number">0x12e1460</span> len:<span class="number">193</span> envp[<span class="number">15</span>]: PATH=/root/.cargo/bin:/root/.cargo/bin:/usr/local/vim/bin:/usr/local/bin:/usr/loca/python3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/go/bin:/root/bin:/usr/local/topio/bin</span><br><span class="line">worker mem:<span class="number">0x12e1522</span> len:<span class="number">21</span> envp[<span class="number">16</span>]: MARKPATH=/root/.marks</span><br><span class="line">worker mem:<span class="number">0x12e1538</span> len:<span class="number">27</span> envp[<span class="number">17</span>]: PWD=/root/temp/setproctitle</span><br><span class="line">worker mem:<span class="number">0x12e1554</span> len:<span class="number">16</span> envp[<span class="number">18</span>]: LANG=zh_CN.UTF<span class="number">-8</span></span><br><span class="line">worker mem:<span class="number">0x12e1565</span> len:<span class="number">38</span> envp[<span class="number">19</span>]: PS1=\[\e[<span class="number">32</span>;<span class="number">1</span>m\][\<span class="symbol">u@</span>\h \w]\$ \[\e[<span class="number">0</span>m\]</span><br><span class="line">worker mem:<span class="number">0x12e158c</span> len:<span class="number">24</span> envp[<span class="number">20</span>]: SELINUX_LEVEL_REQUESTED=</span><br><span class="line">worker mem:<span class="number">0x12e15a5</span> len:<span class="number">22</span> envp[<span class="number">21</span>]: HISTCONTROL=ignoredups</span><br><span class="line">worker mem:<span class="number">0x12e15bc</span> len:<span class="number">7</span> envp[<span class="number">22</span>]: SHLVL=<span class="number">1</span></span><br><span class="line">worker mem:<span class="number">0x12e15c4</span> len:<span class="number">10</span> envp[<span class="number">23</span>]: HOME=/root</span><br><span class="line">worker mem:<span class="number">0x12e15cf</span> len:<span class="number">12</span> envp[<span class="number">24</span>]: LOGNAME=root</span><br><span class="line">worker mem:<span class="number">0x12e15dc</span> len:<span class="number">47</span> envp[<span class="number">25</span>]: SSH_CONNECTION=<span class="number">192.168</span><span class="number">.1</span><span class="number">.3</span> <span class="number">61311</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.4</span> <span class="number">22</span></span><br><span class="line">worker mem:<span class="number">0x12e160c</span> len:<span class="number">16</span> envp[<span class="number">26</span>]: GOPATH=/root/.go</span><br><span class="line">master mem:<span class="number">0x12e1565</span> len:<span class="number">38</span> envp[<span class="number">19</span>]: PS1=\[\e[<span class="number">32</span>;<span class="number">1</span>m\][\<span class="symbol">u@</span>\h \w]\$ \[\e[<span class="number">0</span>m\]</span><br><span class="line">master mem:<span class="number">0x12e158c</span> len:<span class="number">24</span> envp[<span class="number">20</span>]: SELINUX_LEVEL_REQUESTED=</span><br><span class="line">master mem:<span class="number">0x12e15a5</span> len:<span class="number">22</span> envp[<span class="number">21</span>]: HISTCONTROL=ignoredups</span><br><span class="line">master mem:<span class="number">0x12e15bc</span> len:<span class="number">7</span> envp[<span class="number">22</span>]: SHLVL=<span class="number">1</span></span><br><span class="line">worker mem:<span class="number">0x12e161d</span> len:<span class="number">34</span> envp[<span class="number">27</span>]: LESSOPEN=||/usr/bin/lesspipe.sh %s</span><br><span class="line">worker mem:<span class="number">0x12e1640</span> len:<span class="number">49</span> envp[<span class="number">28</span>]: ANDROID_NDK=/root/smaug/software/android-ndk-r16b</span><br><span class="line">worker mem:<span class="number">0x12e1672</span> len:<span class="number">27</span> envp[<span class="number">29</span>]: XDG_RUNTIME_DIR=/run/user/<span class="number">0</span></span><br><span class="line">master mem:<span class="number">0x12e15c4</span> len:<span class="number">10</span> envp[<span class="number">23</span>]: HOME=/root</span><br><span class="line">master mem:<span class="number">0x12e15cf</span> len:<span class="number">12</span> envp[<span class="number">24</span>]: LOGNAME=root</span><br><span class="line">master mem:<span class="number">0x12e15dc</span> len:<span class="number">47</span> envp[<span class="number">25</span>]: SSH_CONNECTION=<span class="number">192.168</span><span class="number">.1</span><span class="number">.3</span> <span class="number">61311</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.4</span> <span class="number">22</span></span><br><span class="line">worker mem:<span class="number">0x12e168e</span> len:<span class="number">8</span> envp[<span class="number">30</span>]: _=./main</span><br><span class="line">master mem:<span class="number">0x12e160c</span> len:<span class="number">16</span> envp[<span class="number">26</span>]: GOPATH=/root/.go</span><br><span class="line">master mem:<span class="number">0x12e161d</span> len:<span class="number">34</span> envp[<span class="number">27</span>]: LESSOPEN=||/usr/bin/lesspipe.sh %s</span><br><span class="line">master mem:<span class="number">0x12e1640</span> len:<span class="number">49</span> envp[<span class="number">28</span>]: ANDROID_NDK=/root/smaug/software/android-ndk-r16b</span><br><span class="line">master mem:<span class="number">0x12e1672</span> len:<span class="number">27</span> envp[<span class="number">29</span>]: XDG_RUNTIME_DIR=/run/user/<span class="number">0</span></span><br><span class="line">master mem:<span class="number">0x12e168e</span> len:<span class="number">8</span> envp[<span class="number">30</span>]: _=./main</span><br></pre></td></tr></table></figure><p>可以看到上述的命令行参数以及环境变量在父子进程中都是正确的，查看一下进程名:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ps -ef |grep setproc</span><br><span class="line">root      <span class="number">2584</span> <span class="number">12289</span>  <span class="number">0</span> <span class="number">16</span>:<span class="number">38</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> setproctitle: master</span><br><span class="line">root      <span class="number">2585</span>  <span class="number">2584</span>  <span class="number">0</span> <span class="number">16</span>:<span class="number">38</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> setproctitle: worker</span><br><span class="line">root      <span class="number">2590</span> <span class="number">20422</span>  <span class="number">0</span> <span class="number">16</span>:<span class="number">38</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=<span class="built_in">auto</span> setproc</span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>上述代码可以完美的修改进程名，但是如果你使用查看进程信息可能还会看到旧的进程名：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># ps -ef |grep setproc</span><br><span class="line">root      <span class="number">2584</span> <span class="number">12289</span>  <span class="number">0</span> <span class="number">16</span>:<span class="number">38</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> setproctitle: master</span><br><span class="line">root      <span class="number">2585</span>  <span class="number">2584</span>  <span class="number">0</span> <span class="number">16</span>:<span class="number">38</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> setproctitle: worker</span><br><span class="line">root      <span class="number">2670</span> <span class="number">20422</span>  <span class="number">0</span> <span class="number">16</span>:<span class="number">39</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=<span class="built_in">auto</span> setproc</span><br><span class="line"></span><br><span class="line"># cat /proc/<span class="number">2585</span>/status |grep Name</span><br><span class="line">Name:main</span><br><span class="line"></span><br><span class="line"># cat /proc/<span class="number">2584</span>/status |grep Name</span><br><span class="line">Name:main</span><br></pre></td></tr></table></figure><p>这个时候可以结合 prctl 使用：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prctl(PR_SET_NAME, <span class="keyword">new</span><span class="type">_name</span>);</span><br></pre></td></tr></table></figure><p>具体可以查看相关资料。</p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#x69;&#x6e;&#x75;&#x78;&#99;&#111;&#100;&#x65;&#x32;&#x6e;&#x69;&#x6b;&#x69;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#x6c;&#x69;&#x6e;&#x75;&#x78;&#99;&#111;&#100;&#x65;&#x32;&#x6e;&#x69;&#x6b;&#x69;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a></p></li></ul><p>2020-10-25 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nginx-进程名&quot;&gt;&lt;a href=&quot;#nginx-进程名&quot; class=&quot;headerlink&quot; title=&quot;nginx 进程名&quot;&gt;&lt;/a&gt;nginx 进程名&lt;/h1&gt;&lt;p&gt;使用 nginx 的过程中，我们经常看到 nginx 的进程名是不同的，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ps -ef |grep nginx &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;smaug    &lt;span class=&quot;number&quot;&gt;1183&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1115&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;05&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;46&lt;/span&gt; pts/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; grep --color=&lt;span class=&quot;built_in&quot;&gt;auto&lt;/span&gt; nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root     &lt;span class=&quot;number&quot;&gt;14201&lt;/span&gt;     &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;2019&lt;/span&gt; ?        &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; nginx: master process ./sbin/nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nobody   &lt;span class=&quot;number&quot;&gt;28887&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;14201&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; Oct14 ?        &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; nginx: worker process&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nobody   &lt;span class=&quot;number&quot;&gt;28888&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;14201&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; Oct14 ?        &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; nginx: worker process&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到 nginx 的进程名是不同的，那么它是怎么做到的呢？&lt;/p&gt;
&lt;h1 id=&quot;argv-0&quot;&gt;&lt;a href=&quot;#argv-0&quot; class=&quot;headerlink&quot; title=&quot;argv[0]&quot;&gt;&lt;/a&gt;argv[0]&lt;/h1&gt;&lt;p&gt;首先来看一下 C 语言中的 main 函数的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这个应该大家都是比较熟悉的，argc 表示命令行参数个数， argv 保存了各个命令行参数的内容。&lt;strong&gt;其中 &lt;code&gt;argv[0]&lt;/code&gt; 表示的是进程的名字&lt;/strong&gt;，这就是修改进程名的关键点所在。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只需要修改  argv[0] 的值即可完成修改进程名&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#hello-world&quot; class=&quot;headerlink&quot; title=&quot;hello world&quot;&gt;&lt;/a&gt;hello world&lt;/h2&gt;&lt;p&gt;下面以程序员经典入门代码为例说明：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// filename: hello_world_setproctitle.cc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// build: g++ hello_world_setproctitle.cc -o hello_world_setproctitle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello world\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// block here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c = getchar();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;编译运行：&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;g&lt;/span&gt;++ &lt;span class=&quot;comment&quot;&gt;hello_world_setproctitle&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;hello_world_setproctitle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/hello_world_setproctitle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;查看一下进程名：&lt;/p&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# ps -ef |grep hello_world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root     &lt;span class=&quot;number&quot;&gt;26356&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12289&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt; pts/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; ./hello_world_setproctitle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root     &lt;span class=&quot;number&quot;&gt;26366&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20422&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt; pts/&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; grep --color=&lt;span class=&quot;built_in&quot;&gt;auto&lt;/span&gt; hello_world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="c++" scheme="https://rebootcat.com/categories/c/"/>
    
    
      <category term="c++" scheme="https://rebootcat.com/tags/c/"/>
    
      <category term="nginx" scheme="https://rebootcat.com/tags/nginx/"/>
    
      <category term="setproctitle" scheme="https://rebootcat.com/tags/setproctitle/"/>
    
      <category term="fork" scheme="https://rebootcat.com/tags/fork/"/>
    
  </entry>
  
  <entry>
    <title>epoll 入门例子 tcp server/client</title>
    <link href="https://rebootcat.com/2020/09/26/epoll_examples/"/>
    <id>https://rebootcat.com/2020/09/26/epoll_examples/</id>
    <published>2020-09-26T03:50:58.000Z</published>
    <updated>2020-09-27T14:28:14.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复习一下"><a href="#复习一下" class="headerlink" title="复习一下"></a>复习一下</h1><p>上一篇博文 <a href="https://rebootcat.com/2020/09/26/epoll_cookbook/">epoll原理深入分析</a> 详细分析了 epoll 底层的实现原理，如果对 epoll 原理有模糊的建议先看一下这篇文章。那么本文就开始用 epoll 实现一个简单的 tcp server/client。</p><p>本文基于我的 github: <a href="https://github.com/smaugx/epoll_examples" target="_blank" rel="noopener">https://github.com/smaugx/epoll_examples</a>。</p><h1 id="epoll-实现范式"><a href="#epoll-实现范式" class="headerlink" title="epoll 实现范式"></a>epoll 实现范式</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># create listen socket</span></span><br><span class="line"><span class="keyword">int</span> listenfd = ::socket();</span><br><span class="line"></span><br><span class="line"><span class="meta"># bind to local port and ip</span></span><br><span class="line"><span class="keyword">int</span> r = ::bind();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># create epoll instance and get an epoll-fd</span></span><br><span class="line"><span class="keyword">int</span> epollfd = epoll_create(<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="meta"># add listenfd to epoll instance</span></span><br><span class="line"><span class="keyword">int</span> r = epoll_ctl(..., listenfd, ...);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># begin epoll_wait, wait for ready socket</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>* <span class="title">alive_events</span> =  <span class="title">static_cast</span>&lt;epoll_event*&gt;(<span class="title">calloc</span>(<span class="title">kMaxEvents</span>, <span class="title">sizeof</span>(<span class="title">epoll_event</span>)));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = epoll_wait(epollfd, alive_events, kMaxEvents, kEpollWaitTime);</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> fd = alive_events[i].data.fd;</span><br><span class="line">            <span class="keyword">int</span> events = alive_events[i].events;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ( (events &amp; EPOLLERR) || (events &amp; EPOLLHUP) ) &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"epoll_wait error!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="comment">// An error has occured on this fd, or the socket is not ready for reading (why were we notified then?).</span></span><br><span class="line">                ::<span class="built_in">close</span>(fd);</span><br><span class="line">            &#125; <span class="keyword">else</span>  <span class="keyword">if</span> (events &amp; EPOLLRDHUP) &#123;</span><br><span class="line">                <span class="comment">// Stream socket peer closed connection, or shut down writing half of connection.</span></span><br><span class="line">                <span class="comment">// more inportant, We still to handle disconnection when read()/recv() return 0 or -1 just to be sure.</span></span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fd:"</span> &lt;&lt; fd &lt;&lt; <span class="string">" closed EPOLLRDHUP!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="comment">// close fd and epoll will remove it</span></span><br><span class="line">                ::<span class="built_in">close</span>(fd);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( events &amp; EPOLLIN ) &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"epollin"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">if</span> (fd == handle_) &#123;</span><br><span class="line">                    <span class="comment">// listen fd coming connections</span></span><br><span class="line">                    OnSocketAccept();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// other fd read event coming, meaning data coming</span></span><br><span class="line">                    OnSocketRead(fd);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( events &amp; EPOLLOUT ) &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"epollout"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="comment">// write event for fd (not including listen-fd), meaning send buffer is available for big files</span></span><br><span class="line">                OnSocketWrite(fd);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"unknow epoll event!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// end for (int i = 0; ...</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>epoll 编程基本是按照上面的范式进行的，这里要注意的是上面的反应的只是单进程或者单线程的情况。</p><p>如果涉及到多线程或者多进程，那么通常来说会在 listen() 创建完成之后，创建多线程或者多进程，然后再操作 epoll.</p><a id="more"></a><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> listenfd = ::socket<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> p = fork<span class="literal">()</span> # 多进程 或者多线程创建</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> r = epoll<span class="constructor">_ctl(<span class="operator">...</span>, <span class="params">listenfd</span>, <span class="operator">...</span>)</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">int</span> num = epoll<span class="constructor">_wait(<span class="params">epollfd</span>, <span class="params">alive_events</span>, <span class="params">kMaxEvents</span>, <span class="params">kEpollWaitTime</span>)</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，多线程版本也是一样，把上面的 fork() 替换成 thread 创建即可。</p><p>也就是 listenfd 被添加到了多个进程或者多个线程中，提高吞吐量。这就是基本的 epoll 多进程或者多线程编程范式。</p><p>但本文就先讨论单进程（单线程）版本的 epoll 实现。</p><h1 id="epoll-tcp-server"><a href="#epoll-tcp-server" class="headerlink" title="epoll tcp server"></a>epoll tcp server</h1><p>先上代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mux &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> transport &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint32_t</span> kEpollWaitTime = <span class="number">10</span>; <span class="comment">// epoll wait timeout 10 ms</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint32_t</span> kMaxEvents = <span class="number">100</span>;    <span class="comment">// epoll wait return max size</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// packet of send/recv binary content</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Packet</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Packet()</span><br><span class="line">        : msg &#123; <span class="string">""</span> &#125; &#123;&#125;</span><br><span class="line">    Packet(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; msg)</span><br><span class="line">        : msg &#123; msg &#125; &#123;&#125;</span><br><span class="line">    Packet(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; msg)</span><br><span class="line">        : fd(fd),</span><br><span class="line">          msg(msg) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd &#123; <span class="number">-1</span> &#125;;     <span class="comment">// meaning socket</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> msg;   <span class="comment">// real binary content</span></span><br><span class="line">&#125; Packet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Packet&gt; PacketPtr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// callback when packet received</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">callback_recv_t</span> = <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">const</span> PacketPtr&amp; data)&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// base class of EpollTcpServer, focus on Start(), Stop(), SendData(), RegisterOnRecvCallback()...</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EpollTcpBase</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    EpollTcpBase()                                     = <span class="keyword">default</span>;</span><br><span class="line">    EpollTcpBase(<span class="keyword">const</span> EpollTcpBase&amp; other)            = <span class="keyword">delete</span>;</span><br><span class="line">    EpollTcpBase&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> EpollTcpBase&amp; other) = <span class="keyword">delete</span>;</span><br><span class="line">    EpollTcpBase(EpollTcpBase&amp;&amp; other)                 = <span class="keyword">delete</span>;</span><br><span class="line">    EpollTcpBase&amp; <span class="keyword">operator</span>=(EpollTcpBase&amp;&amp; other)      = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~EpollTcpBase()                            = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Start</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Stop</span><span class="params">()</span>  </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int32_t</span> <span class="title">SendData</span><span class="params">(<span class="keyword">const</span> PacketPtr&amp; data)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">RegisterOnRecvCallback</span><span class="params">(<span class="keyword">callback_recv_t</span> callback)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">UnRegisterOnRecvCallback</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ETBase = EpollTcpBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;ETBase&gt; ETBasePtr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the implementation of Epoll Tcp Server</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EpollTcpServer</span> :</span> <span class="keyword">public</span> ETBase &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    EpollTcpServer()                                       = <span class="keyword">default</span>;</span><br><span class="line">    EpollTcpServer(<span class="keyword">const</span> EpollTcpServer&amp; other)            = <span class="keyword">delete</span>;</span><br><span class="line">    EpollTcpServer&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> EpollTcpServer&amp; other) = <span class="keyword">delete</span>;</span><br><span class="line">    EpollTcpServer(EpollTcpServer&amp;&amp; other)                 = <span class="keyword">delete</span>;</span><br><span class="line">    EpollTcpServer&amp; <span class="keyword">operator</span>=(EpollTcpServer&amp;&amp; other)      = <span class="keyword">delete</span>;</span><br><span class="line">    ~EpollTcpServer() <span class="keyword">override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the local ip and port of tcp server</span></span><br><span class="line">    EpollTcpServer(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; local_ip, <span class="keyword">uint16_t</span> local_port);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// start tcp server</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Start</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="comment">// stop tcp server</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Stop</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="comment">// send packet</span></span><br><span class="line">    <span class="function"><span class="keyword">int32_t</span> <span class="title">SendData</span><span class="params">(<span class="keyword">const</span> PacketPtr&amp; data)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="comment">// register a callback when packet received</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RegisterOnRecvCallback</span><span class="params">(<span class="keyword">callback_recv_t</span> callback)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UnRegisterOnRecvCallback</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// create epoll instance using epoll_create and return a fd of epoll</span></span><br><span class="line">    <span class="function"><span class="keyword">int32_t</span> <span class="title">CreateEpoll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// create a socket fd using api socket()</span></span><br><span class="line">    <span class="function"><span class="keyword">int32_t</span> <span class="title">CreateSocket</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// set socket noblock</span></span><br><span class="line">    <span class="function"><span class="keyword">int32_t</span> <span class="title">MakeSocketNonBlock</span><span class="params">(<span class="keyword">int32_t</span> fd)</span></span>;</span><br><span class="line">    <span class="comment">// listen()</span></span><br><span class="line">    <span class="function"><span class="keyword">int32_t</span> <span class="title">Listen</span><span class="params">(<span class="keyword">int32_t</span> listenfd)</span></span>;</span><br><span class="line">    <span class="comment">// add/modify/remove a item(socket/fd) in epoll instance(rbtree), for this example, just add a socket to epoll rbtree</span></span><br><span class="line">    <span class="function"><span class="keyword">int32_t</span> <span class="title">UpdateEpollEvents</span><span class="params">(<span class="keyword">int</span> efd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, <span class="keyword">int</span> events)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// handle tcp accept event</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnSocketAccept</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// handle tcp socket readable event(read())</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnSocketRead</span><span class="params">(<span class="keyword">int32_t</span> fd)</span></span>;</span><br><span class="line">    <span class="comment">// handle tcp socket writeable event(write())</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnSocketWrite</span><span class="params">(<span class="keyword">int32_t</span> fd)</span></span>;</span><br><span class="line">    <span class="comment">// one loop per thread, call epoll_wait and return ready socket(accept,readable,writeable,error...)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">EpollLoop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> local_ip_; <span class="comment">// tcp local ip</span></span><br><span class="line">    <span class="keyword">uint16_t</span> local_port_ &#123; <span class="number">0</span> &#125;; <span class="comment">// tcp bind local port</span></span><br><span class="line">    <span class="keyword">int32_t</span> handle_ &#123; <span class="number">-1</span> &#125;; <span class="comment">// listenfd</span></span><br><span class="line">    <span class="keyword">int32_t</span> efd_ &#123; <span class="number">-1</span> &#125;; <span class="comment">// epoll fd</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="built_in">std</span>::thread&gt; th_loop_ &#123; <span class="literal">nullptr</span> &#125;; <span class="comment">// one loop per thread(call epoll_wait in loop)</span></span><br><span class="line">    <span class="keyword">bool</span> loop_flag_ &#123; <span class="literal">true</span> &#125;; <span class="comment">// if loop_flag_ is false, then exit the epoll loop</span></span><br><span class="line">    <span class="keyword">callback_recv_t</span> recv_callback_ &#123; <span class="literal">nullptr</span> &#125;; <span class="comment">// callback when received</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ETServer = EpollTcpServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;ETServer&gt; ETServerPtr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EpollTcpServer::EpollTcpServer(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; local_ip, <span class="keyword">uint16_t</span> local_port)</span><br><span class="line">    : local_ip_ &#123; local_ip &#125;,</span><br><span class="line">      local_port_ &#123; local_port &#125; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EpollTcpServer::~EpollTcpServer() &#123;</span><br><span class="line">    Stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EpollTcpServer::Start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// create epoll instance</span></span><br><span class="line">    <span class="keyword">if</span> (CreateEpoll() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// create socket and bind</span></span><br><span class="line">    <span class="keyword">int</span> listenfd = CreateSocket();</span><br><span class="line">    <span class="keyword">if</span> (listenfd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// set listen socket noblock</span></span><br><span class="line">    <span class="keyword">int</span> mr = MakeSocketNonBlock(listenfd);</span><br><span class="line">    <span class="keyword">if</span> (mr &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call listen()</span></span><br><span class="line">    <span class="keyword">int</span> lr = Listen(listenfd);</span><br><span class="line">    <span class="keyword">if</span> (lr &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"EpollTcpServer Init success!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    handle_ = listenfd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add listen socket to epoll instance, and focus on event EPOLLIN and EPOLLOUT, actually EPOLLIN is enough</span></span><br><span class="line">    <span class="keyword">int</span> er = UpdateEpollEvents(efd_, EPOLL_CTL_ADD, handle_, EPOLLIN | EPOLLET);</span><br><span class="line">    <span class="keyword">if</span> (er &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// if something goes wrong, close listen socket and return false</span></span><br><span class="line">        ::<span class="built_in">close</span>(handle_);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    assert(!th_loop_);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the implementation of one loop per thread: create a thread to loop epoll</span></span><br><span class="line">    th_loop_ = <span class="built_in">std</span>::make_shared&lt;<span class="built_in">std</span>::thread&gt;(&amp;EpollTcpServer::EpollLoop, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (!th_loop_) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// detach the thread(using loop_flag_ to control the start/stop of loop)</span></span><br><span class="line">    th_loop_-&gt;<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// stop epoll tcp server and release epoll</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EpollTcpServer::Stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// set loop_flag_ false to stop epoll loop</span></span><br><span class="line">    loop_flag_ = <span class="literal">false</span>;</span><br><span class="line">    ::<span class="built_in">close</span>(handle_);</span><br><span class="line">    ::<span class="built_in">close</span>(efd_);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"stop epoll!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    UnRegisterOnRecvCallback();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">EpollTcpServer::CreateEpoll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// the basic epoll api of create a epoll instance</span></span><br><span class="line">    <span class="keyword">int</span> epollfd = epoll_create(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (epollfd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// if something goes wrong, return -1</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"epoll_create failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    efd_ = epollfd;</span><br><span class="line">    <span class="keyword">return</span> epollfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">EpollTcpServer::CreateSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// create tcp socket</span></span><br><span class="line">    <span class="keyword">int</span> listenfd = ::socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (listenfd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"create socket "</span> &lt;&lt; local_ip_ &lt;&lt; <span class="string">":"</span> &lt;&lt; local_port_ &lt;&lt; <span class="string">" failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(local_port_);</span><br><span class="line">    addr.sin_addr.s_addr  = inet_addr(local_ip_.c_str());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bind to local ip and local port</span></span><br><span class="line">    <span class="keyword">int</span> r = ::bind(listenfd, (struct sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(struct sockaddr));</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"bind socket "</span> &lt;&lt; local_ip_ &lt;&lt; <span class="string">":"</span> &lt;&lt; local_port_ &lt;&lt; <span class="string">" failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        ::<span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"create and bind socket "</span> &lt;&lt; local_ip_ &lt;&lt; <span class="string">":"</span> &lt;&lt; local_port_ &lt;&lt; <span class="string">" success!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> listenfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set noblock fd</span></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">EpollTcpServer::MakeSocketNonBlock</span><span class="params">(<span class="keyword">int32_t</span> fd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flags = fcntl(fd, F_GETFL, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (flags &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fcntl failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> r = fcntl(fd, F_SETFL, flags | O_NONBLOCK);</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fcntl failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call listen() api and set listen queue size using SOMAXCONN</span></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">EpollTcpServer::Listen</span><span class="params">(<span class="keyword">int32_t</span> listenfd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = ::<span class="built_in">listen</span>(listenfd, SOMAXCONN);</span><br><span class="line">    <span class="keyword">if</span> ( r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"listen failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add/modify/remove a item(socket/fd) in epoll instance(rbtree), for this example, just add a socket to epoll rbtree</span></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">EpollTcpServer::UpdateEpollEvents</span><span class="params">(<span class="keyword">int</span> efd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, <span class="keyword">int</span> events)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;ev, <span class="number">0</span>, <span class="keyword">sizeof</span>(ev));</span><br><span class="line">    ev.events = events;</span><br><span class="line">    ev.data.fd = fd; <span class="comment">// ev.data is a enum</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">"%s fd %d events read %d write %d\n"</span>, op == EPOLL_CTL_MOD ? <span class="string">"mod"</span> : <span class="string">"add"</span>, fd, ev.events &amp; EPOLLIN, ev.events &amp; EPOLLOUT);</span><br><span class="line">    <span class="keyword">int</span> r = epoll_ctl(efd, op, fd, &amp;ev);</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"epoll_ctl failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handle accept event</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EpollTcpServer::OnSocketAccept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// epoll working on et mode, must read all coming data, so use a while loop here</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">in_addr</span>;</span></span><br><span class="line">        <span class="keyword">socklen_t</span> in_len = <span class="keyword">sizeof</span>(in_addr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// accept a new connection and get a new socket</span></span><br><span class="line">        <span class="keyword">int</span> cli_fd = accept(handle_, (struct sockaddr*)&amp;in_addr, &amp;in_len);</span><br><span class="line">        <span class="keyword">if</span> (cli_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( (errno == EAGAIN) || (errno == EWOULDBLOCK) ) &#123;</span><br><span class="line">                <span class="comment">// read all accept finished(epoll et mode only trigger one time,so must read all data in listen socket)</span></span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"accept all coming connections!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"accept error!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sockaddr_in peer;</span><br><span class="line">        <span class="keyword">socklen_t</span> p_len = <span class="keyword">sizeof</span>(peer);</span><br><span class="line">        <span class="comment">// get client ip and port</span></span><br><span class="line">        <span class="keyword">int</span> r = getpeername(cli_fd, (struct sockaddr*)&amp;peer, &amp;p_len);</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"getpeername error!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"accpet connection from "</span> &lt;&lt; inet_ntoa(in_addr.sin_addr) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> mr = MakeSocketNonBlock(cli_fd);</span><br><span class="line">        <span class="keyword">if</span> (mr &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ::<span class="built_in">close</span>(cli_fd);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  add this new socket to epoll instance, and focus on EPOLLIN and EPOLLOUT and EPOLLRDHUP event</span></span><br><span class="line">        <span class="keyword">int</span> er = UpdateEpollEvents(efd_, EPOLL_CTL_ADD, cli_fd, EPOLLIN | EPOLLRDHUP | EPOLLET);</span><br><span class="line">        <span class="keyword">if</span> (er &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="comment">// if something goes wrong, close this new socket</span></span><br><span class="line">            ::<span class="built_in">close</span>(cli_fd);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// register a callback when packet received</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EpollTcpServer::RegisterOnRecvCallback</span><span class="params">(<span class="keyword">callback_recv_t</span> callback)</span> </span>&#123;</span><br><span class="line">    assert(!recv_callback_);</span><br><span class="line">    recv_callback_ = callback;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EpollTcpServer::UnRegisterOnRecvCallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assert(recv_callback_);</span><br><span class="line">    recv_callback_ = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handle read events on fd</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EpollTcpServer::OnSocketRead</span><span class="params">(<span class="keyword">int32_t</span> fd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> read_buf[<span class="number">4096</span>];</span><br><span class="line">    bzero(read_buf, <span class="keyword">sizeof</span>(read_buf));</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// epoll working on et mode, must read all data</span></span><br><span class="line">    <span class="keyword">while</span> ( (n = ::<span class="built_in">read</span>(fd, read_buf, <span class="keyword">sizeof</span>(read_buf))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// callback for recv</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fd: "</span> &lt;&lt; fd &lt;&lt;  <span class="string">" recv: "</span> &lt;&lt; read_buf &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">msg</span><span class="params">(read_buf, n)</span></span>;</span><br><span class="line">        <span class="comment">// create a recv packet</span></span><br><span class="line">        PacketPtr data = <span class="built_in">std</span>::make_shared&lt;Packet&gt;(fd, msg);</span><br><span class="line">        <span class="keyword">if</span> (recv_callback_) &#123;</span><br><span class="line">            <span class="comment">// handle recv packet</span></span><br><span class="line">            recv_callback_(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno == EAGAIN || errno == EWOULDBLOCK) &#123;</span><br><span class="line">            <span class="comment">// read all data finished</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// something goes wrong for this fd, should close it</span></span><br><span class="line">        ::<span class="built_in">close</span>(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// this may happen when client close socket. EPOLLRDHUP usually handle this, but just make sure; should close this fd</span></span><br><span class="line">        ::<span class="built_in">close</span>(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handle write events on fd (usually happens when sending big files)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EpollTcpServer::OnSocketWrite</span><span class="params">(<span class="keyword">int32_t</span> fd)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO(smaugx) not care for now</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fd: "</span> &lt;&lt; fd &lt;&lt; <span class="string">" writeable!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// send packet</span></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">EpollTcpServer::SendData</span><span class="params">(<span class="keyword">const</span> PacketPtr&amp; data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (data-&gt;fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// send packet on fd</span></span><br><span class="line">    <span class="keyword">int</span> r = ::<span class="built_in">write</span>(data-&gt;fd, data-&gt;msg.data(), data-&gt;msg.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno == EAGAIN || errno == EWOULDBLOCK) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// error happend</span></span><br><span class="line">        ::<span class="built_in">close</span>(data-&gt;fd);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fd: "</span> &lt;&lt; data-&gt;fd &lt;&lt; <span class="string">" write error, close it!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fd: "</span> &lt;&lt; data-&gt;fd &lt;&lt; <span class="string">" write size: "</span> &lt;&lt; r &lt;&lt; <span class="string">" ok!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// one loop per thread, call epoll_wait and handle all coming events</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EpollTcpServer::EpollLoop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// request some memory, if events ready, socket events will copy to this memory from kernel</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>* <span class="title">alive_events</span> =  <span class="title">static_cast</span>&lt;epoll_event*&gt;(<span class="title">calloc</span>(<span class="title">kMaxEvents</span>, <span class="title">sizeof</span>(<span class="title">epoll_event</span>)));</span></span><br><span class="line">    <span class="keyword">if</span> (!alive_events) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"calloc memory failed for epoll_events!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if loop_flag_ is false, will exit this loop</span></span><br><span class="line">    <span class="keyword">while</span> (loop_flag_) &#123;</span><br><span class="line">        <span class="comment">// call epoll_wait and return ready socket</span></span><br><span class="line">        <span class="keyword">int</span> num = epoll_wait(efd_, alive_events, kMaxEvents, kEpollWaitTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">            <span class="comment">// get fd</span></span><br><span class="line">            <span class="keyword">int</span> fd = alive_events[i].data.fd;</span><br><span class="line">            <span class="comment">// get events(readable/writeable/error)</span></span><br><span class="line">            <span class="keyword">int</span> events = alive_events[i].events;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ( (events &amp; EPOLLERR) || (events &amp; EPOLLHUP) ) &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"epoll_wait error!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="comment">// An error has occured on this fd, or the socket is not ready for reading (why were we notified then?).</span></span><br><span class="line">                ::<span class="built_in">close</span>(fd);</span><br><span class="line">            &#125; <span class="keyword">else</span>  <span class="keyword">if</span> (events &amp; EPOLLRDHUP) &#123;</span><br><span class="line">                <span class="comment">// Stream socket peer closed connection, or shut down writing half of connection.</span></span><br><span class="line">                <span class="comment">// more inportant, We still to handle disconnection when read()/recv() return 0 or -1 just to be sure.</span></span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fd:"</span> &lt;&lt; fd &lt;&lt; <span class="string">" closed EPOLLRDHUP!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="comment">// close fd and epoll will remove it</span></span><br><span class="line">                ::<span class="built_in">close</span>(fd);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( events &amp; EPOLLIN ) &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"epollin"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">if</span> (fd == handle_) &#123;</span><br><span class="line">                    <span class="comment">// listen fd coming connections</span></span><br><span class="line">                    OnSocketAccept();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// other fd read event coming, meaning data coming</span></span><br><span class="line">                    OnSocketRead(fd);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( events &amp; EPOLLOUT ) &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"epollout"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="comment">// write event for fd (not including listen-fd), meaning send buffer is available for big files</span></span><br><span class="line">                OnSocketWrite(fd);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"unknow epoll event!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// end for (int i = 0; ...</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">// end while (loop_flag_)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(alive_events);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// end namespace transport</span></span><br><span class="line">&#125; <span class="comment">// end namespace mux</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mux;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> transport;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> local_ip &#123;<span class="string">"127.0.0.1"</span>&#125;;</span><br><span class="line">    <span class="keyword">uint16_t</span> local_port &#123; <span class="number">6666</span> &#125;;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        local_ip = <span class="built_in">std</span>::<span class="built_in">string</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">        local_port = <span class="built_in">std</span>::atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// create a epoll tcp server</span></span><br><span class="line">    <span class="keyword">auto</span> epoll_server = <span class="built_in">std</span>::make_shared&lt;EpollTcpServer&gt;(local_ip, local_port);</span><br><span class="line">    <span class="keyword">if</span> (!epoll_server) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"tcp_server create faield!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// recv callback in lambda mode, you can set your own callback here</span></span><br><span class="line">    <span class="keyword">auto</span> recv_call = [&amp;](<span class="keyword">const</span> PacketPtr&amp; data) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="comment">// just echo packet</span></span><br><span class="line">        epoll_server-&gt;SendData(data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// register recv callback to epoll tcp server</span></span><br><span class="line">    epoll_server-&gt;RegisterOnRecvCallback(recv_call);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start the epoll tcp server</span></span><br><span class="line">    <span class="keyword">if</span> (!epoll_server-&gt;Start()) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"tcp_server start failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"############tcp_server started!################"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// block here</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    epoll_server-&gt;Stop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码看起来有点多，不过仔细分析下，其实也比较容易掌握。</p><p>核心的类是 <strong>EpollTcpServer</strong>，创建一个 <strong>EpllTcpServer</strong> 实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> epoll_server = <span class="built_in">std</span>::make_shared&lt;EpollTcpServer&gt;(local_ip, local_port);</span><br></pre></td></tr></table></figure><p>注册一个收包处理回调函数：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section"># 这里直接注册一个 echo 函数（可以替换成其他的处理函数）</span></span><br><span class="line">auto recv_call = [<span class="string">&amp;</span>](<span class="link">const PacketPtr&amp; data</span>) -&gt; void &#123;</span><br><span class="line"><span class="code">    epoll_server-&gt;SendData(data);</span></span><br><span class="line"><span class="code">    return;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">epoll<span class="emphasis">_server-&gt;RegisterOnRecvCallback(recv_</span>call);</span><br></pre></td></tr></table></figure><p>启动 tcp server:</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">epoll_server</span>-&gt;</span>Start();</span><br></pre></td></tr></table></figure><p>是不是很简单？至于 Start() 函数内部，其实实现的就是 epoll 编程范式的细节。</p><p>代码细节应该比较好理解的，可以参考 <a href="https://github.com/smaugx/epoll_examples/blob/master/README.md" target="_blank" rel="noopener">https://github.com/smaugx/epoll_examples/blob/master/README.md</a></p><h1 id="epoll-tcp-client"><a href="#epoll-tcp-client" class="headerlink" title="epoll tcp client"></a>epoll tcp client</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// actually no need to implement a tcp client using epoll</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mux &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> transport &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint32_t</span> kEpollWaitTime = <span class="number">10</span>; <span class="comment">// epoll wait timeout 10 ms</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint32_t</span> kMaxEvents = <span class="number">100</span>;    <span class="comment">// epoll wait return max size</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Packet</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Packet()</span><br><span class="line">        : msg &#123; <span class="string">""</span> &#125; &#123;&#125;</span><br><span class="line">    Packet(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; msg)</span><br><span class="line">        : msg &#123; msg &#125; &#123;&#125;</span><br><span class="line">    Packet(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; msg)</span><br><span class="line">        : fd(fd),</span><br><span class="line">          msg(msg) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd &#123; <span class="number">-1</span> &#125;;     <span class="comment">// meaning socket</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> msg;   <span class="comment">// real binary content</span></span><br><span class="line">&#125; Packet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Packet&gt; PacketPtr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// callback when packet received</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">callback_recv_t</span> = <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">const</span> PacketPtr&amp; data)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// base class of EpollTcpServer, focus on Start(), Stop(), SendData(), RegisterOnRecvCallback()...</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EpollTcpBase</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    EpollTcpBase()                                     = <span class="keyword">default</span>;</span><br><span class="line">    EpollTcpBase(<span class="keyword">const</span> EpollTcpBase&amp; other)            = <span class="keyword">delete</span>;</span><br><span class="line">    EpollTcpBase&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> EpollTcpBase&amp; other) = <span class="keyword">delete</span>;</span><br><span class="line">    EpollTcpBase(EpollTcpBase&amp;&amp; other)                 = <span class="keyword">delete</span>;</span><br><span class="line">    EpollTcpBase&amp; <span class="keyword">operator</span>=(EpollTcpBase&amp;&amp; other)      = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~EpollTcpBase()                            = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Start</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Stop</span><span class="params">()</span>  </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int32_t</span> <span class="title">SendData</span><span class="params">(<span class="keyword">const</span> PacketPtr&amp; data)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">RegisterOnRecvCallback</span><span class="params">(<span class="keyword">callback_recv_t</span> callback)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">UnRegisterOnRecvCallback</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ETBase = EpollTcpBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;ETBase&gt; ETBasePtr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// the implementation of Epoll Tcp client</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EpollTcpClient</span> :</span> <span class="keyword">public</span> ETBase &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    EpollTcpClient()                                       = <span class="keyword">default</span>;</span><br><span class="line">    EpollTcpClient(<span class="keyword">const</span> EpollTcpClient&amp; other)            = <span class="keyword">delete</span>;</span><br><span class="line">    EpollTcpClient&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> EpollTcpClient&amp; other) = <span class="keyword">delete</span>;</span><br><span class="line">    EpollTcpClient(EpollTcpClient&amp;&amp; other)                 = <span class="keyword">delete</span>;</span><br><span class="line">    EpollTcpClient&amp; <span class="keyword">operator</span>=(EpollTcpClient&amp;&amp; other)      = <span class="keyword">delete</span>;</span><br><span class="line">    ~EpollTcpClient() <span class="keyword">override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the server ip and port</span></span><br><span class="line">    EpollTcpClient(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; server_ip, <span class="keyword">uint16_t</span> server_port);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// start tcp client</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Start</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="comment">// stop tcp client</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Stop</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="comment">// send packet</span></span><br><span class="line">    <span class="function"><span class="keyword">int32_t</span> <span class="title">SendData</span><span class="params">(<span class="keyword">const</span> PacketPtr&amp; data)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="comment">// register a callback when packet received</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RegisterOnRecvCallback</span><span class="params">(<span class="keyword">callback_recv_t</span> callback)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UnRegisterOnRecvCallback</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// create epoll instance using epoll_create and return a fd of epoll</span></span><br><span class="line">    <span class="function"><span class="keyword">int32_t</span> <span class="title">CreateEpoll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// create a socket fd using api socket()</span></span><br><span class="line">    <span class="function"><span class="keyword">int32_t</span> <span class="title">CreateSocket</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// connect to server</span></span><br><span class="line">    <span class="function"><span class="keyword">int32_t</span> <span class="title">Connect</span><span class="params">(<span class="keyword">int32_t</span> listenfd)</span></span>;</span><br><span class="line">    <span class="comment">// add/modify/remove a item(socket/fd) in epoll instance(rbtree), for this example, just add a socket to epoll rbtree</span></span><br><span class="line">    <span class="function"><span class="keyword">int32_t</span> <span class="title">UpdateEpollEvents</span><span class="params">(<span class="keyword">int</span> efd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, <span class="keyword">int</span> events)</span></span>;</span><br><span class="line">    <span class="comment">// handle tcp socket readable event(read())</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnSocketRead</span><span class="params">(<span class="keyword">int32_t</span> fd)</span></span>;</span><br><span class="line">    <span class="comment">// handle tcp socket writeable event(write())</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnSocketWrite</span><span class="params">(<span class="keyword">int32_t</span> fd)</span></span>;</span><br><span class="line">    <span class="comment">// one loop per thread, call epoll_wait and return ready socket(readable,writeable,error...)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">EpollLoop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> server_ip_; <span class="comment">// tcp server ip</span></span><br><span class="line">    <span class="keyword">uint16_t</span> server_port_ &#123; <span class="number">0</span> &#125;; <span class="comment">// tcp server port</span></span><br><span class="line">    <span class="keyword">int32_t</span> handle_ &#123; <span class="number">-1</span> &#125;; <span class="comment">// client fd</span></span><br><span class="line">    <span class="keyword">int32_t</span> efd_ &#123; <span class="number">-1</span> &#125;; <span class="comment">// epoll fd</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="built_in">std</span>::thread&gt; th_loop_ &#123; <span class="literal">nullptr</span> &#125;; <span class="comment">// one loop per thread(call epoll_wait in loop)</span></span><br><span class="line">    <span class="keyword">bool</span> loop_flag_ &#123; <span class="literal">true</span> &#125;; <span class="comment">// if loop_flag_ is false, then exit the epoll loop</span></span><br><span class="line">    <span class="keyword">callback_recv_t</span> recv_callback_ &#123; <span class="literal">nullptr</span> &#125;; <span class="comment">// callback when received</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ETClient = EpollTcpClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;ETClient&gt; ETClientPtr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EpollTcpClient::EpollTcpClient(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; server_ip, <span class="keyword">uint16_t</span> server_port)</span><br><span class="line">    : server_ip_ &#123; server_ip &#125;,</span><br><span class="line">      server_port_ &#123; server_port &#125; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EpollTcpClient::~EpollTcpClient() &#123;</span><br><span class="line">    Stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EpollTcpClient::Start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// create epoll instance</span></span><br><span class="line">    <span class="keyword">if</span> (CreateEpoll() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// create socket and bind</span></span><br><span class="line">    <span class="keyword">int</span> cli_fd  = CreateSocket();</span><br><span class="line">    <span class="keyword">if</span> (cli_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect to server</span></span><br><span class="line">    <span class="keyword">int</span> lr = Connect(cli_fd);</span><br><span class="line">    <span class="keyword">if</span> (lr &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"EpollTcpClient Init success!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    handle_ = cli_fd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// after connected successfully, add this socket to epoll instance, and focus on EPOLLIN and EPOLLOUT event</span></span><br><span class="line">    <span class="keyword">int</span> er = UpdateEpollEvents(efd_, EPOLL_CTL_ADD, handle_, EPOLLIN | EPOLLET);</span><br><span class="line">    <span class="keyword">if</span> (er &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// if something goes wrong, close listen socket and return false</span></span><br><span class="line">        ::<span class="built_in">close</span>(handle_);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    assert(!th_loop_);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the implementation of one loop per thread: create a thread to loop epoll</span></span><br><span class="line">    th_loop_ = <span class="built_in">std</span>::make_shared&lt;<span class="built_in">std</span>::thread&gt;(&amp;EpollTcpClient::EpollLoop, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (!th_loop_) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// detach the thread(using loop_flag_ to control the start/stop of loop)</span></span><br><span class="line">    th_loop_-&gt;<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// stop epoll tcp client and release epoll</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EpollTcpClient::Stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    loop_flag_ = <span class="literal">false</span>;</span><br><span class="line">    ::<span class="built_in">close</span>(handle_);</span><br><span class="line">    ::<span class="built_in">close</span>(efd_);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"stop epoll!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    UnRegisterOnRecvCallback();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">EpollTcpClient::CreateEpoll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// the basic epoll api of create a epoll instance</span></span><br><span class="line">    <span class="keyword">int</span> epollfd = epoll_create(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (epollfd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// if something goes wrong, return -1</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"epoll_create failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    efd_ = epollfd;</span><br><span class="line">    <span class="keyword">return</span> epollfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">EpollTcpClient::CreateSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// create tcp socket</span></span><br><span class="line">    <span class="keyword">int</span> cli_fd = ::socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (cli_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"create socket failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cli_fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// connect to tcp server</span></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">EpollTcpClient::Connect</span><span class="params">(<span class="keyword">int32_t</span> cli_fd)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span>  <span class="comment">// server info</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(server_port_);</span><br><span class="line">    addr.sin_addr.s_addr  = inet_addr(server_ip_.c_str());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> r = ::<span class="built_in">connect</span>(cli_fd, (struct sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span> ( r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"connect failed! r="</span> &lt;&lt; r &lt;&lt; <span class="string">" errno:"</span> &lt;&lt; errno &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add/modify/remove a item(socket/fd) in epoll instance(rbtree), for this example, just add a socket to epoll rbtree</span></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">EpollTcpClient::UpdateEpollEvents</span><span class="params">(<span class="keyword">int</span> efd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, <span class="keyword">int</span> events)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;ev, <span class="number">0</span>, <span class="keyword">sizeof</span>(ev));</span><br><span class="line">    ev.events = events;</span><br><span class="line">    ev.data.fd = fd;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">"%s fd %d events read %d write %d\n"</span>, op == EPOLL_CTL_MOD ? <span class="string">"mod"</span> : <span class="string">"add"</span>, fd, ev.events &amp; EPOLLIN, ev.events &amp; EPOLLOUT);</span><br><span class="line">    <span class="keyword">int</span> r = epoll_ctl(efd, op, fd, &amp;ev);</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"epoll_ctl failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// register a callback when packet received</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EpollTcpClient::RegisterOnRecvCallback</span><span class="params">(<span class="keyword">callback_recv_t</span> callback)</span> </span>&#123;</span><br><span class="line">    assert(!recv_callback_);</span><br><span class="line">    recv_callback_ = callback;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EpollTcpClient::UnRegisterOnRecvCallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assert(recv_callback_);</span><br><span class="line">    recv_callback_ = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handle read events on fd</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EpollTcpClient::OnSocketRead</span><span class="params">(<span class="keyword">int32_t</span> fd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> read_buf[<span class="number">4096</span>];</span><br><span class="line">    bzero(read_buf, <span class="keyword">sizeof</span>(read_buf));</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> ( (n = ::<span class="built_in">read</span>(fd, read_buf, <span class="keyword">sizeof</span>(read_buf))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// callback for recv</span></span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">msg</span><span class="params">(read_buf, n)</span></span>;</span><br><span class="line">        PacketPtr data = <span class="built_in">std</span>::make_shared&lt;Packet&gt;(fd, msg);</span><br><span class="line">        <span class="keyword">if</span> (recv_callback_) &#123;</span><br><span class="line">            <span class="comment">// handle recv packet</span></span><br><span class="line">            recv_callback_(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno == EAGAIN || errno == EWOULDBLOCK) &#123;</span><br><span class="line">            <span class="comment">// read finished</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// something goes wrong for this fd, should close it</span></span><br><span class="line">        ::<span class="built_in">close</span>(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// this may happen when client close socket. EPOLLRDHUP usually handle this, but just make sure; should close this fd</span></span><br><span class="line">        ::<span class="built_in">close</span>(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handle write events on fd (usually happens when sending big files)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EpollTcpClient::OnSocketWrite</span><span class="params">(<span class="keyword">int32_t</span> fd)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fd: "</span> &lt;&lt; fd &lt;&lt; <span class="string">" writeable!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">EpollTcpClient::SendData</span><span class="params">(<span class="keyword">const</span> PacketPtr&amp; data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = ::<span class="built_in">write</span>(handle_, data-&gt;msg.data(), data-&gt;msg.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno == EAGAIN || errno == EWOULDBLOCK) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// error happend</span></span><br><span class="line">        ::<span class="built_in">close</span>(handle_);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fd: "</span> &lt;&lt; handle_ &lt;&lt; <span class="string">" write error, close it!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// one loop per thread, call epoll_wait and handle all coming events</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EpollTcpClient::EpollLoop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// request some memory, if events ready, socket events will copy to this memory from kernel</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>* <span class="title">alive_events</span> =  <span class="title">static_cast</span>&lt;epoll_event*&gt;(<span class="title">calloc</span>(<span class="title">kMaxEvents</span>, <span class="title">sizeof</span>(<span class="title">epoll_event</span>)));</span></span><br><span class="line">    <span class="keyword">if</span> (!alive_events) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"calloc memory failed for epoll_events!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (loop_flag_) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = epoll_wait(efd_, alive_events, kMaxEvents, kEpollWaitTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> fd = alive_events[i].data.fd;</span><br><span class="line">            <span class="keyword">int</span> events = alive_events[i].events;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ( (events &amp; EPOLLERR) || (events &amp; EPOLLHUP) ) &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"epoll_wait error!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="comment">// An error has occured on this fd, or the socket is not ready for reading (why were we notified then?).</span></span><br><span class="line">                ::<span class="built_in">close</span>(fd);</span><br><span class="line">            &#125; <span class="keyword">else</span>  <span class="keyword">if</span> (events &amp; EPOLLRDHUP) &#123;</span><br><span class="line">                <span class="comment">// Stream socket peer closed connection, or shut down writing half of connection.</span></span><br><span class="line">                <span class="comment">// more inportant, We still to handle disconnection when read()/recv() return 0 or -1 just to be sure.</span></span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fd:"</span> &lt;&lt; fd &lt;&lt; <span class="string">" closed EPOLLRDHUP!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="comment">// close fd and epoll will remove it</span></span><br><span class="line">                ::<span class="built_in">close</span>(fd);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( events &amp; EPOLLIN ) &#123;</span><br><span class="line">                <span class="comment">// other fd read event coming, meaning data coming</span></span><br><span class="line">                OnSocketRead(fd);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( events &amp; EPOLLOUT ) &#123;</span><br><span class="line">                <span class="comment">// write event for fd (not including listen-fd), meaning send buffer is available for big files</span></span><br><span class="line">                OnSocketWrite(fd);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"unknow epoll event!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// end for (int i = 0; ...</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">// end while (loop_flag_)</span></span><br><span class="line">    <span class="built_in">free</span>(alive_events);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// end namespace transport</span></span><br><span class="line">&#125; <span class="comment">// end namespace mux</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mux;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mux::transport;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> server_ip &#123;<span class="string">"127.0.0.1"</span>&#125;;</span><br><span class="line">    <span class="keyword">uint16_t</span> server_port &#123; <span class="number">6666</span> &#125;;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        server_ip = <span class="built_in">std</span>::<span class="built_in">string</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">        server_port = <span class="built_in">std</span>::atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a tcp client</span></span><br><span class="line">    <span class="keyword">auto</span> tcp_client = <span class="built_in">std</span>::make_shared&lt;EpollTcpClient&gt;(server_ip, server_port);</span><br><span class="line">    <span class="keyword">if</span> (!tcp_client) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"tcp_client create faield!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// recv callback in lambda mode, you can set your own callback here</span></span><br><span class="line">    <span class="keyword">auto</span> recv_call = [&amp;](<span class="keyword">const</span> transport::PacketPtr&amp; data) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="comment">// just print recv data to stdout</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"recv: "</span> &lt;&lt; data-&gt;msg &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// register recv callback to epoll tcp client</span></span><br><span class="line">    tcp_client-&gt;RegisterOnRecvCallback(recv_call);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start the epoll tcp client</span></span><br><span class="line">    <span class="keyword">if</span> (!tcp_client-&gt;Start()) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"tcp_client start failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"############tcp_client started!################"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> msg;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// read content from stdin</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span> &lt;&lt; <span class="string">"input:"</span>;</span><br><span class="line">        <span class="built_in">std</span>::getline(<span class="built_in">std</span>::<span class="built_in">cin</span>, msg);</span><br><span class="line">        <span class="keyword">auto</span> packet = <span class="built_in">std</span>::make_shared&lt;Packet&gt;(msg);</span><br><span class="line">        tcp_client-&gt;SendData(packet);</span><br><span class="line">        <span class="comment">//std::this_thread::sleep_for(std::chrono::seconds(1));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tcp_client-&gt;Stop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码和 server 端代码基本上很类似，除了没有 accept() 的处理，这里就不分析了。</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>上面的代码是基于 ET模式（边缘触发模式）实现的。</p><p>源代码可以直接在我的 github: <a href="https://github.com/smaugx/epoll_examples" target="_blank" rel="noopener">https://github.com/smaugx/epoll_examples</a> 找到；</p><p>或者有兴趣的话也可以直接看我的另外一个项目 <a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">https://github.com/smaugx/mux</a>，基于 epoll 实现的高并发网络库。</p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#105;&#110;&#x75;&#x78;&#99;&#111;&#x64;&#101;&#x32;&#x6e;&#x69;&#107;&#x69;&#64;&#x67;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#x6c;&#105;&#110;&#x75;&#x78;&#99;&#111;&#x64;&#101;&#x32;&#x6e;&#x69;&#107;&#x69;&#64;&#x67;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></p></li></ul><p>2020-09-26 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;复习一下&quot;&gt;&lt;a href=&quot;#复习一下&quot; class=&quot;headerlink&quot; title=&quot;复习一下&quot;&gt;&lt;/a&gt;复习一下&lt;/h1&gt;&lt;p&gt;上一篇博文 &lt;a href=&quot;https://rebootcat.com/2020/09/26/epoll_cookbook/&quot;&gt;epoll原理深入分析&lt;/a&gt; 详细分析了 epoll 底层的实现原理，如果对 epoll 原理有模糊的建议先看一下这篇文章。那么本文就开始用 epoll 实现一个简单的 tcp server/client。&lt;/p&gt;
&lt;p&gt;本文基于我的 github: &lt;a href=&quot;https://github.com/smaugx/epoll_examples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/smaugx/epoll_examples&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;epoll-实现范式&quot;&gt;&lt;a href=&quot;#epoll-实现范式&quot; class=&quot;headerlink&quot; title=&quot;epoll 实现范式&quot;&gt;&lt;/a&gt;epoll 实现范式&lt;/h1&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# create listen socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; listenfd = ::socket();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# bind to local port and ip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r = ::bind();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# create epoll instance and get an epoll-fd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; epollfd = epoll_create(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# add listenfd to epoll instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r = epoll_ctl(..., listenfd, ...);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# begin epoll_wait, wait for ready socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;epoll_event&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;alive_events&lt;/span&gt; =  &lt;span class=&quot;title&quot;&gt;static_cast&lt;/span&gt;&amp;lt;epoll_event*&amp;gt;(&lt;span class=&quot;title&quot;&gt;calloc&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;kMaxEvents&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;epoll_event&lt;/span&gt;)));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = epoll_wait(epollfd, alive_events, kMaxEvents, kEpollWaitTime);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; num; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd = alive_events[i].data.fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; events = alive_events[i].events;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( (events &amp;amp; EPOLLERR) || (events &amp;amp; EPOLLHUP) ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;epoll_wait error!&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// An error has occured on this fd, or the socket is not ready for reading (why were we notified then?).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ::&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (events &amp;amp; EPOLLRDHUP) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// Stream socket peer closed connection, or shut down writing half of connection.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// more inportant, We still to handle disconnection when read()/recv() return 0 or -1 just to be sure.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;fd:&quot;&lt;/span&gt; &amp;lt;&amp;lt; fd &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot; closed EPOLLRDHUP!&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// close fd and epoll will remove it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ::&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( events &amp;amp; EPOLLIN ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;epollin&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fd == handle_) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// listen fd coming connections&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    OnSocketAccept();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// other fd read event coming, meaning data coming&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    OnSocketRead(fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( events &amp;amp; EPOLLOUT ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;epollout&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// write event for fd (not including listen-fd), meaning send buffer is available for big files&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                OnSocketWrite(fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;unknow epoll event!&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;comment&quot;&gt;// end for (int i = 0; ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;epoll 编程基本是按照上面的范式进行的，这里要注意的是上面的反应的只是单进程或者单线程的情况。&lt;/p&gt;
&lt;p&gt;如果涉及到多线程或者多进程，那么通常来说会在 listen() 创建完成之后，创建多线程或者多进程，然后再操作 epoll.&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="https://rebootcat.com/categories/c/"/>
    
    
      <category term="c++" scheme="https://rebootcat.com/tags/c/"/>
    
      <category term="linux" scheme="https://rebootcat.com/tags/linux/"/>
    
      <category term="epoll" scheme="https://rebootcat.com/tags/epoll/"/>
    
      <category term="socket" scheme="https://rebootcat.com/tags/socket/"/>
    
      <category term="tcp" scheme="https://rebootcat.com/tags/tcp/"/>
    
      <category term="server" scheme="https://rebootcat.com/tags/server/"/>
    
      <category term="client" scheme="https://rebootcat.com/tags/client/"/>
    
  </entry>
  
  <entry>
    <title>Epoll原理深入分析</title>
    <link href="https://rebootcat.com/2020/09/26/epoll_cookbook/"/>
    <id>https://rebootcat.com/2020/09/26/epoll_cookbook/</id>
    <published>2020-09-26T02:50:58.000Z</published>
    <updated>2020-09-25T12:28:48.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Epoll-的出现"><a href="#Epoll-的出现" class="headerlink" title="Epoll 的出现"></a>Epoll 的出现</h1><p>想必能搜到这篇文章的，应该对 select/poll 有一些了解和认识，一般说 epoll 都会与 select/poll 进行一些对比，select、poll 和 epoll 都是一种 IO 多路复用机制。</p><h2 id="select-的问题"><a href="#select-的问题" class="headerlink" title="select 的问题"></a>select 的问题</h2><p>select 的问题在于描述符的限制，能监控的文件描述符最大为 FD_SETSIZE，对于连接数很多的场景就无法满足；</p><p>另外select 还有一个问题是，每次调用 select 都需要从用户空间把描述符集合拷贝到内核空间，当描述符集合变大之后，用户空间和内核空间的内存拷贝会导致效率低下；</p><p>另外每次调用 select 都需要在内核线性遍历文件描述符的集合，当描述符增多，效率低下。</p><h2 id="poll-的问题"><a href="#poll-的问题" class="headerlink" title="poll 的问题"></a>poll 的问题</h2><p>由于 select 存在上面的问题，于是 poll 被提了出来，它能解决 select 对文件描述符数量有限制的问题，但是依然不能解决线性遍历以及用户空间和内核空间的低效数据拷贝问题。</p><h2 id="epoll-是什么"><a href="#epoll-是什么" class="headerlink" title="epoll 是什么"></a>epoll 是什么</h2><p>select/poll 在互联网早期应该是没什么问题的，因为没有很多的互联网服务，也没有很多的客户端，但是随着互联网的发展，<a href="http://www.kegel.com/c10k.html#related" target="_blank" rel="noopener">C10K</a> 等问题的出现，select/poll 已经不能满足要求了，这个时候 epoll 上场了。</p><p>epoll 是 linux 内核 2.6 之后支持的，epoll 同 select/poll 一样，也是 IO 多路复用的一种机制，不过它避免了 select/poll 的缺点。下面详细讲解一下 epoll 反应堆的原理。</p><h1 id="Epoll-反应堆"><a href="#Epoll-反应堆" class="headerlink" title="Epoll 反应堆"></a>Epoll 反应堆</h1><h2 id="epoll-原理"><a href="#epoll-原理" class="headerlink" title="epoll 原理"></a>epoll 原理</h2><blockquote><p><strong>要完整描述 epoll 的原理，需要涉及到内核、网卡、中断、软中断、协议栈、套接字等知识，本文尽量从比较全面的角度来分析 epoll 的原理</strong>。</p></blockquote><p>上面其实讨论了 select/poll 几个缺点，针对这几个缺点，就需要解决以下几件事：</p><ul><li>如何突破文件描述符数量的限制</li><li>如何避免用户态和内核态对文件描述符集合的拷贝</li><li>socket 就绪后，如何避免线性遍历文件描述符集合</li></ul><a id="more"></a><p>针对第一点：<strong>如何突破文件描述符数量的限制</strong>，其实 poll 已经解决了，poll 使用的是链表的方式管理 socket 描述符，但问题是不够高效，如果有百万级别的连接需要管理，如何快速的插入和删除就变得很重要，于是 epoll 采用了红黑树的方式进行管理，这样能保证在添加 socket 和删除 socket 时，有 O(log(n)) 的复杂度。</p><p>针对第二点：<strong>如何避免用户态和内核态对文件描述符集合的拷贝</strong>，其实对于 select 来说，由于这个集合是保存在用户态的，所以当调用 select 时需要屡次的把这个描述符集合拷贝到内核空间。所以<strong>如果要解决这个问题，可以直接把这个集合放在内核空间进行管理</strong>。没错，epoll 就是这样做的，epoll 在内核空间创建了一颗红黑树，应用程序直接把需要监控的 socket 对象添加到这棵树上，直接从用户态到内核态了，而且后续也不需要再次拷贝了。</p><p>针对第三点：<strong>socket就绪后，如何避免内核线性遍历文件描述符集合</strong>，这个问题就会比较复杂，要完整理解就得涉及到内核收包到应用层的整个过程。这里先简单讲一下，与 select 不同，epoll 使用了一个双向链表来保存就绪的 socket，这样当活跃连接数不多的情况下，应用程序只需要遍历这个就绪链表就行了，而 select 没有这样一个用来存储就绪 socket 的东西，导致每次需要线性遍历所有socket，以确定是哪个或者哪几个 socket 就绪了。这里需要注意的是，<strong>这个就绪链表保存活跃链接，数量是较少的，也需要从内核空间拷贝到用户空间</strong>。</p><p>从上面 3 点可以看到 epoll 的几个特点：</p><ul><li><strong>程序在内核空间开辟一块缓存，用来管理 epoll 红黑树，高效添加和删除</strong></li><li><strong>红黑树位于内核空间，用来直接管理 socket，减少和用户态的交互</strong></li><li><strong>使用双向链表缓存就绪的 socket，数量较少</strong></li><li><strong>只需要拷贝这个双向链表到用户空间，再遍历就行，注意这里也需要拷贝，没有共享内存</strong></li></ul><p>比较精炼的话可能反而理解起来不容易，那么接下来深入分析一下 epoll 的原理。</p><h2 id="epoll-api"><a href="#epoll-api" class="headerlink" title="epoll api"></a>epoll api</h2><p>如果要深入分析 epoll 的原理，那么可能需要结合到 epoll 的 api 来进行阐述。epoll api 较少，使用起来相对比较简单。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;sys/epoll.h&gt;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">open</span> an epoll file descriptor</span><br><span class="line"># epoll_create1 可以理解为 epoll_create 的增强版（主要支持了 close-on-exec）</span><br><span class="line"><span class="built_in">int</span> epoll<span class="constructor">_create(<span class="params">int</span> <span class="params">size</span>)</span>;</span><br><span class="line"><span class="built_in">int</span> epoll<span class="constructor">_create1(<span class="params">int</span> <span class="params">flags</span>)</span>;</span><br><span class="line"></span><br><span class="line"># 往 epoll instance 上添加、删除、更改一个节点（socket)</span><br><span class="line"><span class="built_in">int</span> epoll<span class="constructor">_ctl(<span class="params">int</span> <span class="params">epfd</span>, <span class="params">int</span> <span class="params">op</span>, <span class="params">int</span> <span class="params">fd</span>, <span class="params">struct</span> <span class="params">epoll_event</span> <span class="operator">*</span><span class="params">event</span>)</span>;</span><br><span class="line"></span><br><span class="line"># wait for events on epoll instance</span><br><span class="line"><span class="built_in">int</span> epoll<span class="constructor">_wait(<span class="params">int</span> <span class="params">epfd</span>, <span class="params">struct</span> <span class="params">epoll_event</span> <span class="operator">*</span><span class="params">events</span>, <span class="params">int</span> <span class="params">maxevents</span>, <span class="params">int</span> <span class="params">timeout</span>)</span>;</span><br><span class="line"></span><br><span class="line"># close <span class="keyword">and</span> clear epoll instance</span><br><span class="line"><span class="built_in">int</span> close(<span class="built_in">int</span> fd);</span><br></pre></td></tr></table></figure><p>epoll 涉及到的 api 其实比较简单，掌握了这几个 api 其实就已经能够快速编写基于 epoll 的 tcp/udp socket 程序。可以参考：</p><p><a href="https://github.com/smaugx/epoll_examples.git" target="_blank" rel="noopener">https://github.com/smaugx/epoll_examples.git</a></p><p><strong>接下来结合上面的几个 api 来详细分析以下背后的原理</strong>。</p><h2 id="红黑树的创建和操作"><a href="#红黑树的创建和操作" class="headerlink" title="红黑树的创建和操作"></a>红黑树的创建和操作</h2><p>前面提到，epoll 是一种 IO 多路复用机制，应用程序可以同时监控多个 socket，那么如何来存储和管理这些 socket 呢，epoll 使用的是一颗红黑树，可以随意的往这棵树上添加节点和删除节点(节点是一个结构体，包括 socket fd)。</p><p>我们使用：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> <span class="built_in">size</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>创建一个 epoll instance，实际上是创建了一个  <strong>eventpoll</strong> 实例，包含了<strong>红黑树</strong>以及一个<strong>双向链表</strong>。</p><blockquote><p>可以直接查看 linux 源码：<a href="https://github.com/torvalds/linux/blob/master/fs/eventpoll.c#L181" target="_blank" rel="noopener">https://github.com/torvalds/linux/blob/master/fs/eventpoll.c#L181</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This structure is stored inside the "private_data" member of the file</span></span><br><span class="line"><span class="comment"> * structure and represents the main data structure for the eventpoll</span></span><br><span class="line"><span class="comment"> * interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* List of ready file descriptors */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">rdllist</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* RB tree root used to store monitored fd structs */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rb_root_cached</span> <span class="title">rbr</span>;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个 eventpoll 实例是直接位于内核空间的。红黑树的叶子节点都是 <strong>epitem</strong> 结构体：</p><blockquote><p>可以直接查看 linux 源码： <a href="https://github.com/torvalds/linux/blob/master/fs/eventpoll.c#L137" target="_blank" rel="noopener">https://github.com/torvalds/linux/blob/master/fs/eventpoll.c#L137</a></p></blockquote><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> &#123;</span></span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">/* RB tree node links this structure to the eventpoll RB tree *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">struct rb_node rbn;</span></span><br><span class="line"><span class="regexp">/</span>* Used to free the <span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/* List header used to link this structure to the eventpoll ready list *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">struct list_head rdllink;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>* The file descriptor information this item refers to *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">struct epoll_filefd ffd;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>* The <span class="string">"container"</span> <span class="keyword">of</span> this item *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">struct eventpoll *ep;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>* List header used to link this item to the <span class="string">"struct file"</span> items list *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">struct list_head fllink;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>* wakeup_source used <span class="keyword">when</span> EPOLLWAKEUP is set *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">struct wakeup_source __rcu *ws;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>* The structure that describe the interested events and the source fd *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">struct epoll_event event;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>关于各项的解释，注释里已经说的比较清楚了。我们关心的应该是，当往这棵红黑树上添加、删除、修改节点的时候，我们从（用户态）程序代码中能操作的是一个 fd，即一个 socket 对应的 file descriptor，所以一个 epitem 实例与一个 socket fd 一一对应。</p><p>另外还需要注意到的是 rdllink 这个变量，这个指向了上一步创建的 evnetpoll 实例中的成员变量 rdllist，也就是那个就绪链表。<strong>这里很重要，注意留意，后面会讲到</strong>。</p><p>当然，我们还需要关注的是 event 这个变量，代表了我们针对这个 socket fd 关心的事件，比如 EPOLLIN、EPOLLOUT。</p><p>通过上述的讲解应该大致明白了，当我们使用 socket() 或者 accept() 得到一个 socket fd 时，我们添加到这棵红黑树上的是一个结构体，与这个 socket fd 一一对应。</p><p>那么修改和删除呢？</p><p>也是类似的过程，使用 ffd 变量作为红黑树比较的 key，能够快速的查找和插入。具体我们使用的是：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> epoll<span class="constructor">_ctl(<span class="params">int</span> <span class="params">epfd</span>, <span class="params">int</span> <span class="params">op</span>, <span class="params">int</span> <span class="params">fd</span>, <span class="params">struct</span> <span class="params">epoll_event</span> <span class="operator">*</span><span class="params">event</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="如何触发事件"><a href="#如何触发事件" class="headerlink" title="如何触发事件"></a>如何触发事件</h2><p>上面过程已经把我们关心的 socket 添加到 epoll instance 中了，那么当某个 socket 有事件触发时，epoll 是如何感知并通知（用户态）应用程序呢？</p><p>要完整的回答这个问题，会涉及到比较多的知识。不过为了了解 epoll 的原理，有一些知识需要提前了解。</p><h3 id="内核收包路径"><a href="#内核收包路径" class="headerlink" title="内核收包路径"></a>内核收包路径</h3><blockquote><p>当一个包从网卡进来之后，是如何走到应用程序的呢？中间经过了哪些步骤呢？（本文会讲的比较简略一点）</p></blockquote><p>包从硬件网卡（NIC) 上进来之后，会触发一个<strong>中断</strong>，告诉 cpu 网卡上有包过来了，需要处理，同时通过 DMA（direct memory access) 的方式把包存放到内存的某个地方，这块内存通常称为 ring buffer，是网卡驱动程序初始化时候分配的。</p><blockquote><p><strong>中断</strong> 的原理学过微机原理的应该都知道，表示处理器接收到来自硬件或者软件的信号，提示产生了某件事情，需要处理。</p></blockquote><p>当 cpu 收到这个中断后，会调用中断处理程序，这里的中断处理程序就是网卡驱动程序，因为网络硬件设备网卡需要驱动才能工作。网卡驱动会先关闭网卡上的中断请求，表示已经知晓网卡上有包进来的事情，同时也避免在处理过程中网卡再次触发中断，干扰或者降低处理性能。驱动程序启动软中断，继续处理数据包。</p><p>然后 CPU 激活 NAPI 子系统，由 NAPI 子系统来处理由网卡放到内存的数据包。经过一些列内核代码，最终数据包来到内核协议栈。内核协议栈也就是 IP 层以及传输层。经过 IP 层之后，数据包到达传输层，内核根据数据包里面的 <code>{src_ip:src_port, dst_ip:dst_port}</code> 找到相应的 socket。</p><blockquote><p>为了性能，内核应该是有一个四元组和 socket 句柄的一一映射关系。（这里不太确定，不过原理应该是类似的）</p></blockquote><p>然后把数据包放到这个 socket 的接收队列（接收缓冲区）中，准备通知应用程序，socket 就绪。</p><h3 id="从-socket-到应用程序"><a href="#从-socket-到应用程序" class="headerlink" title="从 socket 到应用程序"></a>从 socket 到应用程序</h3><p>上面比较简略的描述了一个数据包从网卡到内核协议栈，再到 socket 的接收缓冲区的步骤，描述的比较简略，不影响对 epoll 原理的理解，这里只需要有这个概念就行。</p><p>那么当 socket 就绪后，也就是数据包被放到 socket 的接收缓冲区后，如何通知应用程序呢？这里用到的是<strong>等待队列</strong>，也就是 <strong>wait queue</strong>。关于 wait queue 的应用，在 linux 内核代码里有很多，具体可以看一下 wait queue 的定义：</p><p><a href="https://github.com/torvalds/linux/blob/master/include/linux/wait.h" target="_blank" rel="noopener">https://github.com/torvalds/linux/blob/master/include/linux/wait.h</a></p><p>当我们通过 socket() 以及 accept() 获取到一个 socket 对象时，这个 socket 对象到底有哪些东西呢？</p><blockquote><p>可以直接参考 <a href="https://github.com/torvalds/linux/blob/master/include/linux/net.h#L113" target="_blank" rel="noopener">https://github.com/torvalds/linux/blob/master/include/linux/net.h#L113</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  struct socket - general BSD socket</span></span><br><span class="line"><span class="comment"> *  @state: socket state (%SS_CONNECTED, etc)</span></span><br><span class="line"><span class="comment"> *  @type: socket type (%SOCK_STREAM, etc)</span></span><br><span class="line"><span class="comment"> *  @flags: socket flags (%SOCK_NOSPACE, etc)</span></span><br><span class="line"><span class="comment"> *  @ops: protocol specific socket operations</span></span><br><span class="line"><span class="comment"> *  @file: File back pointer for gc</span></span><br><span class="line"><span class="comment"> *  @sk: internal networking protocol agnostic socket representation</span></span><br><span class="line"><span class="comment"> *  @wq: wait queue for several uses</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socket</span> &#123;</span></span><br><span class="line">socket_statestate;</span><br><span class="line"></span><br><span class="line">shorttype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>flags;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span>*<span class="title">file</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span>*<span class="title">sk</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">proto_ops</span>*<span class="title">ops</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socket_wq</span><span class="title">wq</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socket_wq</span> &#123;</span></span><br><span class="line"><span class="comment">/* Note: wait MUST be first field of socket_wq */</span></span><br><span class="line"><span class="keyword">wait_queue_head_t</span>wait;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span>*<span class="title">fasync_list</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>flags; <span class="comment">/* %SOCKWQ_ASYNC_NOSPACE, etc */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span><span class="title">rcu</span>;</span></span><br><span class="line">&#125; ____cacheline_aligned_in_smp;</span><br></pre></td></tr></table></figure><p>可以看到，一个 socket 实例包含了一个 file 的指针，以及一个 socket_wq 变量。其中 socket_wq 中的 <strong>wait 表示等待队列，fasync_list 表示异步等待队列</strong>。</p><p>那么等待队列和异步等待队列中有什么呢？大致来说，<strong>等待队列和异步等待队列中存放的是关注这个 socket 上的事件的进程</strong>。区别是等待队列中的进程会处于阻塞状态，处于异步等待队列中的进程不会阻塞。</p><blockquote><p>阻塞的概念学过操作系统的应该知道，阻塞是进程的一种状态，表示一个进程正在等待某件事情的发生而暂时停止运行；另外还有运行状态以及就绪状态。</p></blockquote><p>当 socket 就绪后（接收缓冲区有数据），那么就会 wake up 等待队列中的进程，通知进程 socket 上有事件，可以开始处理了。</p><p>至此，一个数据包从网卡最终达到应用程序内部了。</p><p><strong>再简单总结一下收包以及触发的过程</strong>：</p><ul><li><strong>包从网卡进来</strong></li><li><strong>一路经过各个子系统到达内核协议栈（传输层）</strong></li><li><strong>内核根据包的 <code>{src_ip:src_port, dst_ip:dst_port}</code> 找到 socket 对象（内核维护了一份四元组和 socket 对象的一一映射表）</strong></li><li><strong>数据包被放到 socket 对象的接收缓冲区</strong></li><li><strong>内核唤醒 socket 对象上的等待队列中的进程，通知 socket 事件</strong></li><li><strong>进程唤醒，处理 socket 事件（read/write)</strong></li></ul><h2 id="epoll-的触发"><a href="#epoll-的触发" class="headerlink" title="epoll 的触发"></a>epoll 的触发</h2><p>上面其实是对内核收包以及事件触发的综合描述，涉及到 epoll 后，稍微有点差异。</p><p>上面其实提到了<strong>等待队列</strong>，每当我们创建一个 socket 后（无论是 socket()函数 还是 accept() 函数)，socket 对象中会有一个进程的等待队列，表示某个或者某些进程在等待这个 socket 上的事件。</p><p>但是当我们往 epoll 红黑树上添加一个 epitem 节点（也就是一个 socket 对象，或者说一个 fd)后，<strong>实际上还会在这个 socket 对象的 wait queue 上注册一个 callback function，当这个 socket 上有事件发生后就会调用这个 callback function</strong>。这里与上面讲到的不太一样，并不会直接 wake up 一个等待进程，需要注意一下。</p><p>简单讲就是，<strong>这个 socket 在添加到这棵 epoll 树上时，会在这个 socket 的 wait queue 里注册一个回调函数，当有事件发生的时候再调用这个回调函数（而不是唤醒进程）</strong>。</p><p>下面简单贴一下 epoll 中关于注册这个回调函数的部分代码：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is the callback that is used to add our wait queue to the</span></span><br><span class="line"><span class="comment"> * target file wakeup lists.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">static void ep_ptable_queue_proc(struct file *file, wait_queue_head_t *whead,</span><br><span class="line"> poll_table *pt)</span><br><span class="line">&#123;</span><br><span class="line">struct epitem *epi = ep_item_from_epqueue(pt);</span><br><span class="line">struct eppoll_entry *pwq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">if</span> (epi-&gt;</span>nwait &gt;= <span class="number">0</span> &amp;&amp; (pwq = kmem_cache_alloc(pwq_cache, GFP_KERNEL))) &#123;</span><br><span class="line"><span class="function"><span class="title">init_waitqueue_func_entry</span>(&amp;pwq-&gt;</span>wait, ep_poll_callback);   <span class="comment">// 注册回调函数到等待队列上</span></span><br><span class="line"><span class="function"><span class="title">pwq</span>-&gt;</span>whead = whead;</span><br><span class="line"><span class="function"><span class="title">pwq</span>-&gt;</span>base = epi;</span><br><span class="line"><span class="function"><span class="title">if</span> (epi-&gt;</span>event.events &amp; EPOLLEXCLUSIVE)</span><br><span class="line"><span class="function"><span class="title">add_wait_queue_exclusive</span>(whead, &amp;pwq-&gt;</span>wait);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="function"><span class="title">add_wait_queue</span>(whead, &amp;pwq-&gt;</span>wait);</span><br><span class="line"><span class="function"><span class="title">list_add_tail</span>(&amp;pwq-&gt;</span><span class="function"><span class="title">llink</span>, &amp;epi-&gt;</span>pwqlist);</span><br><span class="line"><span class="function"><span class="title">epi</span>-&gt;</span>nwait++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* We have to signal that an error occurred */</span></span><br><span class="line"><span class="function"><span class="title">epi</span>-&gt;</span>nwait = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这个回调函数做了什么事呢？</p><p>很简单，这个回调函数会把这个 socket 添加到创建 epoll instance 时对应的 <strong>eventpoll</strong> 实例中的就绪链表上，也就是 <strong>rdllist</strong> 上，并唤醒 <strong>epoll_wait</strong>，通知 epoll 有 socket 就绪，并且已经放到了就绪链表中，然后应用层就会来遍历这个就绪链表，并拷贝到用户空间，开始后续的事件处理（read/write)。</p><p>所以这里其实就体现出与 select 的不同， epoll 把就绪的 socket 给缓存了下来，放到一个双向链表中，这样当唤醒进程后，进程就知道哪些 socket 就绪了，而 select 是进程被唤醒后只知道有 socket 就绪，但是不知道哪些 socket 就绪，所以 select 需要遍历所有的 socket。</p><p>另外，应用程序遍历这个就绪链表，由于就绪链表是位于内核空间，所以需要<strong>拷贝到用户空间，这里要注意一下，网上很多不靠谱的文章说用了共享内存，其实不是</strong>。由于这个就绪链表的数量是相对较少的，所以由内核拷贝这个就绪链表到用户空间，这个效率是较高的。</p><p>我来来直接看一下 <strong>epoll_wait</strong> 做了什么事？<strong>epoll_wait</strong> 最终会调用到 <strong>ep_send_events_proc</strong> 这个函数，从函数名字也知道，这个函数是用来把就绪链表中的内容复制到用户空间，向应用程序通知事件。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">static __poll_t ep_send_events_proc(struct eventpoll *ep, struct list_head *head,</span><br><span class="line">       void *priv)</span><br><span class="line">&#123;</span><br><span class="line">struct ep_send_events_data *esed = priv;</span><br><span class="line">__poll_t revents;</span><br><span class="line">struct epitem *epi, *tmp;</span><br><span class="line"><span class="function"><span class="title">struct</span> epoll_event __user *uevent = esed-&gt;</span>events;   # 这个就是在用户空间分配的一段内存指针，该函数会把 rdllist 拷贝到这块内存</span><br><span class="line">struct wakeup_source *ws;</span><br><span class="line">poll_table pt;</span><br><span class="line"></span><br><span class="line">init_poll_funcptr(&amp;pt, NULL);</span><br><span class="line"><span class="function"><span class="title">esed</span>-&gt;</span>res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We can loop without lock because we are passed a task private list.</span></span><br><span class="line"><span class="comment"> * Items cannot vanish during the loop because ep_scan_ready_list() is</span></span><br><span class="line"><span class="comment"> * holding "mtx" during this call.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">lockdep_assert_held</span>(&amp;ep-&gt;</span>mtx);</span><br><span class="line"></span><br><span class="line">list_for_each_entry_safe(epi, tmp, head, rdllink) &#123;</span><br><span class="line"><span class="function"><span class="title">if</span> (esed-&gt;</span><span class="function"><span class="title">res</span> &gt;= esed-&gt;</span>maxevents)</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Activate ep-&gt;ws before deactivating epi-&gt;ws to prevent</span></span><br><span class="line"><span class="comment"> * triggering auto-suspend here (in case we reactive epi-&gt;ws</span></span><br><span class="line"><span class="comment"> * below).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This could be rearranged to delay the deactivation of epi-&gt;ws</span></span><br><span class="line"><span class="comment"> * instead, but then epi-&gt;ws would temporarily be out of sync</span></span><br><span class="line"><span class="comment"> * with ep_is_linked().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ws = ep_wakeup_source(epi);</span><br><span class="line"><span class="keyword">if</span> (ws) &#123;</span><br><span class="line"><span class="function"><span class="title">if</span> (ws-&gt;</span>active)</span><br><span class="line">__<span class="function"><span class="title">pm_stay_awake</span>(ep-&gt;</span>ws);</span><br><span class="line">__pm_relax(ws);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">list_del_init</span>(&amp;epi-&gt;</span>rdllink);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If the event mask intersect the caller-requested one,</span></span><br><span class="line"><span class="comment"> * deliver the event to userspace. Again, ep_scan_ready_list()</span></span><br><span class="line"><span class="comment"> * is holding ep-&gt;mtx, so no operations coming from userspace</span></span><br><span class="line"><span class="comment"> * can change the item.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">revents = ep_item_poll(epi, &amp;pt, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!revents)</span><br><span class="line">continue;</span><br><span class="line">       </span><br><span class="line">       # 拷贝 rdllist 到 用户空间提供的一个内存指针</span><br><span class="line"><span class="function"><span class="title">if</span> (__put_user(revents, &amp;uevent-&gt;</span>events) ||</span><br><span class="line">    __<span class="function"><span class="title">put_user</span>(epi-&gt;</span><span class="function"><span class="title">event</span>.<span class="keyword">data</span>, &amp;uevent-&gt;</span><span class="keyword">data</span>)) &#123;</span><br><span class="line"><span class="function"><span class="title">list_add</span>(&amp;epi-&gt;</span>rdllink, head);</span><br><span class="line">ep_pm_stay_awake(epi);</span><br><span class="line"><span class="function"><span class="title">if</span> (!esed-&gt;</span>res)</span><br><span class="line"><span class="function"><span class="title">esed</span>-&gt;</span>res = -EFAULT;</span><br><span class="line">return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">esed</span>-&gt;</span>res++;</span><br><span class="line">uevent++;</span><br><span class="line"><span class="function"><span class="title">if</span> (epi-&gt;</span>event.events &amp; EPOLLONESHOT)</span><br><span class="line"><span class="function"><span class="title">epi</span>-&gt;</span>event.events &amp;= EP_PRIVATE_BITS;</span><br><span class="line"><span class="function"><span class="title">else</span> <span class="keyword">if</span> (!(epi-&gt;</span>event.events &amp; EPOLLET)) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If this file has been added with Level</span></span><br><span class="line"><span class="comment"> * Trigger mode, we need to insert back inside</span></span><br><span class="line"><span class="comment"> * the ready list, so that the next call to</span></span><br><span class="line"><span class="comment"> * epoll_wait() will check again the events</span></span><br><span class="line"><span class="comment"> * availability. At this point, no one can insert</span></span><br><span class="line"><span class="comment"> * into ep-&gt;rdllist besides us. The epoll_ctl()</span></span><br><span class="line"><span class="comment"> * callers are locked out by</span></span><br><span class="line"><span class="comment"> * ep_scan_ready_list() holding "mtx" and the</span></span><br><span class="line"><span class="comment"> * poll callback will queue them in ep-&gt;ovflist.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">list_add_tail</span>(&amp;epi-&gt;</span><span class="function"><span class="title">rdllink</span>, &amp;ep-&gt;</span>rdllist);</span><br><span class="line">ep_pm_stay_awake(epi);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面可以看到，这里确确实实是从内核复制 rdllist 到用户空间，非共享内存。应用程序调用 <strong>epoll_wait</strong> 返回后，开始遍历拷贝回来的内容，处理 socket 事件。</p><p><strong>至此，从注册一个 file descriptor(socket fd) 到 epoll 红黑树，到这个 socket 上有数据包从网卡进来，再到如何触发 epoll，再到应用程序的用户空间，由应用程序开始 read/write 事件的整个过程就理顺了</strong>。不知道大家有没有理解了？</p><h2 id="accept-事件"><a href="#accept-事件" class="headerlink" title="accept 事件"></a>accept 事件</h2><p>accept 事件属于可读事件的一种，这里单独提出来讲一下，是因为编程的时候针对 accept 有一些点需要注意，这里先大致讲一下，后面会有另外的博文展开讲。</p><p>当 socket 有可读事件达到后，epoll_wait 获取到就绪的 socket，应用程序开始处理可读事件，如果这个 socket 的 fd 等于 listen() 的 fd，说明有新连接到达，(server)开始调用 accept() 处理连接。</p><p>accept() 返回的新的 socket 对象，对应与 client 的一个新的连接，应用程序需要把这个新的 socket 对象注册到 epoll 红黑树上，并且添加关心的事件（EPOLLIN/EPOLLOUT…)，然后开始 epoll 循环。</p><p>另外还有一点要注意的，<strong>accept 的惊群效应</strong>。</p><p>先解释一下什么是惊群，<strong>如果一个 socket 上有多个进程在同时等待事件，当事件触发后，内核可能会唤醒多个或者所有在等待的进程，然而只会有一个进程成功获取该事件，其他进程都失败，这种情况就叫惊群，会一定程度浪费 cpu，影响性能</strong>。如果用一个例子来解释的话就是，有一个鸡群，如果往这个鸡群里丢一粒米，那么会造成所有鸡（或者大多数鸡）一起来争抢这粒米，但是最终只会有一只鸡能抢到这粒米。</p><p>对于 accept() 来说，通常我们会使用多线程或者多进程的方式来监听同一个 listen fd，此时，就很可能发生惊群效应。</p><p>关于惊群效应，此处只简单提一下概念，后面开另外的博文深入探讨下惊群效应以及解决方案。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面深入的分析了 epoll 的底层实现原理，现在回到文章开头提到的与 select/poll 对比的几个优点，是不是能理解了呢？</p><p>简单总结一下:</p><ol><li><strong>epoll 在内核开辟了一块缓存，用来创建 eventpoll 对象，并返回一个 file descriptor 代表 epoll instance</strong></li><li><strong>这个 epoll instance 中创建了一颗红黑树以及一个就绪的双向链表（当然还有其他的成员）</strong></li><li><strong>红黑树用来缓存所有的 socket，支持 O(log(n)) 的插入和查找，减少后续与用户空间的交互</strong></li><li><strong>socket 就绪后，会回调一个回调函数（添加到 epoll instance 上时注册到 socket 的）</strong></li><li><strong>这个回调函数会把这个 socket 放到就绪链表，并唤醒 epoll_wait</strong></li><li><strong>应用程序拷贝就绪 socket 到用户空间，开始遍历处理就绪的 socket</strong></li><li><strong>如果有新的 socket，再添加到 epoll 红黑树上，重复这个过程</strong></li></ol><p>到这里应该能比较透彻的理解 epoll 的原理了，接下来会继续写几篇关于 epoll 的博文（先把坑埋下）:</p><ul><li><a href="https://rebootcat.com/2020/09/26/epoll_examples/">epoll 入门例子 tcp server/client</a></li><li>epoll 惊群(todo)</li><li>epoll 源码分析(todo)</li><li>内核收发包路径(todo)</li></ul><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#x69;&#x6e;&#x75;&#120;&#99;&#111;&#100;&#x65;&#x32;&#x6e;&#105;&#107;&#105;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;">&#108;&#x69;&#x6e;&#x75;&#120;&#99;&#111;&#100;&#x65;&#x32;&#x6e;&#105;&#107;&#105;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;</a></p></li></ul><p>2020-09-26 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Epoll-的出现&quot;&gt;&lt;a href=&quot;#Epoll-的出现&quot; class=&quot;headerlink&quot; title=&quot;Epoll 的出现&quot;&gt;&lt;/a&gt;Epoll 的出现&lt;/h1&gt;&lt;p&gt;想必能搜到这篇文章的，应该对 select/poll 有一些了解和认识，一般说 epoll 都会与 select/poll 进行一些对比，select、poll 和 epoll 都是一种 IO 多路复用机制。&lt;/p&gt;
&lt;h2 id=&quot;select-的问题&quot;&gt;&lt;a href=&quot;#select-的问题&quot; class=&quot;headerlink&quot; title=&quot;select 的问题&quot;&gt;&lt;/a&gt;select 的问题&lt;/h2&gt;&lt;p&gt;select 的问题在于描述符的限制，能监控的文件描述符最大为 FD_SETSIZE，对于连接数很多的场景就无法满足；&lt;/p&gt;
&lt;p&gt;另外select 还有一个问题是，每次调用 select 都需要从用户空间把描述符集合拷贝到内核空间，当描述符集合变大之后，用户空间和内核空间的内存拷贝会导致效率低下；&lt;/p&gt;
&lt;p&gt;另外每次调用 select 都需要在内核线性遍历文件描述符的集合，当描述符增多，效率低下。&lt;/p&gt;
&lt;h2 id=&quot;poll-的问题&quot;&gt;&lt;a href=&quot;#poll-的问题&quot; class=&quot;headerlink&quot; title=&quot;poll 的问题&quot;&gt;&lt;/a&gt;poll 的问题&lt;/h2&gt;&lt;p&gt;由于 select 存在上面的问题，于是 poll 被提了出来，它能解决 select 对文件描述符数量有限制的问题，但是依然不能解决线性遍历以及用户空间和内核空间的低效数据拷贝问题。&lt;/p&gt;
&lt;h2 id=&quot;epoll-是什么&quot;&gt;&lt;a href=&quot;#epoll-是什么&quot; class=&quot;headerlink&quot; title=&quot;epoll 是什么&quot;&gt;&lt;/a&gt;epoll 是什么&lt;/h2&gt;&lt;p&gt;select/poll 在互联网早期应该是没什么问题的，因为没有很多的互联网服务，也没有很多的客户端，但是随着互联网的发展，&lt;a href=&quot;http://www.kegel.com/c10k.html#related&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C10K&lt;/a&gt; 等问题的出现，select/poll 已经不能满足要求了，这个时候 epoll 上场了。&lt;/p&gt;
&lt;p&gt;epoll 是 linux 内核 2.6 之后支持的，epoll 同 select/poll 一样，也是 IO 多路复用的一种机制，不过它避免了 select/poll 的缺点。下面详细讲解一下 epoll 反应堆的原理。&lt;/p&gt;
&lt;h1 id=&quot;Epoll-反应堆&quot;&gt;&lt;a href=&quot;#Epoll-反应堆&quot; class=&quot;headerlink&quot; title=&quot;Epoll 反应堆&quot;&gt;&lt;/a&gt;Epoll 反应堆&lt;/h1&gt;&lt;h2 id=&quot;epoll-原理&quot;&gt;&lt;a href=&quot;#epoll-原理&quot; class=&quot;headerlink&quot; title=&quot;epoll 原理&quot;&gt;&lt;/a&gt;epoll 原理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要完整描述 epoll 的原理，需要涉及到内核、网卡、中断、软中断、协议栈、套接字等知识，本文尽量从比较全面的角度来分析 epoll 的原理&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面其实讨论了 select/poll 几个缺点，针对这几个缺点，就需要解决以下几件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何突破文件描述符数量的限制&lt;/li&gt;
&lt;li&gt;如何避免用户态和内核态对文件描述符集合的拷贝&lt;/li&gt;
&lt;li&gt;socket 就绪后，如何避免线性遍历文件描述符集合&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://rebootcat.com/categories/linux/"/>
    
    
      <category term="c++" scheme="https://rebootcat.com/tags/c/"/>
    
      <category term="linux" scheme="https://rebootcat.com/tags/linux/"/>
    
      <category term="epoll" scheme="https://rebootcat.com/tags/epoll/"/>
    
      <category term="socket" scheme="https://rebootcat.com/tags/socket/"/>
    
      <category term="select" scheme="https://rebootcat.com/tags/select/"/>
    
      <category term="poll" scheme="https://rebootcat.com/tags/poll/"/>
    
      <category term="rbtree" scheme="https://rebootcat.com/tags/rbtree/"/>
    
      <category term="waitqueue" scheme="https://rebootcat.com/tags/waitqueue/"/>
    
      <category term="fd" scheme="https://rebootcat.com/tags/fd/"/>
    
  </entry>
  
  <entry>
    <title>使用 mkdocs 搭建个人 wiki 站点</title>
    <link href="https://rebootcat.com/2020/09/20/wiki/"/>
    <id>https://rebootcat.com/2020/09/20/wiki/</id>
    <published>2020-09-20T15:50:58.000Z</published>
    <updated>2020-09-20T16:24:47.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="why-wiki"><a href="#why-wiki" class="headerlink" title="why wiki"></a>why wiki</h1><p>博客通常是用来记录一些完整的文章，每篇文章有一个主题。但是我想把平日里的一些笔记也记录到我的博客里，但笔记是零散的，随时的，不是完整的一个主题。所以打算构建一个 wiki 页面，专门用来存放我的笔记，wiki 页面类似于 <a href="https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">维基百科</a>的形式。</p><p>我的博客采用的是 hexo 构建的，如果打算 DIY 一个类似于 <strong>维基百科</strong> 的 wiki 页面的话，对于我来说，也许有点难度，毕竟我只会写简单的网页。那么有没有现成的方案或者替代的方案呢？</p><p>答案是有的，那就是 <strong>mkdocs</strong>。</p><h1 id="mkdocs-使用"><a href="#mkdocs-使用" class="headerlink" title="mkdocs 使用"></a>mkdocs 使用</h1><p>什么是 Mkdocs 呢？</p><blockquote><p>MkDocs is a fast, simple and downright gorgeous static site generator that’s geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introduction below, then check the User Guide for more info.</p></blockquote><p>mkdocs 是一个用 python 编写的静态站点生成工具，主要是用来编写项目文档，文档使用 Markdown 编写，只需要配合一个 YAML 配置文件，就能快速生成一个站点。</p><p>毫无疑问，对于我来说，它有以下几个优点：</p><ul><li>使用 python 编写（说明有 DIY 的可能）</li><li>源文件使用 Markdown 编写</li><li>只需要一个 Yaml 文件，非常简单了</li><li>主题可选（当然目前来说不是特别多）</li></ul><p>可以先看一下 <a href="https://rebootcat.com/wiki/">我的wiki</a>.</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/wiki/1.png" alt=""></p><a id="more"></a><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>可以参考官方文档：<a href="https://www.mkdocs.org/" target="_blank" rel="noopener">mkdocs.org</a>，或者直接往下看：</p><p>首先安装 mkdocs:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip <span class="keyword">install</span> mkdocs</span><br></pre></td></tr></table></figure><p>安装完成之后直接生成一个项目：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdocs new mysite                                                                    [23:33:49]</span><br><span class="line"><span class="builtin-name">INFO</span>    -  Creating project directory: mysite</span><br><span class="line"><span class="builtin-name">INFO</span>    -  Writing<span class="built_in"> config </span>file: mysite/mkdocs.yml</span><br><span class="line"><span class="builtin-name">INFO</span>    -  Writing initial docs: mysite/docs/index.md</span><br></pre></td></tr></table></figure><p>看看都生成了啥：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cd mysite</span><br><span class="line">$ tree                                                                                    [<span class="number">23</span>:<span class="number">34</span>:<span class="number">59</span>]</span><br><span class="line">.</span><br><span class="line">├── docs</span><br><span class="line">│   └── index.md</span><br><span class="line">└── mkdocs.yml</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> directory, <span class="number">2</span> files</span><br></pre></td></tr></table></figure><p>默认生成了一个 yml 配置文件以及一个 默认的 markdown 文件。</p><p>看看 mkdocs 支持哪些命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ mkdocs -h                                                                               [<span class="number">23</span>:<span class="number">36</span>:<span class="number">21</span>]</span><br><span class="line">Usage: mkdocs [OPTIONS] COMMAND [ARGS]...</span><br><span class="line"></span><br><span class="line">  MkDocs - Project documentation with Markdown.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version  Show the version and <span class="keyword">exit</span>.</span><br><span class="line">  -q, --quiet    Silence warnings</span><br><span class="line">  -v, --verbose  Enable verbose output</span><br><span class="line">  -h, --help     Show this message and <span class="keyword">exit</span>.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  build      Build the MkDocs documentation</span><br><span class="line">  gh-deploy  Deploy your documentation to GitHub Pages</span><br><span class="line">  new        Create a new MkDocs project</span><br><span class="line">  serve      Run the builtin development server</span><br></pre></td></tr></table></figure><p>构建站点：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>mkdocs build</span><br></pre></td></tr></table></figure><p>然后生成了一个 <code>site</code> 目录：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">$ tree                                                                                    [<span class="number">23</span>:<span class="number">37</span>:<span class="number">23</span>]</span><br><span class="line">.</span><br><span class="line">├── docs</span><br><span class="line">│   └── index.md</span><br><span class="line">├── mkdocs.yml</span><br><span class="line">└── site</span><br><span class="line">    ├── <span class="number">404</span>.html</span><br><span class="line">    ├── css</span><br><span class="line">    │   ├── <span class="keyword">base.css</span></span><br><span class="line"><span class="keyword"> </span>   │   ├── <span class="keyword">bootstrap.min.css</span></span><br><span class="line"><span class="keyword"> </span>   │   └── font-awesome.min.css</span><br><span class="line">    ├── fonts</span><br><span class="line">    │   ├── fontawesome-webfont.eot</span><br><span class="line">    │   ├── fontawesome-webfont.svg</span><br><span class="line">    │   ├── fontawesome-webfont.ttf</span><br><span class="line">    │   ├── fontawesome-webfont.woff</span><br><span class="line">    │   ├── fontawesome-webfont.woff2</span><br><span class="line">    │   ├── glyphicons-halflings-regular.eot</span><br><span class="line">    │   ├── glyphicons-halflings-regular.svg</span><br><span class="line">    │   ├── glyphicons-halflings-regular.ttf</span><br><span class="line">    │   ├── glyphicons-halflings-regular.woff</span><br><span class="line">    │   └── glyphicons-halflings-regular.woff2</span><br><span class="line">    ├── img</span><br><span class="line">    │   ├── favicon.ico</span><br><span class="line">    │   └── grid.png</span><br><span class="line">    ├── index.html</span><br><span class="line">    ├── <span class="keyword">js</span></span><br><span class="line"><span class="keyword"> </span>   │   ├── <span class="keyword">base.js</span></span><br><span class="line"><span class="keyword"> </span>   │   ├── <span class="keyword">bootstrap.min.js</span></span><br><span class="line"><span class="keyword"> </span>   │   └── <span class="keyword">jquery-1.10.2.min.js</span></span><br><span class="line"><span class="keyword"> </span>   ├── search</span><br><span class="line">    │   ├── lunr.<span class="keyword">js</span></span><br><span class="line"><span class="keyword"> </span>   │   ├── main.<span class="keyword">js</span></span><br><span class="line"><span class="keyword"> </span>   │   ├── search_index.<span class="keyword">json</span></span><br><span class="line"><span class="keyword"> </span>   │   └── worker.<span class="keyword">js</span></span><br><span class="line"><span class="keyword"> </span>   ├── sitemap.xml</span><br><span class="line">    └── sitemap.xml.gz</span><br><span class="line"></span><br><span class="line"><span class="number">7</span> <span class="keyword">directories, </span><span class="number">28</span> files</span><br></pre></td></tr></table></figure><p>可以看到 site 目录下就是站点的源码了，那么本地测试一下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>mkdocs serve</span><br></pre></td></tr></table></figure><p>然后访问 <code>http://127.0.0.1:8000</code>，能看到默认的站点了：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/wiki/2.png" alt=""></p><p><strong>是不是超级超级简单</strong>？</p><p>那么这个是 mkdocs 最简单的使用，接下来分享下我的使用，经过了一些定制化，包括主题的选择，域名的绑定，站点的发布等。</p><h1 id="使用-github-pages-发布-wiki"><a href="#使用-github-pages-发布-wiki" class="headerlink" title="使用 github pages 发布 wiki"></a>使用 github pages 发布 wiki</h1><p>我的博客使用了 github pages 进行托管（目前不是，目前已经迁移到香港虚拟空间），但是如何把上面 mkdocs 生成的站点源码和博客源码放到一起呢？</p><p>有很多方法，比如可以手动把 wiki 站点源码放到博客根目录下；</p><p>但其实 <strong>github pages 是可以支持多个站点的</strong>，不知道有没有同学还不知道？</p><p>简单来说，使用一个 github 账号，能创建一个 <strong>用户站点</strong>，格式为 <code>&lt;user&gt;.github.io</code>，比如我的博客源码仓库： <a href="https://github.com/smaugx/smaugx.github.io" target="_blank" rel="noopener">smaugx.github.io</a>;</p><p>但是除了一个用户站点之外，还能创建任意多个 <strong>普通站点</strong>，仓库名字任意，没有要求。</p><p><strong>也就是说一个 github 账户其实是可以创建多个博客站点的</strong>。</p><p>关于如何创建一个普通站点，可以参考 github 官方文档：<a href="https://docs.github.com/cn/github/working-with-github-pages/creating-a-github-pages-site" target="_blank" rel="noopener">创建 GitHub Pages 站点</a>.</p><p>或者往下看。</p><h2 id="wiki-仓库设置"><a href="#wiki-仓库设置" class="headerlink" title="wiki 仓库设置"></a>wiki 仓库设置</h2><p>这里以我的 wiki 为例： <a href="https://github.com/smaugx/wiki" target="_blank" rel="noopener">https://github.com/smaugx/wiki</a>，站点效果可以直接查看我的 wiki: <a href="https://rebootcat.com/wiki">https://rebootcat.com/wiki</a>。</p><p>1 在 github 上创建一个仓库，命名为 wiki 或者其他的任意名字</p><p>2 克隆我的项目： <code>git clone https://github.com/smaugx/wiki.git</code></p><p>3 更改仓库 remote-url 为你刚创建的 wiki 的 github url</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> wiki</span><br><span class="line">git remote <span class="keyword">rm</span> origin</span><br><span class="line">git remote add origin  https:<span class="comment">//github.com/yourname/your-wiki.git</span></span><br></pre></td></tr></table></figure><p>上面改成你自己的 wiki 地址（或者使用 ssh 的方式）</p><p>4 推送本地仓库 wiki 到远程 wiki</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><p>至此，你的 github 上应该有一个和我的 wiki 仓库一样的仓库了。</p><p>接下来讲一下怎么设置仓库。</p><p>5 首先去到刚创建好的 wiki 仓库 <code>https://github.com/yourname/your-wiki</code></p><p>6 点击设置，往下拉到 <strong>GiHub Pages</strong> 配置项，选择 <strong>master</strong> 分支，选择 <strong>/docs</strong> 目录，然后点击 <strong>save</strong> 保存</p><p>7 上面一部之后，再次回到 <strong>Github Pages</strong> 配置项，找到下面的 <strong>Custom domain</strong>，填入你的域名或者 url 地址，比如我直接写了： <code>http://rebootcat.com/wiki</code></p><p>8 不出意外，你就能正常访问了。</p><blockquote><p>上面的前提当然是你已经有了个人博客，也就是已经有了一个命名为 <code>&lt;user&gt;.github.io</code> 的仓库了，不然是不会成功了，你要先创建一个这样的仓库。</p></blockquote><h2 id="编写wiki，更新-wiki"><a href="#编写wiki，更新-wiki" class="headerlink" title="编写wiki，更新 wiki"></a>编写wiki，更新 wiki</h2><p>上面如果顺利的话，你能看到和我的 wiki 一样的内容：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/wiki/1.png" alt=""></p><p>那么如何编写你自己的 wiki 文章呢？</p><p>我们回到本地的 wiki 仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> wiki</span><br></pre></td></tr></table></figure><p>注意，我的文档都放在了 <strong>source</strong> 目录下：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls source</span><br><span class="line">git.<span class="built_in">md</span>    index.<span class="built_in">md</span>  other.<span class="built_in">md</span>  python.<span class="built_in">md</span> rsync.<span class="built_in">md</span></span><br></pre></td></tr></table></figure><p>所以你只需要删除我的 Markdown文档，把你的 Markdown 文档放到该目录，然后执行：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">$ python run.py</span><br><span class="line">warning: found not support file type:.DS_Store</span><br><span class="line">############### begin dump mkdocs.yml ###############</span><br><span class="line">copyright: <span class="string">"Copyright \xA9 2020-2020 smaug"</span></span><br><span class="line">docs_dir: source</span><br><span class="line">extra:</span><br><span class="line">  article_nav_bottom: true</span><br><span class="line">  history_buttons: true</span><br><span class="line">  version: v1<span class="number">.0</span><span class="number">.4</span></span><br><span class="line">markdown_extensions:</span><br><span class="line">- admonition</span><br><span class="line">nav:</span><br><span class="line">- Home: index.md</span><br><span class="line">- python: python.md</span><br><span class="line">- rsync: rsync.md</span><br><span class="line">- git: git.md</span><br><span class="line">- <span class="string">"\u5176\u4ED6"</span>: other.md</span><br><span class="line">repo_url: https:<span class="comment">//github.com/smaugx/wiki</span></span><br><span class="line">site_author: smaugx</span><br><span class="line">site_description: <span class="string">"My Wiki | \u6797\u5915\u6C34\u5171"</span></span><br><span class="line">site_dir: docs</span><br><span class="line">site_name: <span class="string">"My Wiki | \u6797\u5915\u6C34\u5171"</span></span><br><span class="line">site_url: http:<span class="comment">//rebootcat.com/wiki</span></span><br><span class="line">theme:</span><br><span class="line">  custom_dir: mkdocs_windmill</span><br><span class="line">  include_search_page: true</span><br><span class="line">  name: null</span><br><span class="line">  search_index_only: true</span><br><span class="line">  static_templates:</span><br><span class="line">  - <span class="number">404.</span>html</span><br><span class="line"></span><br><span class="line">############### update mkdocs.yml done ###############</span><br><span class="line"></span><br><span class="line">############### begin mkdocs build ###############</span><br><span class="line">INFO    -  Cleaning site directory</span><br><span class="line">INFO    -  Building documentation to directory: /Users/smaug/centos7/SmaugDemo/wiki/docs</span><br><span class="line">INFO    -  Documentation built <span class="keyword">in</span> <span class="number">0.18</span> seconds</span><br><span class="line">############### mkdocs build done <span class="keyword">in</span> dir:docs ###############</span><br><span class="line"></span><br><span class="line">############### begin git push:git add --all . &amp;&amp; git commit -m <span class="string">"update mkdocs site"</span> &amp;&amp; git push ###############</span><br><span class="line">Counting objects: <span class="number">5</span>, done.</span><br><span class="line">Delta compression using up to <span class="number">4</span> threads.</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">5</span>/<span class="number">5</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">5</span>/<span class="number">5</span>), <span class="number">443</span> bytes | <span class="number">443.00</span> KiB/s, done.</span><br><span class="line">Total <span class="number">5</span> (delta <span class="number">4</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">remote: Resolving deltas: <span class="number">100</span>% (<span class="number">4</span>/<span class="number">4</span>), completed <span class="keyword">with</span> <span class="number">4</span> local objects.</span><br><span class="line">To github.com:smaugx/wiki.git</span><br><span class="line">   ba3b15e.<span class="number">.4131</span>b86  master -&gt; master</span><br><span class="line">[master <span class="number">4131</span>b86] update mkdocs site</span><br><span class="line"> <span class="number">2</span> files changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</span><br><span class="line">############### git push done ###############</span><br></pre></td></tr></table></figure><p>这个脚本的功能是根据 <strong>source</strong> 目录下的 Markdown 文档，更新 yaml 站点配置文件，然后生成站点源码，然后推送站点源码到 github 上。</p><p>如果执行出错，可以自行调试一下，一般问题不大。</p><h1 id="博客首页引导栏添加-维基栏"><a href="#博客首页引导栏添加-维基栏" class="headerlink" title="博客首页引导栏添加 维基栏"></a>博客首页引导栏添加 <code>维基</code>栏</h1><p>这个过程就省略了。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/wiki/3.png" alt=""></p><h1 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h1><p>wiki 站点搭建完毕，</p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#x69;&#110;&#x75;&#120;&#x63;&#x6f;&#100;&#101;&#50;&#110;&#x69;&#x6b;&#105;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#108;&#x69;&#110;&#x75;&#120;&#x63;&#x6f;&#100;&#101;&#50;&#110;&#x69;&#x6b;&#105;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></p></li></ul><p>2020-09-20 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;why-wiki&quot;&gt;&lt;a href=&quot;#why-wiki&quot; class=&quot;headerlink&quot; title=&quot;why wiki&quot;&gt;&lt;/a&gt;why wiki&lt;/h1&gt;&lt;p&gt;博客通常是用来记录一些完整的文章，每篇文章有一个主题。但是我想把平日里的一些笔记也记录到我的博客里，但笔记是零散的，随时的，不是完整的一个主题。所以打算构建一个 wiki 页面，专门用来存放我的笔记，wiki 页面类似于 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;维基百科&lt;/a&gt;的形式。&lt;/p&gt;
&lt;p&gt;我的博客采用的是 hexo 构建的，如果打算 DIY 一个类似于 &lt;strong&gt;维基百科&lt;/strong&gt; 的 wiki 页面的话，对于我来说，也许有点难度，毕竟我只会写简单的网页。那么有没有现成的方案或者替代的方案呢？&lt;/p&gt;
&lt;p&gt;答案是有的，那就是 &lt;strong&gt;mkdocs&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&quot;mkdocs-使用&quot;&gt;&lt;a href=&quot;#mkdocs-使用&quot; class=&quot;headerlink&quot; title=&quot;mkdocs 使用&quot;&gt;&lt;/a&gt;mkdocs 使用&lt;/h1&gt;&lt;p&gt;什么是 Mkdocs 呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MkDocs is a fast, simple and downright gorgeous static site generator that’s geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introduction below, then check the User Guide for more info.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;mkdocs 是一个用 python 编写的静态站点生成工具，主要是用来编写项目文档，文档使用 Markdown 编写，只需要配合一个 YAML 配置文件，就能快速生成一个站点。&lt;/p&gt;
&lt;p&gt;毫无疑问，对于我来说，它有以下几个优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 python 编写（说明有 DIY 的可能）&lt;/li&gt;
&lt;li&gt;源文件使用 Markdown 编写&lt;/li&gt;
&lt;li&gt;只需要一个 Yaml 文件，非常简单了&lt;/li&gt;
&lt;li&gt;主题可选（当然目前来说不是特别多）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以先看一下 &lt;a href=&quot;https://rebootcat.com/wiki/&quot;&gt;我的wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/wiki/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://rebootcat.com/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://rebootcat.com/tags/hexo/"/>
    
      <category term="blog" scheme="https://rebootcat.com/tags/blog/"/>
    
      <category term="github" scheme="https://rebootcat.com/tags/github/"/>
    
      <category term="wiki" scheme="https://rebootcat.com/tags/wiki/"/>
    
      <category term="mkdocs" scheme="https://rebootcat.com/tags/mkdocs/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 配置 Cloudflare 免费 CDN</title>
    <link href="https://rebootcat.com/2020/09/20/cloudflare/"/>
    <id>https://rebootcat.com/2020/09/20/cloudflare/</id>
    <published>2020-09-20T05:23:58.000Z</published>
    <updated>2020-09-20T05:25:54.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><p>关于 CDN 是什么，我想应该不用做过多的介绍，毕竟现在是一个 “云” 的时代，你至少也听说过 阿里云 或者 腾讯云 吧，当然其中就包括 CDN 业务。</p><p>CDN 的作用有很多，比如可以用来加速网站的访问，可以用来防护网站等。本篇文章讨论的就是使用 cloudflare 作为 CDN 来加速博客网站，并让博客开启 https，提升博客安全等级。 </p><ul><li>加速网站访问</li><li>开启https</li></ul><p>选择什么 CDN 呢？</p><p>选择 CDN，对于个人博客来说，主要考虑的还是访问速度以及价格，当然也有免费的 CDN。<a href="https://cloudflare.com" target="_blank" rel="noopener">Cloudflare</a> 就是一家提供免费 CDN 的公司，也是在 CDN 领域比较知名的公司。</p><p>话不多说，关于 cloudflare 的配置网上可以搜到很多文章，这里我就简单记录一下。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/cloudflare/0.png" alt=""></p><a id="more"></a><h1 id="Cloudflare-配置"><a href="#Cloudflare-配置" class="headerlink" title="Cloudflare 配置"></a>Cloudflare 配置</h1><p>由于我的博客 <a href="https://rebootcat.com">rebootcat.com</a> 已经迁移到香港的虚拟主机了，并且开启了 https 访问，详见博文： <a href="https://rebootcat.com/2020/09/20/virtual_space_blog/">迁移博客到香港虚拟空间</a>，故我以我另外的一个博客 <a href="http://loveyxq.online/" target="_blank" rel="noopener">loveyxq.online</a> 为例说明。</p><p><a href="http://loveyxq.online/" target="_blank" rel="noopener">loveyxq.online</a> 这个博客是我给我女朋友搭建的，放了一些图片之类的，之前也是托管于 github pages 上。</p><h2 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h2><p>1 开始之前，需要限注册一个 <a href="https://cloudflare.com" target="_blank" rel="noopener">Cloudflare</a> 账号，这个没说的</p><p>2 注册好之后 <code>Add site</code> 添加你的博客域名</p><p>3 然后选择一个计划 <code>Select a plan</code>，此处我们选择免费版本的（当然你也可以选择收费版），然后点击 <code>Confirm plan</code></p><p>4 然后添加 DNS 记录</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/cloudflare/1.png" alt=""></p><p>5 完成之后需要去到你的域名注册网站，修改 nameservers 为 cloudflare 自己的，通常是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Type</span><span class="selector-tag">Value</span></span><br><span class="line"><span class="selector-tag">NS</span><span class="selector-tag">deb</span><span class="selector-class">.ns</span><span class="selector-class">.cloudflare</span><span class="selector-class">.com</span></span><br><span class="line"><span class="selector-tag">NS</span><span class="selector-tag">wilson</span><span class="selector-class">.ns</span><span class="selector-class">.cloudflare</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><p>6 完成之后点击 <code>Recheck Nameservers</code> 来检查配置是否正确。</p><h2 id="https-开启"><a href="#https-开启" class="headerlink" title="https 开启"></a>https 开启</h2><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/cloudflare/2.png" alt=""></p><p>如上图所示，选择 <code>Full mode</code>。</p><p>设置完成后需要等待一段时间，才能使用  https 的方式去访问。此处是一个坑，设置完成以后别着急，可能要等待一个小时左右（具体忘了），cloudflare 在做 ssl 验证。</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>实话实说，效果没有很好，毕竟免费版本的 cloudflare 给的解析节点其实不多， 如下图红框内部所示。然后也可以看到，全球各地对 loveyxq.online 的解析都是到了 cloudflare 上，已经没有 github pages 的 IP 了。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/cloudflare/3.png" alt=""></p><p>另外，使用了 cloudflare 之后，cloudflare 也会对网站的访问情况以及防御情况做统计：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/cloudflare/4.png" alt=""></p><h1 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h1><p>关于 CDN 的介绍，以后有空再重新分享一篇吧。主要是涉及到 CDN 的安全以及源站的防护这块。</p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#x69;&#110;&#x75;&#x78;&#x63;&#111;&#100;&#101;&#x32;&#110;&#x69;&#107;&#105;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#111;&#x6d;">&#108;&#x69;&#110;&#x75;&#x78;&#x63;&#111;&#100;&#101;&#x32;&#110;&#x69;&#107;&#105;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#111;&#x6d;</a></p></li></ul><p>2020-09-20 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CDN&quot;&gt;&lt;a href=&quot;#CDN&quot; class=&quot;headerlink&quot; title=&quot;CDN&quot;&gt;&lt;/a&gt;CDN&lt;/h1&gt;&lt;p&gt;关于 CDN 是什么，我想应该不用做过多的介绍，毕竟现在是一个 “云” 的时代，你至少也听说过 阿里云 或者 腾讯云 吧，当然其中就包括 CDN 业务。&lt;/p&gt;
&lt;p&gt;CDN 的作用有很多，比如可以用来加速网站的访问，可以用来防护网站等。本篇文章讨论的就是使用 cloudflare 作为 CDN 来加速博客网站，并让博客开启 https，提升博客安全等级。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加速网站访问&lt;/li&gt;
&lt;li&gt;开启https&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择什么 CDN 呢？&lt;/p&gt;
&lt;p&gt;选择 CDN，对于个人博客来说，主要考虑的还是访问速度以及价格，当然也有免费的 CDN。&lt;a href=&quot;https://cloudflare.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cloudflare&lt;/a&gt; 就是一家提供免费 CDN 的公司，也是在 CDN 领域比较知名的公司。&lt;/p&gt;
&lt;p&gt;话不多说，关于 cloudflare 的配置网上可以搜到很多文章，这里我就简单记录一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/cloudflare/0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://rebootcat.com/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://rebootcat.com/tags/hexo/"/>
    
      <category term="blog" scheme="https://rebootcat.com/tags/blog/"/>
    
      <category term="cdn" scheme="https://rebootcat.com/tags/cdn/"/>
    
      <category term="cloudflare" scheme="https://rebootcat.com/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>迁移博客到香港虚拟空间</title>
    <link href="https://rebootcat.com/2020/09/20/virtual_space_blog/"/>
    <id>https://rebootcat.com/2020/09/20/virtual_space_blog/</id>
    <published>2020-09-20T03:23:58.000Z</published>
    <updated>2020-09-20T04:02:51.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>我的博客一直采用的是 github pages 来托管，中间断断续续的也没怎么管理过，偶尔写几篇博客，所以也就没怎么关心过访问速度，搜索引擎收录等问题。</p><p>不过我对博客一直还是情有独钟，我觉得像我一样的软件工程师，如果能有个人博客，并且保持一定程度的更新率还是很有必要的。</p><p>这次迁移主要考虑三个原因：</p><ul><li>访问速度较慢</li><li>博客还不支持 https</li><li>谷歌搜索引擎收录较少</li></ul><p>github pages 服务器位于美国，对于中文博客来说，访问还是有一些慢的，且不说 github 未来在我国很有可能被 feng，所以打算迁移到国内来。之前博客其实是有部署过双线的，国外走 github，国内走 coding，但奈何 coding 不争气，后来我干脆停了 coding 的解析。现在打算找一个付费的香港虚拟主机，一年几十块钱搞定。</p><p>另外就是由于之前已经采用了 <strong>rebootcat.com</strong> 这个域名，所以无法在 github pages 上开启 https（当然方法是有的，比如使用 cloudflare 加速，这个详见我另外一篇博文），所以这次的迁移也打算开启全站 https。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/virtual_space_blog/1.png" alt=""></p><a id="more"></a><h1 id="购买香港虚拟主机"><a href="#购买香港虚拟主机" class="headerlink" title="购买香港虚拟主机"></a>购买香港虚拟主机</h1><p>虚拟主机是什么？</p><blockquote><p>虚拟主机（英语：virtual hosting）或称 共享主机（shared web hosting），又称虚拟服务器，是一种在单一主机或主机群上，实现多网域服务的方法，可以运行多个网站或服务的技术。虚拟主机之间完全独立，并可由用户自行管理，虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器。(来自某百科）</p></blockquote><p>简单来说，虚拟主机就是你可以用来托管网站，给你一定量的存储空间，以及访问流量，还有IP 或者域名绑定等。</p><p>这里需要说明的是，你能搜到很多免费的虚拟空间，免费的我个人不太建议，免费的有很多问题这里就不细说了，况且付费的也没有很贵，一年几十块钱，当然还是有可能跑路的（手动狗头）！</p><p>如上图所示，这是我购买的虚拟主机的控制面板，提供了比较方便的中文管理面板，比如域名绑定，缓存设置，SSL 设置，FTP 管理等。</p><p>具体是哪一家，我就不说了（没有给我广告费，我的服务商看到了欢迎联系）。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>由于之前是解析到 github pages 的，现在购买了虚拟主机后，会有一个新的 IP，需要重新解析域名到这个 IP 上</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/virtual_space_blog/2.png" alt=""></p><p>如上图所示，红色框里面的就是新加的两条 DNS 解析记录，黄色框里面就是之前解析到 github pages 的记录，现在我把他们全部暂停了（以防后期会用到）。</p><p>解析完成之后，等待生效，使用多地 ping 的工具去测试一下 DNS 解析是否生效了。或者你本地使用 ping 看是否生效了。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$<span class="built_in"> ping </span>rebootcat.com -c 4                                            [10:45:50]</span><br><span class="line">PING rebootcat.com (109.206.246.144): 56 data bytes</span><br><span class="line">64 bytes <span class="keyword">from</span> 109.206.246.144: <span class="attribute">icmp_seq</span>=0 <span class="attribute">ttl</span>=52 <span class="attribute">time</span>=44.976 ms</span><br><span class="line">64 bytes <span class="keyword">from</span> 109.206.246.144: <span class="attribute">icmp_seq</span>=1 <span class="attribute">ttl</span>=52 <span class="attribute">time</span>=49.814 ms</span><br><span class="line">64 bytes <span class="keyword">from</span> 109.206.246.144: <span class="attribute">icmp_seq</span>=2 <span class="attribute">ttl</span>=52 <span class="attribute">time</span>=46.947 ms</span><br><span class="line">64 bytes <span class="keyword">from</span> 109.206.246.144: <span class="attribute">icmp_seq</span>=3 <span class="attribute">ttl</span>=52 <span class="attribute">time</span>=46.809 ms</span><br><span class="line"></span><br><span class="line">--- rebootcat.com<span class="built_in"> ping </span>statistics ---</span><br><span class="line">4 packets transmitted, 4 packets received, 0.0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 44.976/47.136/49.814/1.731 ms</span><br></pre></td></tr></table></figure><p>可以看到上面解析到了新的 IP 上。</p><h2 id="FTP-上传网站源码"><a href="#FTP-上传网站源码" class="headerlink" title="FTP 上传网站源码"></a>FTP 上传网站源码</h2><p>我的博客是基于  hexo 搭建的，之前是直接把网站源码发布到 github pages 上了：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo d -g</span></span><br></pre></td></tr></table></figure><p>现在需要把生成的网站源码打包上传到虚拟主机上。</p><p>hexo 生成的网站源码位于  <code>public</code> 目录下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">zip</span> -r blog.<span class="built_in">zip</span> <span class="keyword">public</span></span><br></pre></td></tr></table></figure><p>然后把 blog.zip 通过面板上的 <strong>在线文件管理</strong> 上传到虚拟主机的根目录里，比如我的根目录是 <code>/wwwroot/</code>，然后点击解压。</p><p>完成之后，浏览器输入网站</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//rebootcat.com</span></span><br></pre></td></tr></table></figure><p>看能否正确响应。一般来说，没什么问题，如果无法访问，请联系你的虚拟主机提供商。</p><h2 id="自动化上传网站源码"><a href="#自动化上传网站源码" class="headerlink" title="自动化上传网站源码"></a>自动化上传网站源码</h2><p>上面的步骤，基本上已经完成了博客迁移的大部分工作了。不过对于程序员来说，怎么能每次更新博文之后还要重复上面的步骤，甚至是需要每次用浏览器打开虚拟主机控制面板上传网站源码，那岂不是很麻烦，并且不够极客精神。</p><p>那必然是要做成自动化的方式，一个命令搞定网站更新。</p><p>其实也简单，就是利用服务商提供的 FTP 口令，使用 python 脚本自动化上传网站源码，实现自动化更新。</p><p>python 脚本可以直接从我的 github 下载：</p><p><a href="https://github.com/smaugx/dailytools/blob/master/ftpblog.py" target="_blank" rel="noopener">https://github.com/smaugx/dailytools/blob/master/ftpblog.py</a></p><p>然后修改代码里的网站域名以及 ftp 口令，改成你自己的，修改上传的本地目录以及远程目录，然后执行脚本自动化上传：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> ftpblog.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><h2 id="配置-HTTPS"><a href="#配置-HTTPS" class="headerlink" title="配置 HTTPS"></a>配置 HTTPS</h2><p>使用的是 <a href="https://freessl.cn/" target="_blank" rel="noopener">https://freessl.cn/</a> 生成免费的 HTTPS 证书。</p><p>打开网站，输入你的域名以及邮箱，根据提示下载一个工具 <strong>KeyManager</strong>，然后生成证书：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/virtual_space_blog/3.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/virtual_space_blog/4.png" alt=""></p><p>然后回到 freessl.cn 网站页面进行 DNS 验证：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/virtual_space_blog/5.png" alt=""></p><p>目的就是为了验证你的域名的所有权。这里根据提示，去 DNS 解析的地方设置解析记录。</p><p>验证成功之后使用 <strong>KeyManager</strong> 导出证书：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/virtual_space_blog/6.png" alt=""></p><p>然后会得到一个类似于 <code>rebootcat-com-nginx-0909002710.zip</code> 的包，解压之后会得到两个文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rebootcat</span><span class="selector-class">.com_chain</span><span class="selector-class">.crt</span></span><br><span class="line"><span class="selector-tag">rebootcat</span><span class="selector-class">.com_key</span><span class="selector-class">.key</span></span><br></pre></td></tr></table></figure><p>用编辑器打开这两个文件，或者直接 <code>cat</code> 这两个文件，一个是 SSl 的证书，一个是 SSL 密钥，把这两个文件的内容拷贝到虚拟主机面板的 SSL设置处：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/virtual_space_blog/7.png" alt=""></p><p>并且开启了 http 跳转 https。</p><p>到此， HTTPS 证书设置就完成了。</p><blockquote><p>注意需要记住 KeyManager 的主密码</p></blockquote><p>试试用 <a href="https://rebootcat.com">https://rebootcat.com</a> 看能否正确访问呢？</p><h1 id="网站云监控"><a href="#网站云监控" class="headerlink" title="网站云监控"></a>网站云监控</h1><p>由于购买的是香港的虚拟主机，毕竟一年也才几十块钱，很难说服务提供商就跑路了，为了避免这一类事情发生的时候导致博客无法访问，有必要对博客网站进行一些云监控，一旦出现异常，则告警。</p><p>免费的网站监控工具有很多，我用的是阿里云的监控以及 UpTimeRobot 的网站监控：</p><ul><li><a href="https://uptimerobot.com/dashboard" target="_blank" rel="noopener">https://uptimerobot.com/dashboard</a></li><li><a href="https://cloudmonitor.console.aliyun.com/" target="_blank" rel="noopener">https://cloudmonitor.console.aliyun.com/</a></li></ul><p>这个自行设置一下，注意设置好报警阈值，不然可能会造成误报：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/virtual_space_blog/8.png" alt=""></p><p>所以一旦出了很严重的报警，那么说明你的服务商跑路了。。。</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>这里就简单贴一下迁移前后的效果图：</p><p>迁移前：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/virtual_space_blog/9.png" alt=""></p><p>迁移后：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/virtual_space_blog/10.png" alt=""></p><p>可以看到还是有很好的改善的，毕竟服务器位于香港。</p><h1 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h1><p>到此，博客迁移就完成了，访问速度提升了，也开启了 https。接下来我会考虑对博客首页做一些优化，但由于现在图片走的其实还是 jsdelivr 的国外 cdn，所以速度还是有点慢，可以考虑直接把图片放到网站根目录下，毕竟现在使用的是虚拟主机。</p><p>后面再说吧，也可以考虑把图片等放到阿里云或者腾讯云对象存储上。</p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#x69;&#x6e;&#x75;&#x78;&#x63;&#111;&#100;&#101;&#x32;&#x6e;&#105;&#107;&#105;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;">&#x6c;&#x69;&#x6e;&#x75;&#x78;&#x63;&#111;&#100;&#101;&#x32;&#x6e;&#105;&#107;&#105;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;</a></p></li></ul><p>2020-09-20 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h1&gt;&lt;p&gt;我的博客一直采用的是 github pages 来托管，中间断断续续的也没怎么管理过，偶尔写几篇博客，所以也就没怎么关心过访问速度，搜索引擎收录等问题。&lt;/p&gt;
&lt;p&gt;不过我对博客一直还是情有独钟，我觉得像我一样的软件工程师，如果能有个人博客，并且保持一定程度的更新率还是很有必要的。&lt;/p&gt;
&lt;p&gt;这次迁移主要考虑三个原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问速度较慢&lt;/li&gt;
&lt;li&gt;博客还不支持 https&lt;/li&gt;
&lt;li&gt;谷歌搜索引擎收录较少&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;github pages 服务器位于美国，对于中文博客来说，访问还是有一些慢的，且不说 github 未来在我国很有可能被 feng，所以打算迁移到国内来。之前博客其实是有部署过双线的，国外走 github，国内走 coding，但奈何 coding 不争气，后来我干脆停了 coding 的解析。现在打算找一个付费的香港虚拟主机，一年几十块钱搞定。&lt;/p&gt;
&lt;p&gt;另外就是由于之前已经采用了 &lt;strong&gt;rebootcat.com&lt;/strong&gt; 这个域名，所以无法在 github pages 上开启 https（当然方法是有的，比如使用 cloudflare 加速，这个详见我另外一篇博文），所以这次的迁移也打算开启全站 https。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/virtual_space_blog/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://rebootcat.com/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://rebootcat.com/tags/hexo/"/>
    
      <category term="blog" scheme="https://rebootcat.com/tags/blog/"/>
    
      <category term="virtualhost" scheme="https://rebootcat.com/tags/virtualhost/"/>
    
      <category term="ftp" scheme="https://rebootcat.com/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next 博客添加相册瀑布流</title>
    <link href="https://rebootcat.com/2020/09/19/nextphotowall/"/>
    <id>https://rebootcat.com/2020/09/19/nextphotowall/</id>
    <published>2020-09-19T03:23:58.000Z</published>
    <updated>2020-09-20T01:28:13.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直没有时间来整理下博客搭建的一些事情，现在补上一篇，给 Hexo Next 博客添加一个相册功能，使用瀑布流的方式。</p><h1 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h1><ul><li>使用 github 作为仓库存储图片文件（图床）</li><li>使用 jsdelivr 进行图片 CDN 加速</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>此种方式的优点是免费，不需要购买其他的对象存储产品；并且使用的是 github 作为图床，图片不会丢失。</p><blockquote><p>早期的博文使用的是七牛云的免费存储，结果后来被他们删掉了。。。结果造成文中的一些图片链接都是 404，有兴趣的可以翻一翻我早期的博客。</p></blockquote><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>由于采用的是 github 仓库存储图片，但是 github 对单仓库有 50MB 的大小限制，所以单仓库可能不能够存储太多的文件；</p><p>解决方法就是建立很多的图片仓库（稍微有点费劲，不过是行得通的）；另外上传的单张图片大小最好不要太大。</p><p>还有个缺点就是得折腾啊，且看我后文。</p><p>各位可以参考下我的相册瀑布流: <a href="https://rebootcat.com/photos/">摄影</a></p><h1 id="开始搭建相册瀑布流"><a href="#开始搭建相册瀑布流" class="headerlink" title="开始搭建相册瀑布流"></a>开始搭建相册瀑布流</h1><p>开始之前，需要简单介绍一下，我参考的是 <a href="https://blog.dlzhang.com/posts/31/" target="_blank" rel="noopener">Hexo NexT 博客增加瀑布流相册页面</a> 这篇文章，文中涉及到的脚本主要都是 js 实现；与他不同的是，由于我对 js 的掌握远远不及我对 Python 的掌握，故部分脚本我采用了 Python 实现。</p><p>所以在开始操作之前，你可以根据自己的技能，选择不同的方式。如果你擅长 python，那么跟着我来吧。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/nextphotowall/1.png" alt=""></p><a id="more"></a><h2 id="新建-photo-页面"><a href="#新建-photo-页面" class="headerlink" title="新建 photo 页面"></a>新建 photo 页面</h2><p>去到博客根目录：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> <span class="keyword">source</span>/photos</span><br></pre></td></tr></table></figure><p>然后进入 photos 目录：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="keyword">source</span>/photos</span><br><span class="line"><span class="keyword">vim</span> <span class="built_in">index</span>.md</span><br></pre></td></tr></table></figure><p>把下面的粘贴保存：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 摄影</span><br><span class="line">type: photos</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- CSS Code --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.MyGrid</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">max-width</span>:<span class="number">1040px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto;<span class="attribute">text-align</span>:center&#125;<span class="selector-class">.card</span>&#123;<span class="attribute">overflow</span>:hidden;<span class="attribute">transition</span>:.<span class="number">3s</span> ease-in-out;<span class="attribute">border-radius</span>:<span class="number">8px</span>;<span class="attribute">background-color</span>:<span class="number">#efefef</span>;<span class="attribute">padding</span>:<span class="number">1.4px</span>&#125;<span class="selector-class">.ImageInCard</span> <span class="selector-tag">img</span>&#123;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">border-radius</span>:<span class="number">8px</span>&#125;</span></span><br><span class="line">@media(prefers-color-scheme:dark)&#123;.card&#123;background-color:#333;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CSS Code End --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"MyGrid"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改-Next-主题配置文件"><a href="#修改-Next-主题配置文件" class="headerlink" title="修改 Next 主题配置文件"></a>修改 Next 主题配置文件</h2><p>添加了 photos 页面后，需要在 next 配置文件中修改：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim themes/next/<span class="module-access"><span class="module"><span class="identifier">_config</span>.</span></span>yml</span><br></pre></td></tr></table></figure><p>找到 menu 项，填入如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">photos: /photos <span class="string">|| fas fa-camera-retro</span></span><br></pre></td></tr></table></figure><p>比如我的是这样的：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || user</span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat</span></span><br><span class="line"><span class="symbol">  guestbook:</span> /guestbook || fas fa-comments</span><br><span class="line"><span class="symbol">  photos:</span> /photos || fas fa-camera-retro</span><br><span class="line"><span class="symbol">  wiki:</span> <span class="meta-keyword">/wiki/</span> || wikipedia-w</span><br></pre></td></tr></table></figure><p>完成之后还需要修改一下这个文件：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim themes/next/languages/zh-<span class="module-access"><span class="module"><span class="identifier">CN</span>.</span></span>yml</span><br></pre></td></tr></table></figure><p>找到 menu 项，加入如下一行：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">photos:</span> 摄影</span><br></pre></td></tr></table></figure><p>比如我的是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">公益</span> <span class="number">404</span></span><br><span class="line">  <span class="attr">guestbook:</span> <span class="string">留言</span></span><br><span class="line">  <span class="attr">photos:</span> <span class="string">摄影</span></span><br><span class="line">  <span class="attr">wiki:</span> <span class="string">维基</span></span><br></pre></td></tr></table></figure><p>OK，到这里应该能看到这个 <strong>摄影</strong> 页面了，你可以现在本地测试一下看：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s -g</span></span><br></pre></td></tr></table></figure><h2 id="添加-js-脚本"><a href="#添加-js-脚本" class="headerlink" title="添加 js 脚本"></a>添加 js 脚本</h2><p>首先需要在 source 目录下新建一个 js 目录，用来保存自定义的一些 js 脚本；</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> <span class="keyword">source</span>/js</span><br></pre></td></tr></table></figure><p>然后新建 mygrid.js 文件，粘贴下面的一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取网页不含域名的路径</span></span><br><span class="line"><span class="keyword">var</span> windowPath = <span class="built_in">window</span>.location.pathname;</span><br><span class="line"><span class="comment">// 图片信息文件路径</span></span><br><span class="line"><span class="keyword">var</span> imgDataPath = <span class="string">'/photos/photoslist.json'</span>;</span><br><span class="line"><span class="comment">// 图片显示数量</span></span><br><span class="line"><span class="keyword">var</span> imgMaxNum = <span class="number">50</span>;</span><br><span class="line"><span class="comment">// 获取窗口宽度（以确定图片显示宽度）</span></span><br><span class="line"><span class="keyword">var</span> windowWidth = <span class="built_in">window</span>.innerWidth</span><br><span class="line">|| <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">|| <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line"><span class="keyword">if</span> (windowWidth &lt; <span class="number">768</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> imageWidth = <span class="number">145</span>; <span class="comment">// 图片显示宽度(手机)</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> imageWidth = <span class="number">215</span>; <span class="comment">// 图片显示宽度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 腾讯云图片处理样式（根据图片显示宽度）</span></span><br><span class="line"><span class="keyword">var</span> imgStyle = <span class="string">'!'</span> + imageWidth + <span class="string">'x'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片卡片（照片页面）</span></span><br><span class="line"><span class="keyword">if</span> (windowPath.indexOf(<span class="string">'photos'</span>) &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="keyword">var</span> LinkDataPath = imgDataPath;</span><br><span class="line">    photo = &#123;</span><br><span class="line">        page: <span class="number">1</span>,</span><br><span class="line">        offset: imgMaxNum,</span><br><span class="line">        init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">            $.getJSON(LinkDataPath, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                that.render(that.page, data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        render: <span class="function"><span class="keyword">function</span> (<span class="params">page, data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> begin = (page - <span class="number">1</span>) * <span class="keyword">this</span>.offset;</span><br><span class="line">            <span class="keyword">var</span> end = page * <span class="keyword">this</span>.offset;</span><br><span class="line">            <span class="keyword">if</span> (begin &gt;= data.length) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">var</span> html, imgNameWithPattern, imgName, imageSize, imageX, imageY, li = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = begin; i &lt; end &amp;&amp; i &lt; data.length; i++) &#123;</span><br><span class="line">                imgNameWithPattern = data[i].split(<span class="string">';'</span>)[<span class="number">1</span>];  <span class="comment">// a.png</span></span><br><span class="line">                imgName = imgNameWithPattern.split(<span class="string">'.'</span>)[<span class="number">0</span>]  <span class="comment">// a</span></span><br><span class="line">                imageSize = data[i].split(<span class="string">';'</span>)[<span class="number">0</span>]; <span class="comment">// length.height</span></span><br><span class="line">                imageX = imageSize.split(<span class="string">'.'</span>)[<span class="number">0</span>]; <span class="comment">//  length</span></span><br><span class="line">                imageY = imageSize.split(<span class="string">'.'</span>)[<span class="number">1</span>]; <span class="comment">// height</span></span><br><span class="line"></span><br><span class="line">  cdn_url       = data[i].split(<span class="string">';'</span>)[<span class="number">2</span>]; <span class="comment">// 原图 cdn url</span></span><br><span class="line">  small_cdn_url = data[i].split(<span class="string">';'</span>)[<span class="number">3</span>]; <span class="comment">// 缩略图 cdn url</span></span><br><span class="line"></span><br><span class="line">                li += <span class="string">'&lt;div class="card" style="width:'</span> + imageWidth + <span class="string">'px" &gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;div class="ImageInCard" style="height:'</span>+ imageWidth * imageY / imageX + <span class="string">'px"&gt;'</span> +</span><br><span class="line">                            <span class="string">'&lt;a data-fancybox="gallery" href="'</span> + cdn_url + <span class="string">'" data-caption="'</span> + imgName + <span class="string">'" title="'</span> +  imgName + <span class="string">'"&gt;'</span> +</span><br><span class="line">                                <span class="string">'&lt;img data-src="'</span> + small_cdn_url + <span class="string">'" src="'</span> + small_cdn_url + <span class="string">'" data-loaded="true"&gt;'</span> +</span><br><span class="line">                            <span class="string">'&lt;/a&gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">                      <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">            &#125;</span><br><span class="line">            $(<span class="string">".MyGrid"</span>).append(li);</span><br><span class="line">            <span class="keyword">this</span>.minigrid();</span><br><span class="line">        &#125;,</span><br><span class="line">        minigrid: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> grid = <span class="keyword">new</span> Minigrid(&#123;</span><br><span class="line">                container: <span class="string">'.MyGrid'</span>,</span><br><span class="line">                item: <span class="string">'.card'</span>,</span><br><span class="line">                gutter: <span class="number">12</span></span><br><span class="line">            &#125;);</span><br><span class="line">            grid.mount();</span><br><span class="line">            $(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                grid.mount();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    photo.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者你可以直接在我的博客上找到： <a href="https://rebootcat.com/js/mygrid.js">rebootcat.com/mygrid.js</a></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://rebootcat<span class="number">.</span>com/<span class="keyword">js</span>/mygrid<span class="number">.</span><span class="keyword">js</span> -O source/<span class="keyword">js</span>/mygrid<span class="number">.</span><span class="keyword">js</span></span><br></pre></td></tr></table></figure><h2 id="新建图片信息文件"><a href="#新建图片信息文件" class="headerlink" title="新建图片信息文件"></a>新建图片信息文件</h2><p>我们再次回到 photos 目录，创建文件 photoslist.json：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="keyword">source</span><span class="regexp">/photos/</span>photoslist.json</span><br></pre></td></tr></table></figure><p>然后输入如下的内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">"1080.1920;WechatIMG114.jpeg;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/photowall/cat/WechatIMG114.jpeg;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/photowall/cat/WechatIMG114_small.jpeg"</span>,</span><br><span class="line">  <span class="string">"3024.4032;WechatIMG25834.jpeg;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/photowall/cat/WechatIMG25834.jpeg;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/photowall/cat/WechatIMG25834_small.jpeg"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>OK, 到现在应该你能从博客上看到这两张图片了:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s -g</span></span><br></pre></td></tr></table></figure><p>本地测试一下，如果你能看到在博客的 <strong>摄影</strong> 页面看到这两张图片，那么说明你的配置没问题，你可以进行接下来的操作了；如果你不能正确显示，说明前面的步骤出了问题，自己研究调试一下；如果你还不能解决，欢迎联系我。</p><h2 id="使用-python-脚本生成-photoslist-json"><a href="#使用-python-脚本生成-photoslist-json" class="headerlink" title="使用 python 脚本生成 photoslist.json"></a>使用 python 脚本生成 photoslist.json</h2><p>上面可以看到，<strong>photoslist.json 存放的是图片的信息，mygrid.js 解析 photoslist.json 这个文件，然后在 photos 页面添加 dom</strong>.</p><p>所以核心的部分在于 photoslist.json 文件，我们可以分析下这个文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1080.1920</span>;WechatIMG114.jpeg;https:<span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>smaugx<span class="regexp">/MyblogImgHosting/</span>rebootcat<span class="regexp">/photowall/</span>cat<span class="regexp">/WechatIMG114.jpeg;https:/</span><span class="regexp">/cdn.jsdelivr.net/g</span>h<span class="regexp">/smaugx/</span>MyblogImgHosting<span class="regexp">/rebootcat/</span>photowall<span class="regexp">/cat/</span>WechatIMG114_small.jpeg</span><br></pre></td></tr></table></figure><p>photoslist.json 保存的是一个 list，<strong>list 中每一行是一张图片的信息，包括原始图片大小、文件名、原始图片cdn链接、缩略图cdn链接</strong>。</p><p>前面已经提到，我们的图片是使用了 github 作为图床（仓库），然后使用 jsdelivr 进行 cdn 加速。所以我们应该准备好图片文件，然后上传到仓库。</p><h3 id="新建-github-仓库，用来存放图片文件"><a href="#新建-github-仓库，用来存放图片文件" class="headerlink" title="新建 github 仓库，用来存放图片文件"></a>新建 github 仓库，用来存放图片文件</h3><p>在 <a href="https://github.com" target="_blank" rel="noopener">https://github.com</a> 上创建图片仓库。</p><blockquote><p>当仓库容量超过 50MB 之后需要重新再新建一个仓库</p></blockquote><p>本地克隆仓库，然后把图片放入仓库，上传(这里以我的仓库为例）</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>@github.com:smaugx/MyblogImgHosting_2.git blogimg_2</span><br><span class="line">cd blogimg_2</span><br><span class="line"></span><br><span class="line"><span class="comment"># put some image in this dir</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h3 id="生成-photoslist-json-文件"><a href="#生成-photoslist-json-文件" class="headerlink" title="生成 photoslist.json 文件"></a>生成 photoslist.json 文件</h3><p>编写 python 脚本或者直接从我的网站下载：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//rebootcat.<span class="keyword">com</span>/js/phototool.<span class="keyword">py</span>  -O phototool.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf8  -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ExifTags</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">config = &#123;</span><br><span class="line">        <span class="comment"># github 存储图片的仓库（本地仓库基准目录）</span></span><br><span class="line">        <span class="string">'github_img_host_base'</span>: <span class="string">'/Users/smaug/blogimg_2'</span>,</span><br><span class="line">        <span class="comment"># 会对这个目录下的所有文件夹进行遍历，相同目录生成_samll 的 缩略图</span></span><br><span class="line">        <span class="string">'img_path'</span>:             <span class="string">'/Users/smaug/blogimg_2/rebootcat/photowall'</span>,</span><br><span class="line">        <span class="comment"># cdn 前缀</span></span><br><span class="line">        <span class="string">'cdn_url_prefix'</span>:       <span class="string">'https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2'</span>,</span><br><span class="line">        <span class="comment"># hexo 博客存放 photos 信息的 json 文件</span></span><br><span class="line">        <span class="string">'photo_info_json'</span>:      <span class="string">'/Users/smaug/blog_rebootcat/source/photos/photoslist.json'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩图片到 90%(目的是为了移除一些gps 等信息，并非真的为了压缩）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress_img</span><span class="params">(img_path, rate = <span class="number">0.99</span>, override = False)</span>:</span></span><br><span class="line">    support_ftype_list = [<span class="string">'png'</span>, <span class="string">'PNG'</span>, <span class="string">'jpeg'</span>, <span class="string">'JPEG'</span>, <span class="string">'gif'</span>, <span class="string">'GIF'</span>, <span class="string">'bmp'</span>]</span><br><span class="line">    sp_img = img_path.split(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sp_img <span class="keyword">or</span> sp_img[<span class="number">-1</span>] <span class="keyword">not</span> <span class="keyword">in</span> support_ftype_list:</span><br><span class="line">        print(<span class="string">"not support image type:&#123;0&#125;"</span>, img_path)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    sp_img = img_path.split(<span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sp_img:</span><br><span class="line">        print(<span class="string">"please give the right image path:&#123;0&#125;"</span>, img_path)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    img_full_name = sp_img[<span class="number">-1</span>]</span><br><span class="line">    img_name = img_full_name.split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">    img_type = img_full_name.split(<span class="string">'.'</span>)[<span class="number">1</span>]</span><br><span class="line">    img_path_prefix = img_path[:-len(img_full_name)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 覆盖原图或者另存为</span></span><br><span class="line">    compress_img_path = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> override:</span><br><span class="line">        compress_img_path = img_path</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        compress_img_path = <span class="string">'&#123;0&#125;&#123;1&#125;_com.&#123;2&#125;'</span>.format(img_path_prefix, img_name, img_type)</span><br><span class="line"></span><br><span class="line">    img = Image.open(img_path)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> orientation <span class="keyword">in</span> ExifTags.TAGS.keys() :</span><br><span class="line">            <span class="keyword">if</span> ExifTags.TAGS[orientation]==<span class="string">'Orientation'</span> : <span class="keyword">break</span></span><br><span class="line">        exif=dict(img._getexif().items())</span><br><span class="line">        <span class="keyword">if</span>   exif[orientation] == <span class="number">3</span> :</span><br><span class="line">            img=img.rotate(<span class="number">180</span>, expand = <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">elif</span> exif[orientation] == <span class="number">6</span> :</span><br><span class="line">            img=img.rotate(<span class="number">270</span>, expand = <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">elif</span> exif[orientation] == <span class="number">8</span> :</span><br><span class="line">            img=img.rotate(<span class="number">90</span>, expand = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"catch exception:&#123;0&#125;"</span>,e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        original_size = img.size</span><br><span class="line">        length = original_size[<span class="number">0</span>]</span><br><span class="line">        height = original_size[<span class="number">1</span>]</span><br><span class="line">        new_length = int(length * rate)</span><br><span class="line">        new_height = int(height * rate)</span><br><span class="line">        print(<span class="string">"originla length:&#123;0&#125; height:&#123;1&#125;"</span>, length, height)</span><br><span class="line">        print(<span class="string">"after compress length:&#123;0&#125; height:&#123;1&#125;"</span>, new_length, new_height)</span><br><span class="line">        img = img.resize((new_length, new_height), Image.ANTIALIAS)</span><br><span class="line">        img.save(compress_img_path, img_type)</span><br><span class="line">        print(<span class="string">"save compress img &#123;0&#125;"</span>.format(compress_img_path))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"catch exception:&#123;0&#125;"</span>,e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对 img_path 目录下的文件夹递归生成缩略图保存到同目录下</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thumbnail_pic</span><span class="params">(github_img_host_base, img_path, cdn_url_prefix)</span>:</span></span><br><span class="line">    <span class="comment"># 删除最后一个 '/'</span></span><br><span class="line">    <span class="keyword">if</span> img_path[<span class="number">-1</span>] == <span class="string">'/'</span>:</span><br><span class="line">        img_path = img_path[:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> github_img_host_base[<span class="number">-1</span>] == <span class="string">'/'</span>:</span><br><span class="line">        github_img_host_base = github_img_host_base[:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> cdn_url_prefix[<span class="number">-1</span>] == <span class="string">'/'</span>:</span><br><span class="line">        cdn_url_prefix = cdn_url_prefix[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    photo_info_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(img_path):</span><br><span class="line">        print(item)</span><br><span class="line">        abs_item = os.path.join(img_path, item)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(abs_item): <span class="comment"># sub-dir</span></span><br><span class="line">            sub_img_path = abs_item</span><br><span class="line">            print(<span class="string">"cd dir:&#123;0&#125;"</span>.format(sub_img_path))</span><br><span class="line">            sub_photo_info_list = thumbnail_pic(github_img_host_base, sub_img_path, cdn_url_prefix)</span><br><span class="line">            photo_info_list.extend(sub_photo_info_list)</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># file</span></span><br><span class="line">            ftype = item.split(<span class="string">'.'</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ftype <span class="keyword">or</span> len(ftype) != <span class="number">2</span>:</span><br><span class="line">                print(<span class="string">"error: invalid file:&#123;0&#125;"</span>.format(item))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            fname = ftype[<span class="number">0</span>]  <span class="comment"># a.png -&gt; a</span></span><br><span class="line">            ftype = ftype[<span class="number">1</span>]  <span class="comment"># a.png -&gt; png</span></span><br><span class="line">            support_ftype_list = [<span class="string">'png'</span>, <span class="string">'PNG'</span>, <span class="string">'jpeg'</span>, <span class="string">'JPEG'</span>, <span class="string">'gif'</span>, <span class="string">'GIF'</span>, <span class="string">'bmp'</span>]</span><br><span class="line">            <span class="keyword">if</span> ftype <span class="keyword">not</span> <span class="keyword">in</span> support_ftype_list:</span><br><span class="line">                print(<span class="string">"error: file type &#123;0&#125; not support, only support &#123;1&#125;"</span>.format(ftype, json.dumps(support_ftype_list)))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            abs_file = abs_item</span><br><span class="line">            <span class="keyword">if</span> item.find(<span class="string">'_small'</span>) != <span class="number">-1</span>: <span class="comment"># 这是缩略图</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            small_file = <span class="string">'&#123;0&#125;_small.&#123;1&#125;'</span>.format(fname, ftype)</span><br><span class="line">            abs_small_file = os.path.join(img_path, small_file)  <span class="comment"># 缩略图绝对路径</span></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(abs_small_file):</span><br><span class="line">                <span class="comment"># 对应的 _small 缩略图已经存在</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            compress_status = compress_img(abs_file, <span class="number">0.9</span>, <span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> compress_status:</span><br><span class="line">                print(<span class="string">"compress_img fail:&#123;0&#125;"</span>, abs_file)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            im = Image.open(abs_file)</span><br><span class="line">            original_size = im.size</span><br><span class="line">            length = original_size[<span class="number">0</span>]</span><br><span class="line">            height = original_size[<span class="number">1</span>]</span><br><span class="line">            m = int(float(length) / <span class="number">200.0</span>)  <span class="comment"># 计算缩小比例 (缩略图限制 200 长度)</span></span><br><span class="line">            new_length = int(float(length) / m)</span><br><span class="line">            new_height = int(float(height) / m)</span><br><span class="line">            im.thumbnail((new_length, new_height))  <span class="comment"># 生成缩略图</span></span><br><span class="line">            im.save(abs_small_file, ftype)  <span class="comment"># 保存缩略图</span></span><br><span class="line">            print(<span class="string">"save thumbnail img &#123;0&#125;"</span>.format(abs_small_file))</span><br><span class="line"></span><br><span class="line">            relative_file       = abs_file[len(github_img_host_base) + <span class="number">1</span>:] <span class="comment"># 计算相对路径，用来拼接 cdn</span></span><br><span class="line">            relative_small_file = abs_small_file[len(github_img_host_base) + <span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">            cdn_url_file        = <span class="string">'&#123;0&#125;/&#123;1&#125;'</span>.format(cdn_url_prefix, relative_file)</span><br><span class="line">            cdn_url_small_file  = <span class="string">'&#123;0&#125;/&#123;1&#125;'</span>.format(cdn_url_prefix, relative_small_file)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 格式: 690.690;8.png;http://cdn_file_url;http://cdn_small_file_url;</span></span><br><span class="line">            line = <span class="string">'&#123;0&#125;.&#123;1&#125;;&#123;2&#125;;&#123;3&#125;;&#123;4&#125;'</span>.format(length, height, item, cdn_url_file, cdn_url_small_file)</span><br><span class="line">            photo_info_list.append(line)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># end for loop</span></span><br><span class="line">    print(<span class="string">'dir:&#123;0&#125; Done!'</span>.format(img_path))</span><br><span class="line">    <span class="keyword">return</span> photo_info_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    github_img_host_base = config.get(<span class="string">'github_img_host_base'</span>)</span><br><span class="line">    img_path             = config.get(<span class="string">'img_path'</span>)</span><br><span class="line">    cdn_url_prefix       = config.get(<span class="string">'cdn_url_prefix'</span>)</span><br><span class="line">    photo_info_json      = config.get(<span class="string">'photo_info_json'</span>)</span><br><span class="line"></span><br><span class="line">    photo_info_list     = []</span><br><span class="line">    photo_info_list_has = []</span><br><span class="line">    photo_info_list = thumbnail_pic(github_img_host_base, img_path, cdn_url_prefix)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(photo_info_json):</span><br><span class="line">        <span class="keyword">with</span> open(photo_info_json, <span class="string">'r'</span>) <span class="keyword">as</span> fin:</span><br><span class="line">            photo_info_list_has = json.loads(fin.read())</span><br><span class="line">            fin.close()</span><br><span class="line"></span><br><span class="line">    photo_info_list_has.extend(photo_info_list)  <span class="comment"># 追加此次新增的 photo info</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(photo_info_json, <span class="string">'w'</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        fout.write(json.dumps(photo_info_list_has, indent = <span class="number">2</span>))</span><br><span class="line">        print(<span class="string">"save photo_info_list to &#123;0&#125;"</span>.format(photo_info_json))</span><br><span class="line">        fout.close()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"\nAll Done"</span>)</span><br></pre></td></tr></table></figure><p>这里重点需要关注的是：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">config = &#123;</span><br><span class="line">        <span class="meta"># github 存储图片的仓库（本地仓库基准目录）</span></span><br><span class="line">        'github_img_host_base': '/Users/smaug/blogimg_2',</span><br><span class="line">        <span class="meta"># 会对这个目录下的所有文件夹进行遍历，相同目录生成_samll 的 缩略图</span></span><br><span class="line">        'img_path':             '/Users/smaug/blogimg_2/rebootcat/photowall',</span><br><span class="line">        <span class="meta"># cdn 前缀</span></span><br><span class="line">        'cdn_url_prefix':       'https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2',</span><br><span class="line">        <span class="meta"># hexo 博客存放 photos 信息的 json 文件</span></span><br><span class="line">        'photo_info_json':      '/Users/smaug/blog_rebootcat/source/photos/photoslist.json',</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>简单解释一下这个脚本：</p><ul><li>github_img_host_base： 这个目录也就是本地的仓库目录，绝对路径（上面克隆的仓库对应的本地文件夹路径）</li><li>img_path: 我单独新建了 rebootcat/photowall 目录存放瀑布流图片，对应本地的路径</li><li>cdn_url_prefix：jsdelivr cdn url 前缀，只需要更改成你自己的github 用户名以及仓库名</li><li>photo_info_json： photoslist.json 路径</li></ul><p>上面几个参数一定要配置对了。</p><p>那么简单解释一下脚本的功能：</p><p><strong>脚本会递归的查找 img_path 目录下的图片，然后进行一定的压缩（99%），这里的压缩目的并非真的是压缩，而是为了去除一些敏感信息，比如 GPS 信息。注意这里会覆盖掉原始图片。然后会生成图片的缩略图，同时根据上面的几个配置参数，生成两个 cdn url，一个对应的是原始图片的 cdn url，一个是缩略图的 cdn url</strong>.</p><p>然后执行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> phototool.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>脚本执行完，就会<strong>增量生成</strong> photoslist.json，可以先打开检查下对不对，或者把里面的 cdn url 复制出来从浏览器看能不能访问。</p><blockquote><p><strong>注意需要把本地图片仓库推送到远程</strong>。</p></blockquote><p>这个 phototool.py 脚本你可以随便放在哪里，当你更新图片之后重新执行一遍就可以了。当然你也可以像我一样，跟网站源码直接放一起，所以你可以看到，我直接放到了 js 目录。</p><h2 id="更新图片"><a href="#更新图片" class="headerlink" title="更新图片"></a>更新图片</h2><p>把新图片放到本地仓库，然后执行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> phototool.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>检查一下 photoslist.json 文件对不对，然后发布博客：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo d -g</span></span><br></pre></td></tr></table></figure><p>发布之后，记得把本地图片仓库推送到远端，不然 jsdelivr 无法访问到。</p><p>至此，一个相册瀑布流就制作完成了！</p><h1 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h1><p>由于我是采用回忆的方式来写的博文，所以文中可能会有一些小的修改或者配置我忽略了，不过问题不大，大家如果碰到问题了可以自行研究一下，能解决的。</p><p>采用 github 作为图床来存放大量的瀑布流图片墙，方案是没问题的，只不过可能由于仓库容量的限制，需要在 github 上构建多个图片仓库。</p><p>对于我来说，github 图片仓库主要用来存放博文中涉及到的图片。至于图片墙，我再另想办法吧。</p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#105;&#110;&#117;&#x78;&#x63;&#111;&#100;&#x65;&#x32;&#110;&#105;&#x6b;&#x69;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;">&#x6c;&#105;&#110;&#117;&#x78;&#x63;&#111;&#100;&#x65;&#x32;&#110;&#105;&#x6b;&#x69;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;</a></p></li></ul><p>2020-09-19 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一直没有时间来整理下博客搭建的一些事情，现在补上一篇，给 Hexo Next 博客添加一个相册功能，使用瀑布流的方式。&lt;/p&gt;
&lt;h1 id=&quot;原理说明&quot;&gt;&lt;a href=&quot;#原理说明&quot; class=&quot;headerlink&quot; title=&quot;原理说明&quot;&gt;&lt;/a&gt;原理说明&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用 github 作为仓库存储图片文件（图床）&lt;/li&gt;
&lt;li&gt;使用 jsdelivr 进行图片 CDN 加速&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;p&gt;此种方式的优点是免费，不需要购买其他的对象存储产品；并且使用的是 github 作为图床，图片不会丢失。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;早期的博文使用的是七牛云的免费存储，结果后来被他们删掉了。。。结果造成文中的一些图片链接都是 404，有兴趣的可以翻一翻我早期的博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h2&gt;&lt;p&gt;由于采用的是 github 仓库存储图片，但是 github 对单仓库有 50MB 的大小限制，所以单仓库可能不能够存储太多的文件；&lt;/p&gt;
&lt;p&gt;解决方法就是建立很多的图片仓库（稍微有点费劲，不过是行得通的）；另外上传的单张图片大小最好不要太大。&lt;/p&gt;
&lt;p&gt;还有个缺点就是得折腾啊，且看我后文。&lt;/p&gt;
&lt;p&gt;各位可以参考下我的相册瀑布流: &lt;a href=&quot;https://rebootcat.com/photos/&quot;&gt;摄影&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;开始搭建相册瀑布流&quot;&gt;&lt;a href=&quot;#开始搭建相册瀑布流&quot; class=&quot;headerlink&quot; title=&quot;开始搭建相册瀑布流&quot;&gt;&lt;/a&gt;开始搭建相册瀑布流&lt;/h1&gt;&lt;p&gt;开始之前，需要简单介绍一下，我参考的是 &lt;a href=&quot;https://blog.dlzhang.com/posts/31/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo NexT 博客增加瀑布流相册页面&lt;/a&gt; 这篇文章，文中涉及到的脚本主要都是 js 实现；与他不同的是，由于我对 js 的掌握远远不及我对 Python 的掌握，故部分脚本我采用了 Python 实现。&lt;/p&gt;
&lt;p&gt;所以在开始操作之前，你可以根据自己的技能，选择不同的方式。如果你擅长 python，那么跟着我来吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/nextphotowall/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://rebootcat.com/categories/blog/"/>
    
    
      <category term="python" scheme="https://rebootcat.com/tags/python/"/>
    
      <category term="hexo" scheme="https://rebootcat.com/tags/hexo/"/>
    
      <category term="blog" scheme="https://rebootcat.com/tags/blog/"/>
    
      <category term="github" scheme="https://rebootcat.com/tags/github/"/>
    
      <category term="next" scheme="https://rebootcat.com/tags/next/"/>
    
      <category term="cdn" scheme="https://rebootcat.com/tags/cdn/"/>
    
      <category term="jsdelivr" scheme="https://rebootcat.com/tags/jsdelivr/"/>
    
  </entry>
  
  <entry>
    <title>对区块链行业现状的一点看法</title>
    <link href="https://rebootcat.com/2020/09/16/think_about_blockchain/"/>
    <id>https://rebootcat.com/2020/09/16/think_about_blockchain/</id>
    <published>2020-09-16T12:23:58.000Z</published>
    <updated>2020-09-16T12:16:26.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对行业现状的一点看法"><a href="#对行业现状的一点看法" class="headerlink" title="对行业现状的一点看法"></a>对行业现状的一点看法</h1><p>2020 年，新冠肆虐。</p><p>最近对于区块链的想法有点消极。简单谈一下。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/think_about_blockchain/1.png" alt=""></p><p>纵观整个区块链行业，公链项目死了很多，还活着的也在拖着，除了少数明星公链。也许未来的几年之内，这种状况还会持续下去，对于公链项目来说，要么死，要么拖下去再死，要么成为明星。无论哪一条路，都异常难！</p><p>区块链目前能解决的问题范围依然还是比较局限，一方面受限于技术层面，一方面受限于政治层面。技术方面的难点，在于架构，在于算法设计，在于安全，在于通信。</p><p>架构上目前行业普遍追求可扩展的架构，这样的目的在于提高 TPS，为未来可能存在的真实大量业务提供服务，当然必然为此牺牲去中心化属性，牺牲安全属性，抉择就在于追求什么目标？从比特币到以太坊，再到 EOS，再到各种分片的公链，可以理解为逐步为了高 TPS 改良，因为比特币的交易速度实在是太慢了，为此我们势必要有一条满足我们交易需求的公链，至于这个交易频率需要多快，也许可以对标中心化得出答案。</p><p>比如 visa 的 TPS 在 1000 ~ 2000，银联在 2000 左右， paypal 600 ~ 1000等等。这里就不得不提出一个疑问，对于公链来说，追求高 TPS 是不是一个伪需求？</p><p>算法层面，为了保证零信任网络内部达成一致共识，会涉及到大量的收发包以及加解密过程，然而至今没有一条公链的共识算法能称得上权威或者标杆，整个行业仍然处于研究阶段，不同的公链之间互相参考学习，然后进行创新以及试验。</p><p>这个过程可能很漫长，需要大量的人才投入贡献。这也就意味着现阶段的公链，至少在共识算法层面，不能达到一个质的飞越。也许在未来，还得依靠其他的手段做改良。</p><a id="more"></a><p>安全层面，相较于中心化的系统，基本可以理解为系统是直接暴露在外网上，但是目前来说，中心化的系统里也越来越多出现云系统，一定程度也直接暴露在外网上。除了这点，更为严重的是，公链代码是需要开源的，也就意味着可以随意修改代码进入网络，这对安全提出了很大的要求。另外，公链上直接跑的就是金钱，也就会成为各路黑客的重点攻击对象。从比特币、以太坊，到不知名的公链，均发生过不下一起的安全攻击事件，有的直接分叉，有的直接倒闭，有的币价腰斩，有的让用户、交易所损失惨重。</p><p>通信上，通信层面受限于真实的、不确定的、波动的网络环境，并且由于算法的设计，会带来大量的广播，一条消息进入网络就会变成 n 倍的消息量。也许随着 5G 技术的发展，在通信层面能够彻底解决这些问题，但目前来说，5G 的大规模落地还有很大的不确定性。</p><p>政治层面的局限就太多了，毕竟去中心化金融系统挑战的是集权的中央政府，比特币发展 10 年，好像依然只有少数国家是承认比特币的合法性的，比特币期间还被多次宣布死亡。</p><p>对于区块链来说，真可谓路漫漫其修远兮，未来依然充满了巨大的挑战以及极大的不确定性，不过我们依然也可以说变数中才存在乘风破浪的机会，就看从哪个角度看了。</p><p>另外，区块链的技术圈和炒币圈似乎是割裂开来的，我本身是比较反对这种方式的，炒币的热度远远超过技术本身的热度，毕竟人都是逐利的，由此，一方面会给区块链的技术发展带来一些积极正面的影响和热度，让更多的人认识到区块链，加入到这个区块链的发展中来；但另外一方面，炒币的人似乎也压根不关心技术的东西，他们需要的只是几倍几倍的涨幅，也许项目方随便吹吹牛皮，拉几位 “大佬” 站台，他们就能往里投钱，而压根不关心项目的技术，由此造成了各式各样的骗局，反过来让真的想了解区块链技术，对区块链技术感兴趣的人对此失去兴趣，形成恶性循环。而现在，整个币圈基本是这样！</p><p>这不得不让人反思，区块链到底解决了什么？是否只是沦为资本的工具？还是一直在鼓吹伪命题伪需求？</p><p>前几年，听到最多个一个词就是 “信仰”，对区块链的信仰，对比特币的信仰。但是对于一个技术来说，信仰这个词是不是稍微有点沉重和多余？ 2000年 的互联网技术，可惜无缘参与，不知道当时是否有很多人张口闭口一个 “信仰”，虽然无从得知，但我可以大胆猜测一下，应该是没有这样的现象的。</p><p>很多人把区块链技术和互联网技术做类比，比较两者的发展过程，由此得出一些结论，比如目前区块链行业的状态就是 2000 年的互联网，充满了寒冬、泡沫，但是再看看今天的互联网怎么样呢？由此说明区块链会成为下一个互联网。</p><p>我不否认一定程度上是对的，我们无法预估未来的发展，但是至少我们要对未来充满期待，对未来充满信念，而非 “信仰”。也许这个词多半是币圈流传，用来忽悠新人接盘的。但是把区块链和币圈割裂开来的方式似乎也是不妥，如果没有炒币这波人，也许区块链没有这么高的热度，但是就是这波炒币的人，让区块链行业乌烟瘴气，骗局和圈钱时有发生。所以，”信仰”这个词，真的没必要用在区块链上。区块链也许会改变世界，也许不会，它就是一个技术。</p><p>再回到当前，区块链行业追求的新名词也早已从公链、TPS、分片变成了 filecoin/ipfs、defi,真是瞬息万变。但是最近，也陆陆续续听说很多 defi 维权的新闻，至于 ipfs，沉寂了五六年时间，今年加上激励层filecoin 瞬间成为整个币圈的人都在谈论的明星项目，但是为什么这么火热呢？因为大家都在说这是第二个比特币，错过了比特币的挖矿，不要错过 ipfs 的挖矿。然后各种矿机卖的火热，参与的矿工也越来越多，官方还搞了竞赛，进一步助推了这波热度。</p><p>另外，观察一个现象，ipfs 是国外的项目，但在中国异常火热，这背后是否有一些幕后操手呢？再说 filecoin 主网，竞赛过程中 bug 不断，很明显内部没有经过比较系统的测试就赶鸭子上架的方式宣布即将主网上线，并开启挖矿竞赛。。。被资本裹挟的迹象很重，当然对于项目方来首，错过了这个热度，也许就永远没有机会了。于是不得不被资本裹挟。</p><p>这纯属我个人的阴谋论，不要在意。我想表达的是，区块链越来越沦为资本的工具，区块链从业者如何探索出一条正道迫在眉睫！</p><p>说了很多题外话，简单总结一下就是：</p><ol><li><strong>公链的困境，要么死，要么拖着，再死，要么成为明星，每一条道路都极其艰难</strong>；</li><li><strong>区块链技术还有很多挑战，需要大量的牛逼的人才进入，攻克这些难题</strong>；</li><li><strong>区块链的很多需求和追求也许是毫无意义的</strong>；</li><li><strong>区块链和币圈千丝万缕的联系，让这个行业高光的同时也为这个行业带来了极其严重的负面影响</strong>；</li><li><strong>区块链越来越沦为资本的工具，从业者探索出一条光明正道迫在眉睫</strong>；</li></ol><h1 id="前路何方？"><a href="#前路何方？" class="headerlink" title="前路何方？"></a>前路何方？</h1><p>路漫漫其修远兮，区块链也许能改变世界，也许不能！</p><h1 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h1><ul><li><a href="http://rebootcat.com">rebootcat.com</a></li><li>email: <a href="mailto:&#x6c;&#x69;&#110;&#117;&#120;&#99;&#x6f;&#100;&#101;&#50;&#x6e;&#x69;&#107;&#105;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;">&#x6c;&#x69;&#110;&#117;&#120;&#99;&#x6f;&#100;&#101;&#50;&#x6e;&#x69;&#107;&#105;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;</a></li></ul><p>2020-09-16 于杭州</p><p><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对行业现状的一点看法&quot;&gt;&lt;a href=&quot;#对行业现状的一点看法&quot; class=&quot;headerlink&quot; title=&quot;对行业现状的一点看法&quot;&gt;&lt;/a&gt;对行业现状的一点看法&lt;/h1&gt;&lt;p&gt;2020 年，新冠肆虐。&lt;/p&gt;
&lt;p&gt;最近对于区块链的想法有点消极。简单谈一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/think_about_blockchain/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;纵观整个区块链行业，公链项目死了很多，还活着的也在拖着，除了少数明星公链。也许未来的几年之内，这种状况还会持续下去，对于公链项目来说，要么死，要么拖下去再死，要么成为明星。无论哪一条路，都异常难！&lt;/p&gt;
&lt;p&gt;区块链目前能解决的问题范围依然还是比较局限，一方面受限于技术层面，一方面受限于政治层面。技术方面的难点，在于架构，在于算法设计，在于安全，在于通信。&lt;/p&gt;
&lt;p&gt;架构上目前行业普遍追求可扩展的架构，这样的目的在于提高 TPS，为未来可能存在的真实大量业务提供服务，当然必然为此牺牲去中心化属性，牺牲安全属性，抉择就在于追求什么目标？从比特币到以太坊，再到 EOS，再到各种分片的公链，可以理解为逐步为了高 TPS 改良，因为比特币的交易速度实在是太慢了，为此我们势必要有一条满足我们交易需求的公链，至于这个交易频率需要多快，也许可以对标中心化得出答案。&lt;/p&gt;
&lt;p&gt;比如 visa 的 TPS 在 1000 ~ 2000，银联在 2000 左右， paypal 600 ~ 1000等等。这里就不得不提出一个疑问，对于公链来说，追求高 TPS 是不是一个伪需求？&lt;/p&gt;
&lt;p&gt;算法层面，为了保证零信任网络内部达成一致共识，会涉及到大量的收发包以及加解密过程，然而至今没有一条公链的共识算法能称得上权威或者标杆，整个行业仍然处于研究阶段，不同的公链之间互相参考学习，然后进行创新以及试验。&lt;/p&gt;
&lt;p&gt;这个过程可能很漫长，需要大量的人才投入贡献。这也就意味着现阶段的公链，至少在共识算法层面，不能达到一个质的飞越。也许在未来，还得依靠其他的手段做改良。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://rebootcat.com/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="https://rebootcat.com/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>cmake教程|cmake入门实战</title>
    <link href="https://rebootcat.com/2020/09/02/cmake/"/>
    <id>https://rebootcat.com/2020/09/02/cmake/</id>
    <published>2020-09-02T03:23:58.000Z</published>
    <updated>2020-09-03T22:10:54.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我是一个 linux c++ 开发者，但是一直对 Makefile 的语法很是头痛，每次都记不住，所以每次写 Makefile 都很痛苦，Makefile 里需要你自己编写依赖和推导规则，这个过程能不能简单点呢？</p><p>对于编译一个 C++ 工程来说，也许需要的就是头文件路径、库路径、编译参数，剩下的东西基本也不重要，这三样足够去编译一个工程了。所以有没有一个工具能简单点的去实现 C++ 项目的构建呢？</p><p>答案是有的，上一篇博文 <a href="http://rebootcat.com/2020/08/30/scons/">scons构建C++项目</a> 介绍了 使用 scons 来构建 C++ 项目，大大提高了编写构建脚本的效率，使用起来也极为方便，对于熟悉 python 的童鞋来说真的是大大的福音；但 scons 的问题就是在大型项目的时候构建起来可能会很慢（听说的）。那么有没有其他的工具呢？</p><p>当然有，cmake 就是这样的一个工具，既能满足跨平台的编译，并且屏蔽了 Makefile 蛋疼的语法，使用一种更加简单的语法编写构建脚本，用在大型项目也毫无压力。</p><p>当然，对于我个人来说，cmake 的使用还是有门槛的，刚接触 cmake 可能还是会被它的语法搞的头疼（cmake 的语法也还是挺折腾的）。但是别急，沉下心来，本篇博文就带你从 cmake 入门到编写一个复杂工程的实战。</p><h1 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h1><h2 id="什么是-cmake"><a href="#什么是-cmake" class="headerlink" title="什么是 cmake"></a>什么是 cmake</h2><p>这里直接引用官网的解释：</p><blockquote><p>CMake is an open-source, cross-platform family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice. The suite of CMake tools were created by Kitware in response to the need for a powerful, cross-platform build environment for open-source projects such as ITK and VTK.</p></blockquote><p>CMake 是一个开源的跨平台的构建工具，语法简单，编译独立，并且很多知名大型项目也在用 CMake,比如 KDE、Netflix 、ReactOS等。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/cmake/1.png" alt=""></p><a id="more"></a><p>OK，话不多说，如何使用呢？</p><h2 id="安装-cmake"><a href="#安装-cmake" class="headerlink" title="安装 cmake"></a>安装 cmake</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span>  cmake3.x86_64</span><br></pre></td></tr></table></figure><p>现在最新版的 cmake 已经到 3.18.2 了。我使用的是 3.17.2 版本。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cmake <span class="comment">--version</span></span><br><span class="line">cmake <span class="built_in">version</span> <span class="number">3.17</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line">CMake suite maintained <span class="keyword">and</span> supported <span class="keyword">by</span> Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure><h2 id="初识-cmake"><a href="#初识-cmake" class="headerlink" title="初识 cmake"></a>初识 cmake</h2><p>注：<strong>本文以一个多源文件，多目录结构的项目 <a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">mux</a> 为例，介绍 cmake 的使用，相关源文件以及cmake 脚本可以直接查看源项目</strong>。</p><p>使用 cmake 来构建 C++ 项目，需要先编写 cmake 构建脚本，文件名为  CMakeLists.txt，项目顶层目录需要放一个 CMakeLists.txt，同时子目录可以根据需要放置 CMakeLists.txt。</p><p>那么先来看看 CMakeLists.txt 长啥样?</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.8</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_EXTENSIONS <span class="keyword">OFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_STANDARD <span class="number">99</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_EXTENSIONS <span class="keyword">OFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(MUX CXX C)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_definitions</span>(</span><br><span class="line">    -DTEST1   <span class="comment"># define marco</span></span><br><span class="line">    -DTEST2   <span class="comment"># define marco</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># common compiling options</span></span><br><span class="line"><span class="keyword">add_compile_options</span>(</span><br><span class="line">    -Wl,--no-as-needed</span><br><span class="line">    -fno-strict-aliasing</span><br><span class="line">    -fthreadsafe-statics</span><br><span class="line">    -pthread</span><br><span class="line">    <span class="comment">#-fstack-protector-strong</span></span><br><span class="line">    -fno-short-enums</span><br><span class="line">    -fPIC</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span>(XENABLE_TEST3  <span class="string">"enable test3 marco"</span> <span class="keyword">OFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;MUX_BINARY_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;MUX_BINARY_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (XENABLE_TEST3)</span><br><span class="line">    <span class="keyword">add_definitions</span>(-DTEST3)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">NOT</span> CMAKE_BUILD_TYPE)</span><br><span class="line">    <span class="keyword">set</span>(CMAKE_BUILD_TYPE Debug)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"CMAKE_BUILD_TYPE:"</span> <span class="variable">$&#123;CMAKE_BUILD_TYPE&#125;</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"CMAKE_SYSTEM_NAME:"</span> <span class="variable">$&#123;CMAKE_SYSTEM_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"XENABLE_TEST3:"</span> <span class="variable">$&#123;XENABLE_TEST3&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Threads REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># include header dirs</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>)   <span class="comment"># project dir</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/third-party/<span class="keyword">include</span>)   <span class="comment"># project dir</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>)  <span class="comment"># current CMakeLists.txt dir (including sub dir)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># link lib dirs</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/third-party/lib)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;LIBRARY_OUTPUT_PATH&#125;</span>)  <span class="comment"># generate in building</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(demo/bench)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(demo/echo)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(epoll)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(mbase)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(message_handle)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(transport)</span><br></pre></td></tr></table></figure><p>完整的 CMakeLists.txt 见 <a href="https://github.com/smaugx/mux/blob/master/CMakeLists.txt" target="_blank" rel="noopener">我的github</a>，同时我也会以我的github项目 <a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">mux</a> 为例，介绍 cmake 的使用。</p><p>上面的 CMakeLists.txt 乍一看，好多内容，但是别慌，我们来一个个说。</p><h2 id="详解-cmake"><a href="#详解-cmake" class="headerlink" title="详解 cmake"></a>详解 cmake</h2><p>注意：<strong>cmake 的语法可以分为命令(函数）和参数。 命令不缺分大小写，参数区分大小写</strong>。</p><p>注意：<strong>cmake 的语法可以分为命令(函数）和参数。 命令不缺分大小写，参数区分大小写</strong>。</p><h3 id="设置-cmake-版本的要求"><a href="#设置-cmake-版本的要求" class="headerlink" title="设置 cmake 版本的要求"></a>设置 cmake 版本的要求</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">cmake_minimum_required</span><span class="params">(VERSION <span class="number">3.8</span>.<span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure><h3 id="在-cmake-中设置-c-标准，启用-c-11-或以上-根据项目的需求来）"><a href="#在-cmake-中设置-c-标准，启用-c-11-或以上-根据项目的需求来）" class="headerlink" title="在 cmake 中设置 c++ 标准，启用 c++11 或以上(根据项目的需求来）"></a>在 cmake 中设置 c++ 标准，启用 c++11 或以上(根据项目的需求来）</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_CXX_STANDARD <span class="number">11</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_CXX_STANDARD_REQUIRED ON)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_CXX_EXTENSIONS OFF)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_C_STANDARD <span class="number">99</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_C_STANDARD_REQUIRED ON)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_C_EXTENSIONS OFF)</span></span></span><br></pre></td></tr></table></figure><h3 id="设置项目名以及项目语言"><a href="#设置项目名以及项目语言" class="headerlink" title="设置项目名以及项目语言"></a>设置项目名以及项目语言</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">project</span><span class="params">(MUX CXX C)</span></span></span><br></pre></td></tr></table></figure><p>设置完项目名称之后，会自动创建两个变量 <code>&lt;PROJECT-NAME&gt;_SOURCE_DIR</code> 和 <code>&lt;PROJECT-NAME&gt;_BINARY_DIR</code>，对于 <a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">mux</a> 这个项目来说，也就是 <code>MUX_SOURCE_DIR</code> 和 <code>MUX_BINARY_DIR</code>。</p><p><code>MUX_SOURCE_DIR</code> 表示工程顶层目录； <code>MUX_BINARY_DIR</code> 表示 cmake 构建发生的目录。</p><p>因为你一定熟悉或者用过下面的命令或步骤：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mkdir</span> <span class="string">cbuild</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">cbuild</span></span><br><span class="line"><span class="attr">cmake</span> <span class="string">..</span></span><br><span class="line"><span class="attr">make</span></span><br><span class="line"><span class="attr">make</span> <span class="string">test</span></span><br><span class="line"><span class="attr">make</span> <span class="string">install</span></span><br></pre></td></tr></table></figure><p>通常我们会单独新建一个  cbuild 目录，用来构建项目，并且存放过程中产生的文件。那么 cbuild 目录就是 <code>MUX_BINARY_DIR</code> 表示的目录，cbuild 的上一级目录也就是项目顶层目录就是 <code>MUX_SOURCE_DIR</code> 表示的目录。</p><blockquote><p>如果你没有单独新建 <code>cbuild</code> 目录，而是直接在项目顶层目录使用 <code>cmake .</code> ，那么上面两个变量均指项目顶层目录。</p></blockquote><p>详见 <a href="https://cmake.org/cmake/help/latest/command/project.html" target="_blank" rel="noopener">https://cmake.org/cmake/help/latest/command/project.html</a></p><h3 id="添加编译宏"><a href="#添加编译宏" class="headerlink" title="添加编译宏"></a>添加编译宏</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_definitions(</span><br><span class="line">    -DTEST1   <span class="meta"># <span class="meta-keyword">define</span> marco</span></span><br><span class="line">    -DTEST2   <span class="meta"># <span class="meta-keyword">define</span> marco</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上面是我随便写的两个宏 <code>TEST1</code> 和 <code>TEST2</code>，那么在c++代码中通常是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TEST1</span></span><br><span class="line">    <span class="comment">// do something about test1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TEST2</span></span><br><span class="line">   <span class="comment">// do something about test2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>当然要开启这个宏也可以不用写在 CMakeLists.txt 文件中，可以直接这样使用：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> cbuild &amp;&amp; <span class="built_in">cd</span> cbuild </span><br><span class="line">cmake .. -DTEST1</span><br></pre></td></tr></table></figure><p>这个根据你的项目需求来操作。</p><h3 id="定义一些用户自定义的可选项"><a href="#定义一些用户自定义的可选项" class="headerlink" title="定义一些用户自定义的可选项"></a>定义一些用户自定义的可选项</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">option(<span class="name">XENABLE_TEST3</span>  <span class="string">"enable test3 marco"</span> OFF)</span><br><span class="line"></span><br><span class="line">if (<span class="name">XENABLE_TEST3</span>)</span><br><span class="line">    add_definitions(<span class="name">-DTEST3</span>)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">if (<span class="name">NOT</span> CMAKE_BUILD_TYPE)</span><br><span class="line">    set(<span class="name">CMAKE_BUILD_TYPE</span> Debug)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure><p>使用 option 命令可以自定义一些变量的值，作为一些条件判断的开关很方便。</p><p>详见 <a href="https://cmake.org/cmake/help/latest/command/option.html" target="_blank" rel="noopener">https://cmake.org/cmake/help/latest/command/option.html</a></p><h3 id="添加编译选项"><a href="#添加编译选项" class="headerlink" title="添加编译选项"></a>添加编译选项</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># common compiling options</span><br><span class="line">add_compile_options(</span><br><span class="line">    -<span class="ruby">Wl,--no-as-needed</span></span><br><span class="line"><span class="ruby">    -fno-strict-aliasing</span></span><br><span class="line"><span class="ruby">    -fthreadsafe-statics</span></span><br><span class="line"><span class="ruby">    -pthread</span></span><br><span class="line"><span class="ruby">    <span class="comment">#-fstack-protector-strong</span></span></span><br><span class="line"><span class="ruby">    -fno-short-enums</span></span><br><span class="line"><span class="ruby">    -fPIC</span></span><br><span class="line"><span class="ruby">)</span></span><br></pre></td></tr></table></figure><p>这里就是一些编译选项，根据自己的项目需求修改。</p><h3 id="设置编译二进制-binary-executable-和-binary-lib）存放路径"><a href="#设置编译二进制-binary-executable-和-binary-lib）存放路径" class="headerlink" title="设置编译二进制(binary-executable 和 binary-lib）存放路径"></a>设置编译二进制(binary-executable 和 binary-lib）存放路径</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;MUX_BINARY_DIR&#125;/bin)</span><br><span class="line">set(LIBRARY_OUTPUT_PATH $&#123;MUX_BINARY_DIR&#125;/<span class="class"><span class="keyword">lib</span>)</span></span><br></pre></td></tr></table></figure><p>可以看到上面用到了 <code>MUX_BINARY_DIR</code> 这个变量，也就是说最终编译出来的二进制程序和lib 库会存放在 <code>cbuild/bin</code> 和 <code>cbuild/lib</code> 中。</p><h3 id="打印一些信息到终端"><a href="#打印一些信息到终端" class="headerlink" title="打印一些信息到终端"></a>打印一些信息到终端</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">message</span><span class="params">(STATUS <span class="string">"CMAKE_BUILD_TYPE:"</span> $&#123;CMAKE_BUILD_TYPE&#125;)</span></span></span><br><span class="line"><span class="function"><span class="title">message</span><span class="params">(STATUS <span class="string">"CMAKE_SYSTEM_NAME:"</span> $&#123;CMAKE_SYSTEM_NAME&#125;)</span></span></span><br><span class="line"><span class="function"><span class="title">message</span><span class="params">(STATUS <span class="string">"XENABLE_TEST3:"</span> $&#123;XENABLE_TEST3&#125;)</span></span></span><br></pre></td></tr></table></figure><p>打印一些调试信息，或者编译信息到终端，使用的是 message 命令。</p><p>详见 <a href="https://cmake.org/cmake/help/latest/command/message.html" target="_blank" rel="noopener">https://cmake.org/cmake/help/latest/command/message.html</a>。</p><h3 id="设置头文件路径"><a href="#设置头文件路径" class="headerlink" title="设置头文件路径"></a>设置头文件路径</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">include</span> header dirs</span><br><span class="line"><span class="keyword">include</span><span class="constructor">_directories($&#123;CMAKE_SOURCE_DIR&#125;)</span>   # project dir</span><br><span class="line"><span class="keyword">include</span><span class="constructor">_directories($&#123;CMAKE_SOURCE_DIR&#125;<span class="operator">/</span><span class="params">third</span>-<span class="params">party</span><span class="operator">/</span><span class="params">include</span>)</span>   # project dir</span><br><span class="line"><span class="keyword">include</span><span class="constructor">_directories($&#123;CMAKE_CURRENT_BINARY_DIR&#125;)</span>  # current <span class="module-access"><span class="module"><span class="identifier">CMakeLists</span>.</span></span>txt dir (including sub dir)</span><br></pre></td></tr></table></figure><p>分别解释一下：</p><p><code>CMAKE_SOURCE_DIR</code> 表示工程顶层目录，也就是 <code>MUX_SOURCE_DIR</code>；</p><p><code>CMAKE_CURRENT_BINARY_DIR</code> 表示当前处理的 CMakeLists.txt 所在的目录，对于子目录中的 CMakeLists.txt 来说，即表示这个子目录。</p><p>通常这两个是常用的，必须的。然后使用 <code>include_directories</code> 命令包含其他的一些头文件路径。</p><h3 id="设置依赖库的路径"><a href="#设置依赖库的路径" class="headerlink" title="设置依赖库的路径"></a>设置依赖库的路径</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># link lib dirs</span></span><br><span class="line">link_directories($&#123;CMAKE_SOURCE_DIR&#125;/third-party/<span class="class"><span class="keyword">lib</span>)</span></span><br><span class="line">link_directories($&#123;LIBRARY_OUTPUT_PATH&#125;)  <span class="comment"># generate in building</span></span><br></pre></td></tr></table></figure><p><code>LIBRARY_OUTPUT_PATH</code> 就是上面设置的编译目标二进制库的存放路径，因为实际项目中，子模块之间可能会有一些依赖，子模块单独编译成一个库，然后让其他模块链接。这个目录也就是 <code>cbuild/lib</code> 目录。</p><h3 id="引入子模块-子目录）"><a href="#引入子模块-子目录）" class="headerlink" title="引入子模块(子目录）"></a>引入子模块(子目录）</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">add_subdirectory</span><span class="params">(demo/bench)</span></span></span><br><span class="line"><span class="function"><span class="title">add_subdirectory</span><span class="params">(demo/echo)</span></span></span><br><span class="line"><span class="function"><span class="title">add_subdirectory</span><span class="params">(epoll)</span></span></span><br><span class="line"><span class="function"><span class="title">add_subdirectory</span><span class="params">(mbase)</span></span></span><br><span class="line"><span class="function"><span class="title">add_subdirectory</span><span class="params">(message_handle)</span></span></span><br><span class="line"><span class="function"><span class="title">add_subdirectory</span><span class="params">(transport)</span></span></span><br></pre></td></tr></table></figure><p>使用 <code>add_subdirectory</code> 命令把子模块包含进来，必须确保每个子目录下面有一个 CMakeLists.txt 文件，不然会报错。</p><p><strong>以上就是工程顶层目录的 CMakeLists.txt 的内容，分析下来是不是很清楚呢</strong>？</p><p>那么工程顶层目录的 CMakeLists.txt 其实做的事情就是设置一些基本的变量，宏开关，编译参数，头文件路径，依赖库路径，编译目标保存路径等等，子目录中的 CMakeLists.txt 才是真正产生编译目标的（exe和lib)。</p><h3 id="生成静态库-动态库"><a href="#生成静态库-动态库" class="headerlink" title="生成静态库/动态库"></a>生成静态库/动态库</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># keep all cpp files in varibale $&#123;epoll_src&#125;</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(./src epoll_src)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(epoll STATIC <span class="variable">$&#123;epoll_src&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_dependencies</span>(epoll mbase )</span><br><span class="line"><span class="keyword">target_link_libraries</span>(epoll mbase pthread)</span><br></pre></td></tr></table></figure><p>源文件在这：<a href="https://github.com/smaugx/mux/blob/master/epoll/CMakeLists.txt" target="_blank" rel="noopener">戳我</a></p><p>使用 <code>aux_source_directory</code> 添加源文件，相当于把 src 目录下的所有 c++ 文件保存到 <code>epoll_src</code> 这个变量中；</p><p>使用 <code>add_library</code> 生成目标库（根据需要可以生成静态库和动态库，分别使用 STATIC 和 SHARED)</p><p>然后就是添加这个模块需要依赖到的其他模块，以及链接参数。</p><p>上面的代码最终就会在 <code>cbuild/lib</code> 目录下生成一个 <code>libepoll.a</code> 文件。</p><h3 id="生成二进制可执行文件"><a href="#生成二进制可执行文件" class="headerlink" title="生成二进制可执行文件"></a>生成二进制可执行文件</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># build target echo_server</span><br><span class="line">add<span class="constructor">_executable(<span class="params">echo_server</span> <span class="params">echo_server</span>.<span class="params">cc</span>)</span></span><br><span class="line">add<span class="constructor">_dependencies(<span class="params">echo_server</span> <span class="params">transport</span> <span class="params">msghandler</span> <span class="params">mbase</span>)</span></span><br><span class="line">target<span class="constructor">_link_libraries(<span class="params">echo_server</span> <span class="params">transport</span> <span class="params">msghandler</span> <span class="params">mbase</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># build target echo_client</span><br><span class="line">add<span class="constructor">_executable(<span class="params">echo_client</span> <span class="params">client</span>.<span class="params">cc</span>)</span></span><br><span class="line">add<span class="constructor">_dependencies(<span class="params">echo_client</span> <span class="params">transport</span> <span class="params">msghandler</span> <span class="params">mbase</span>)</span></span><br><span class="line">target<span class="constructor">_link_libraries(<span class="params">echo_client</span> <span class="params">transport</span> <span class="params">msghandler</span> <span class="params">mbase</span>)</span></span><br></pre></td></tr></table></figure><p>源文件在这：<a href="https://github.com/smaugx/mux/blob/master/demo/echo/CMakeLists.txt" target="_blank" rel="noopener">戳我</a></p><p>和生成库大体是类似的，区别是使用的是 <code>add_executable</code> 这个命令。</p><p>其他子模块的 CMakeLists.txt 见<a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">我的github</a>.</p><h2 id="cmake-编译构建"><a href="#cmake-编译构建" class="headerlink" title="cmake 编译构建"></a>cmake 编译构建</h2><p>上面详细的介绍了 CMakeLists.txt 的写法，如果仿照本文，应该也能写出适合你项目的构建脚本，但是可能还不够，其他语法自行 google 学习。</p><p>上面其实是以我的项目 <a href=""></a> 进行的演示，有必要解读一下这个项目的结构层次：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ tree mux -d</span><br><span class="line">mux</span><br><span class="line">├── demo</span><br><span class="line">│   ├── bench</span><br><span class="line">│   └── echo</span><br><span class="line">├── epoll</span><br><span class="line">│   ├── <span class="keyword">include</span></span><br><span class="line">│   └── src</span><br><span class="line">├── mbase</span><br><span class="line">│   └── src</span><br><span class="line">├── message_handle</span><br><span class="line">│   ├── <span class="keyword">include</span></span><br><span class="line">│   └── src</span><br><span class="line">├── third-party</span><br><span class="line">│   ├── <span class="keyword">include</span></span><br><span class="line">│   │   ├── nlohmann</span><br><span class="line">│   │   └── spdlog</span><br><span class="line">│   │       ├── cfg</span><br><span class="line">│   │       ├── details</span><br><span class="line">│   │       ├── fmt</span><br><span class="line">│   │       │   └── bundled</span><br><span class="line">│   │       └── sinks</span><br><span class="line">│   └── <span class="class"><span class="keyword">lib</span></span></span><br><span class="line">└── transport</span><br><span class="line">    ├── <span class="keyword">include</span></span><br><span class="line">    └── src</span><br><span class="line"></span><br><span class="line"><span class="number">24</span> directories</span><br></pre></td></tr></table></figure><p>mux 是工程顶层目录，下面包含的 <code>epoll</code>、<code>mbase</code>、<code>message_handle</code>、<code>transport</code> 这几个目录，均各自打包成一个静态库； <code>demo</code> 目录下分别包含 <code>bench</code> 和 <code>echo</code> 两个目录，这两个目录下需要构建可执行程序。</p><p>所以首先是<code>epoll</code>、<code>mbase</code>、<code>message_handle</code>、<code>transport</code> 这几个目录生成静态库，也就是最终会在 <code>cbuild/lib</code> 目录生成 <code>libepoll.a</code>,    <code>libmbase.a</code>, <code>libmsghandler.a</code>, <code>libtransport.a</code>, 然后 <code>bench</code> 和 <code>echo</code> 下的代码依赖于前面的几个模块，生成可执行程序。</p><p>前面其实已经提到了，基本的构建命令如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mkdir</span> <span class="string">cbuild</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">cbuild</span></span><br><span class="line"><span class="attr">cmake</span> <span class="string">..</span></span><br><span class="line"><span class="attr">make</span> <span class="string">-j4</span></span><br></pre></td></tr></table></figure><p>其中注意，如果你没有单独构建 cbuild 目录的话，可能会生成一些中间临时文件污染了目录。并且注意，cmake 后面的 <code>..</code> 表示的是工程顶层的 CMakeLists.txt 的目录。所以如果直接使用的是工程顶层目录构建的话，就应该是 <code>cmake .</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">$ cmake ..</span><br><span class="line">-- The CXX compiler identification is GNU <span class="number">4.8</span><span class="number">.5</span></span><br><span class="line">-- The C compiler identification is GNU <span class="number">4.8</span><span class="number">.5</span></span><br><span class="line">-- Check <span class="keyword">for</span> working CXX <span class="string">compiler:</span> <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>c++</span><br><span class="line">-- Check <span class="keyword">for</span> working CXX <span class="string">compiler:</span> <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>c++ - works</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">-- Check <span class="keyword">for</span> working C <span class="string">compiler:</span> <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>gcc</span><br><span class="line">-- Check <span class="keyword">for</span> working C <span class="string">compiler:</span> <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>gcc - works</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- <span class="string">CMAKE_BUILD_TYPE:</span>Debug</span><br><span class="line">-- <span class="string">CMAKE_SYSTEM_NAME:</span>Linux</span><br><span class="line">-- <span class="string">XENABLE_TEST3:</span>OFF</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread.h</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread.h - found</span><br><span class="line">-- Performing Test CMAKE_HAVE_LIBC_PTHREAD</span><br><span class="line">-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread_create <span class="keyword">in</span> pthreads</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread_create <span class="keyword">in</span> pthreads - not found</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread_create <span class="keyword">in</span> pthread</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread_create <span class="keyword">in</span> pthread - found</span><br><span class="line">-- Found <span class="string">Threads:</span> TRUE</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written <span class="string">to:</span> <span class="regexp">/mnt/</span>centos-share<span class="regexp">/workspace/</span>mux/cbuild</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ make -j4</span><br><span class="line">Scanning dependencies of target mbase</span><br><span class="line">[  <span class="number">5</span>%] Building CXX object mbase<span class="regexp">/CMakeFiles/</span>mbase.dir<span class="regexp">/src/</span>packet.cc.o</span><br><span class="line">[ <span class="number">11</span>%] Linking CXX <span class="keyword">static</span> library ..<span class="regexp">/lib/</span>libmbase.a</span><br><span class="line">[ <span class="number">11</span>%] Built target mbase</span><br><span class="line">Scanning dependencies of target msghandler</span><br><span class="line">Scanning dependencies of target epoll</span><br><span class="line">[ <span class="number">17</span>%] Building CXX object message_handle<span class="regexp">/CMakeFiles/</span>msghandler.dir<span class="regexp">/src/</span>message_handler.cc.o</span><br><span class="line">[ <span class="number">23</span>%] Building CXX object epoll<span class="regexp">/CMakeFiles/</span>epoll.dir<span class="regexp">/src/</span>epoll_tcp_client.cc.o</span><br><span class="line">[ <span class="number">29</span>%] Building CXX object epoll<span class="regexp">/CMakeFiles/</span>epoll.dir<span class="regexp">/src/</span>epoll_tcp_server.cc.o</span><br><span class="line">[ <span class="number">35</span>%] Linking CXX <span class="keyword">static</span> library ..<span class="regexp">/lib/</span>libepoll.a</span><br><span class="line">[ <span class="number">41</span>%] Linking CXX <span class="keyword">static</span> library ..<span class="regexp">/lib/</span>libmsghandler.a</span><br><span class="line">[ <span class="number">41</span>%] Built target msghandler</span><br><span class="line">[ <span class="number">41</span>%] Built target epoll</span><br><span class="line">Scanning dependencies of target transport</span><br><span class="line">[ <span class="number">47</span>%] Building CXX object transport<span class="regexp">/CMakeFiles/</span>transport.dir<span class="regexp">/src/</span>tcp_transport.cc.o</span><br><span class="line">[ <span class="number">52</span>%] Linking CXX <span class="keyword">static</span> library ..<span class="regexp">/lib/</span>libtransport.a</span><br><span class="line">[ <span class="number">52</span>%] Built target transport</span><br><span class="line">Scanning dependencies of target echo_client</span><br><span class="line">Scanning dependencies of target echo_server</span><br><span class="line">Scanning dependencies of target bench_client</span><br><span class="line">Scanning dependencies of target bench_server</span><br><span class="line">[ <span class="number">58</span>%] Building CXX object demo<span class="regexp">/echo/</span>CMakeFiles<span class="regexp">/echo_client.dir/</span>client.cc.o</span><br><span class="line">[ <span class="number">64</span>%] Building CXX object demo<span class="regexp">/bench/</span>CMakeFiles<span class="regexp">/bench_client.dir/</span>client.cc.o</span><br><span class="line">[ <span class="number">70</span>%] Building CXX object demo<span class="regexp">/echo/</span>CMakeFiles<span class="regexp">/echo_server.dir/</span>echo_server.cc.o</span><br><span class="line">[ <span class="number">76</span>%] Building CXX object demo<span class="regexp">/bench/</span>CMakeFiles<span class="regexp">/bench_server.dir/</span>bench_server.cc.o</span><br><span class="line">[ <span class="number">82</span>%] Linking CXX executable ..<span class="regexp">/../</span>bin/echo_client</span><br><span class="line">[ <span class="number">88</span>%] Linking CXX executable ..<span class="regexp">/../</span>bin/echo_server</span><br><span class="line">[ <span class="number">94</span>%] Linking CXX executable ..<span class="regexp">/../</span>bin/bench_server</span><br><span class="line">[<span class="number">100</span>%] Linking CXX executable ..<span class="regexp">/../</span>bin/bench_client</span><br><span class="line">[<span class="number">100</span>%] Built target echo_client</span><br><span class="line">[<span class="number">100</span>%] Built target echo_server</span><br><span class="line">[<span class="number">100</span>%] Built target bench_client</span><br><span class="line">[<span class="number">100</span>%] Built target bench_server</span><br></pre></td></tr></table></figure><p>看看生成了啥：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ls cbuild/bin/</span><br><span class="line">bench_client  bench_server  echo_client  echo_server</span><br><span class="line"></span><br><span class="line">$ ls cbuild/<span class="class"><span class="keyword">lib</span>/</span></span><br><span class="line">libepoll.a  libmbase.a  libmsghandler.a  libtransport.a</span><br></pre></td></tr></table></figure><p>Over!</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>cmake 的构建其实认真熟悉之后，也还是能快速上手的，不要产生排斥心理，不然学起来就很慢很费劲。所以建议第一次接触 cmake 的或者以前一直抵触 cmake 的童鞋，静下心来，认认真真的看完本文或者其他的入门例子，那么你也能快速写一个多目录，多层次结构的 cmake 工程。</p><p>cmake 中其他的一些用法，建议随时查看官方的 <a href="https://cmake.org/cmake/help/latest/index.html" target="_blank" rel="noopener">cook book</a>.</p><p>加油，少年，别怕！</p><p>另外，文中涉及到的项目可以在<a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">我的github</a> 找到。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://aiden-dong.github.io/2019/07/20/CMake%E6%95%99%E7%A8%8B%E4%B9%8BCMake%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BA%94%E7%94%A8/" target="_blank" rel="noopener">CMake 教程 | CMake 从入门到应用</a></p><p><a href="https://juejin.im/post/6844903558861553672" target="_blank" rel="noopener">cmake使用教程</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#x69;&#x6e;&#117;&#120;&#99;&#111;&#100;&#x65;&#x32;&#x6e;&#x69;&#107;&#x69;&#x40;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#108;&#x69;&#x6e;&#117;&#120;&#99;&#111;&#100;&#x65;&#x32;&#x6e;&#x69;&#107;&#x69;&#x40;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p></li></ul><p>2020-09-02 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我是一个 linux c++ 开发者，但是一直对 Makefile 的语法很是头痛，每次都记不住，所以每次写 Makefile 都很痛苦，Makefile 里需要你自己编写依赖和推导规则，这个过程能不能简单点呢？&lt;/p&gt;
&lt;p&gt;对于编译一个 C++ 工程来说，也许需要的就是头文件路径、库路径、编译参数，剩下的东西基本也不重要，这三样足够去编译一个工程了。所以有没有一个工具能简单点的去实现 C++ 项目的构建呢？&lt;/p&gt;
&lt;p&gt;答案是有的，上一篇博文 &lt;a href=&quot;http://rebootcat.com/2020/08/30/scons/&quot;&gt;scons构建C++项目&lt;/a&gt; 介绍了 使用 scons 来构建 C++ 项目，大大提高了编写构建脚本的效率，使用起来也极为方便，对于熟悉 python 的童鞋来说真的是大大的福音；但 scons 的问题就是在大型项目的时候构建起来可能会很慢（听说的）。那么有没有其他的工具呢？&lt;/p&gt;
&lt;p&gt;当然有，cmake 就是这样的一个工具，既能满足跨平台的编译，并且屏蔽了 Makefile 蛋疼的语法，使用一种更加简单的语法编写构建脚本，用在大型项目也毫无压力。&lt;/p&gt;
&lt;p&gt;当然，对于我个人来说，cmake 的使用还是有门槛的，刚接触 cmake 可能还是会被它的语法搞的头疼（cmake 的语法也还是挺折腾的）。但是别急，沉下心来，本篇博文就带你从 cmake 入门到编写一个复杂工程的实战。&lt;/p&gt;
&lt;h1 id=&quot;CMake&quot;&gt;&lt;a href=&quot;#CMake&quot; class=&quot;headerlink&quot; title=&quot;CMake&quot;&gt;&lt;/a&gt;CMake&lt;/h1&gt;&lt;h2 id=&quot;什么是-cmake&quot;&gt;&lt;a href=&quot;#什么是-cmake&quot; class=&quot;headerlink&quot; title=&quot;什么是 cmake&quot;&gt;&lt;/a&gt;什么是 cmake&lt;/h2&gt;&lt;p&gt;这里直接引用官网的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CMake is an open-source, cross-platform family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice. The suite of CMake tools were created by Kitware in response to the need for a powerful, cross-platform build environment for open-source projects such as ITK and VTK.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CMake 是一个开源的跨平台的构建工具，语法简单，编译独立，并且很多知名大型项目也在用 CMake,比如 KDE、Netflix 、ReactOS等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/cmake/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="https://rebootcat.com/categories/c/"/>
    
    
      <category term="cmake" scheme="https://rebootcat.com/tags/cmake/"/>
    
      <category term="CMakeLists.txt" scheme="https://rebootcat.com/tags/CMakeLists-txt/"/>
    
      <category term="scons" scheme="https://rebootcat.com/tags/scons/"/>
    
      <category term="c++" scheme="https://rebootcat.com/tags/c/"/>
    
      <category term="c" scheme="https://rebootcat.com/tags/c/"/>
    
      <category term="linux" scheme="https://rebootcat.com/tags/linux/"/>
    
      <category term="makefile" scheme="https://rebootcat.com/tags/makefile/"/>
    
      <category term="compile" scheme="https://rebootcat.com/tags/compile/"/>
    
      <category term="build" scheme="https://rebootcat.com/tags/build/"/>
    
  </entry>
  
  <entry>
    <title>Scons构建C++项目</title>
    <link href="https://rebootcat.com/2020/08/30/scons/"/>
    <id>https://rebootcat.com/2020/08/30/scons/</id>
    <published>2020-08-30T03:23:58.000Z</published>
    <updated>2020-09-03T22:24:38.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我是一个 linux c++ 开发者，但是一直对 Makefile 的语法很是头痛，每次都记不住，所以每次写 Makefile 都很痛苦，Makefile 里需要你自己编写依赖和推导规则，这个过程能不能简单点呢？</p><p>对于编译一个 C++ 工程来说，也许需要的就是头文件路径、库路径、编译参数，剩下的东西基本也不重要，这三样足够去编译一个工程了。所以有没有一个工具能简单点的去实现 C++ 项目的构建呢？</p><p>答案是有的，Scons 就是答案。</p><h1 id="Scons"><a href="#Scons" class="headerlink" title="Scons"></a>Scons</h1><h2 id="什么是-scons"><a href="#什么是-scons" class="headerlink" title="什么是 scons"></a>什么是 scons</h2><p>这里直接引用官网的解释：</p><blockquote><p>What is SCons?</p><blockquote><p>SCons is an Open Source software construction tool—that is, a next-generation build tool. Think of SCons as an improved, cross-platform substitute for the classic Make utility with integrated functionality similar to autoconf/automake and compiler caches such as ccache. In short, SCons is an easier, more reliable and faster way to build software.</p></blockquote></blockquote><blockquote><p>What makes SCons better?</p></blockquote><blockquote><blockquote></blockquote></blockquote><ul><li>Configuration files are Python scripts–use the power of a real programming language to solve build problems.</li><li>Reliable, automatic dependency analysis built-in for C, C++ and Fortran–no more “make depend” or “make clean” to get all of the dependencies. Dependency analysis is easily extensible through user-defined dependency Scanners for other languages or file types.</li><li>Built-in support for C, C++, D, Java, Fortran, Yacc, Lex, Qt and SWIG, and building TeX and LaTeX documents. Easily extensible through user-defined Builders for other languages or file types.</li><li>Building from central repositories of source code and/or pre-built targets.</li><li>Built-in support for fetching source files from SCCS, RCS, CVS, BitKeeper and Perforce.</li><li>Built-in support for Microsoft Visual Studio .NET and past Visual Studio versions, including generation of .dsp, .dsw, .sln and .vcproj files.</li><li>Reliable detection of build changes using MD5 signatures; optional, configurable support for traditional timestamps.</li><li>Improved support for parallel builds–like make -j but keeps N jobs running simultaneously regardless of directory hierarchy.</li><li>Integrated Autoconf-like support for finding #include files, libraries, functions and typedefs.</li><li>Global view of all dependencies–no more multiple build passes or reordering targets to build everything.</li><li>Ability to share built files in a cache to speed up multiple builds–like ccache but for any type of target file, not just C/C++ compilation.</li><li>Designed from the ground up for cross-platform builds, and known to work on Linux, other POSIX systems (including AIX, BSD systems, HP/UX, IRIX and Solaris), Windows NT, Mac OS X, and OS/2.</li></ul><p>最大特点就是使用 Python 语法来编写编译构建脚本，并且支持依赖自动推导，支持编译 C/C++/D/Java/Fortran等项目，并且是跨平台的(因为 python 是跨平台的）。</p><a id="more"></a><p>所以如果你对 python 熟悉的话，而且你和我对 C++  Makefile 有一样的烦恼，那么这对你将是一个好消息。 你将可以用 python 来编写构建脚本，而且会很简单，对于复杂的大型项目也能快速构建好。（也许只要 30 分钟）</p><h2 id="安装-scons"><a href="#安装-scons" class="headerlink" title="安装 scons"></a>安装 scons</h2><p>因为 scons 是基于 python 来构建的，所以毋容置疑，首先是需要准备好 python 环境，然后使用下述命令安装 scons 工具。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> scons</span><br></pre></td></tr></table></figure><h2 id="scons-使用语法"><a href="#scons-使用语法" class="headerlink" title="scons 使用语法"></a>scons 使用语法</h2><p>注：<strong>本文以一个多源文件，多目录结构的项目 <a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">mux</a> 为例，介绍 cmake 的使用，相关源文件以及cmake 脚本可以直接查看源项目</strong>。</p><p>scons 构建脚本由一个 SConstruct 文件和多个 SConscript 文件构成。</p><p>SConstruct 通常位于项目顶层目录，然后 SConscript 通常位于子目录（子模块）。</p><p>那么来看一下 SConstruct 脚本长啥样?</p><h3 id="SConstruct"><a href="#SConstruct" class="headerlink" title="SConstruct"></a>SConstruct</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf-<span class="number">8</span> -*-</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import platform</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">env = Environment()</span><br><span class="line">abs_path = os.getcwd()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'workspace path:&#123;0&#125;'</span>.format(abs_path)</span></span>)</span><br><span class="line"></span><br><span class="line">sbuild_dir = <span class="string">'sbuild'</span></span><br><span class="line"></span><br><span class="line">headers = [<span class="string">'.'</span>, <span class="string">'third-party/include'</span>]</span><br><span class="line">libs = [<span class="string">'./third-party/lib'</span>]</span><br><span class="line"></span><br><span class="line">abs_headers = []</span><br><span class="line">abs_libs = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> headers:</span><br><span class="line">    abs_item = os<span class="selector-class">.path</span>.join(abs_path, item)</span><br><span class="line">    abs_headers.append(abs_item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> libs:</span><br><span class="line">    abs_item = os<span class="selector-class">.path</span>.join(abs_path, item)</span><br><span class="line">    abs_libs.append(abs_item)</span><br><span class="line"></span><br><span class="line">build_dir = os<span class="selector-class">.path</span>.join(abs_path, sbuild_dir)</span><br><span class="line">abs_libs.append(os<span class="selector-class">.path</span>.join(build_dir, <span class="string">'lib'</span>))</span><br><span class="line"></span><br><span class="line">CCFLAGS = <span class="string">'-ggdb -std=c++11'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'\nheaders path:'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(abs_headers)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'\n'</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'libs path:'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(abs_libs)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'\n'</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"begin load SConscript"</span>)</span></span></span><br><span class="line"></span><br><span class="line">env[<span class="string">"headers"</span>] = abs_headers</span><br><span class="line">env[<span class="string">"libs"</span>]    = abs_libs</span><br><span class="line">env[<span class="string">"MUX_DIR"</span>] = abs_path</span><br><span class="line">env[<span class="string">'ccflags'</span>] = CCFLAGS</span><br><span class="line">env[<span class="string">'build_dir'</span>] = build_dir</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">Export</span><span class="params">(<span class="string">'env'</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">SConscript</span><span class="params">([<span class="string">'./mbase/SConscript'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">SConscript</span><span class="params">([<span class="string">'./message_handle/SConscript'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">SConscript</span><span class="params">([<span class="string">'./epoll/SConscript'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">SConscript</span><span class="params">([<span class="string">'./transport/SConscript'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">SConscript</span><span class="params">([<span class="string">'./demo/bench/SConscript'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">SConscript</span><span class="params">([<span class="string">'./demo/echo/SConscript'</span>])</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"\n All Done, Please Check &#123;0&#125;"</span>.format(env[<span class="string">'build_dir'</span>])</span></span>)</span><br></pre></td></tr></table></figure><p>来分析一下这个文件，源文件可以直接在 <a href="https://github.com/smaugx/mux/blob/master/SConstruct" target="_blank" rel="noopener">我的github</a>下载。</p><p>SConstruct 文件主要做了两件事：</p><ul><li>env 环境变量的构造，主要是头文件路径，库路径，编译参数，自定义的一些变量等</li><li>使用 SConscript 函数解析执行子模块的 SConscript 文件 </li></ul><p>需要注意的是 SConstruct 和 SConscript 共享变量使用的就是 env 这个变量，你可以看到上面有一句：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Export</span><span class="params">(<span class="string">'env'</span>)</span></span></span><br></pre></td></tr></table></figure><p>这句很重要。</p><h3 id="SConscript"><a href="#SConscript" class="headerlink" title="SConscript"></a>SConscript</h3><p>那么位于子模块或者子目录的 SConscript 文件长啥样呢？</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf<span class="number">-8</span> -*-</span><br><span class="line"></span><br><span class="line">import <span class="built_in">os</span></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">Import(<span class="string">'env'</span>)</span><br><span class="line">project_dir  = env[<span class="string">'MUX_DIR'</span>]</span><br><span class="line"></span><br><span class="line">epoll_lib  = <span class="string">'epoll'</span></span><br><span class="line"></span><br><span class="line">epoll_src_path = <span class="built_in">os</span>.<span class="built_in">path</span>.join(project_dir, <span class="string">'epoll/src'</span>)</span><br><span class="line">epoll_sources = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">os</span>.listdir(epoll_src_path):</span><br><span class="line">    <span class="keyword">if</span> item.endswith(<span class="string">'.cc'</span>) <span class="keyword">or</span> item.endswith(<span class="string">'.cpp'</span>) <span class="keyword">or</span> item.endswith(<span class="string">'.cxx'</span>):</span><br><span class="line">        abs_item = <span class="built_in">os</span>.<span class="built_in">path</span>.join(epoll_src_path, item)</span><br><span class="line">        epoll_sources.append(abs_item)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'\nbuild target:lib&#123;0&#125;.a'</span>.<span class="built_in">format</span>(epoll_lib))</span><br><span class="line"><span class="built_in">print</span>(epoll_sources)</span><br><span class="line"></span><br><span class="line">lib_dir = <span class="built_in">os</span>.<span class="built_in">path</span>.join(env[<span class="string">'build_dir'</span>], <span class="string">'lib'</span>)</span><br><span class="line"></span><br><span class="line">link_libraries = [<span class="string">'mbase'</span>]</span><br><span class="line"><span class="keyword">for</span> lib_name <span class="keyword">in</span> link_libraries:</span><br><span class="line">    lib_name = <span class="string">"&#123;0&#125;&#123;1&#125;&#123;2&#125;"</span>.<span class="built_in">format</span>(env[<span class="string">'LIBPREFIX'</span>], lib_name, env[<span class="string">'LIBSUFFIX'</span>])</span><br><span class="line">    abs_lib_name = <span class="built_in">os</span>.<span class="built_in">path</span>.join(lib_dir, lib_name)</span><br><span class="line">    epoll_sources.append(abs_lib_name)</span><br><span class="line"></span><br><span class="line">env.StaticLibrary(target = <span class="built_in">os</span>.<span class="built_in">path</span>.join(lib_dir, epoll_lib),</span><br><span class="line">        source  = epoll_sources,</span><br><span class="line">        CPPPATH = env[<span class="string">'headers'</span>], # include</span><br><span class="line">        LIBPATH = env[<span class="string">'libs'</span>],    # lib <span class="built_in">path</span></span><br><span class="line">        LIBS    = [<span class="string">'pthread'</span>],    # link lib</span><br><span class="line">        CCFLAGS = env[<span class="string">'ccflags'</span>]</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>来分析一下这个文件，源文件可以直接在 <a href="https://github.com/smaugx/mux/blob/master/epoll/SConscript" target="_blank" rel="noopener">我的github</a>下载。</p><p>SConscript 主要做了两件事：</p><ul><li>构造一个源文件列表（用来构建 target 所需要使用的源文件）</li><li>根据需要构建 static_lib/dynamic_lib/binary</li></ul><p>当然，还有一点很重要，上面其实提到了，SConscript 和 SConstruct 用来共享变量使用的是 env 这个变量，所以你可以看到一句很重要的：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Import</span><span class="params">(<span class="string">'env'</span>)</span></span></span><br></pre></td></tr></table></figure><p>构造源文件列表，对于 Python 来说，简直是小菜一碟，太简单了；</p><p>然后如何生成目标文件呢？</p><p>1 生成二进制文件</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">env</span>.Program(target = os.path.join(bin_dir, echo_server_bin),</span><br><span class="line">        <span class="keyword">source</span>  = echo_server_sources,</span><br><span class="line">        CPPPATH = <span class="keyword">env</span>[<span class="string">'headers'</span>],</span><br><span class="line">        LIBPATH = <span class="keyword">env</span>[<span class="string">'libs'</span>],</span><br><span class="line">        LIBS    = [<span class="string">'transport'</span>,<span class="string">'msghandler'</span>,<span class="string">'epoll'</span>, <span class="string">'mbase'</span>, <span class="string">'pthread'</span>],</span><br><span class="line">        CCFLAGS = <span class="keyword">env</span>[<span class="string">'ccflags'</span>]</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>2  生成静态库</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">env</span>.StaticLibrary(target = os.path.join(lib_dir, epoll_lib),</span><br><span class="line">        source  = epoll_sources,</span><br><span class="line">        CPPPATH = <span class="keyword">env</span>[<span class="string">'headers'</span>], <span class="comment"># include</span></span><br><span class="line">        LIBPATH = <span class="keyword">env</span>[<span class="string">'libs'</span>],    <span class="comment"># lib path</span></span><br><span class="line">        LIBS    = [<span class="string">'pthread'</span>],    <span class="comment"># link lib</span></span><br><span class="line">        CCFLAGS = <span class="keyword">env</span>[<span class="string">'ccflags'</span>]</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>3 生成动态库</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">env</span>.SharedLibrary(target = os.path.join(lib_dir, epoll_lib),</span><br><span class="line">        source  = epoll_sources,</span><br><span class="line">        CPPPATH = <span class="keyword">env</span>[<span class="string">'headers'</span>], <span class="comment"># include</span></span><br><span class="line">        LIBPATH = <span class="keyword">env</span>[<span class="string">'libs'</span>],    <span class="comment"># lib path</span></span><br><span class="line">        LIBS    = [<span class="string">'pthread'</span>],    <span class="comment"># link lib</span></span><br><span class="line">        CCFLAGS = <span class="keyword">env</span>[<span class="string">'ccflags'</span>]</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>上面 3 个函数的参数都是类似的：</p><ul><li>target: 指定需要生成的目标文件，通常我自己会写一个绝对路径；对于 lib 来说只需要写名字就行，前缀和后缀不需要写。(eg. target = ‘/root/scons_repo/sbuild/lib/test’ ，会生成 /root/scons_repo/sbuild/lib/libtest.a)</li><li>source: 编译目标文件需要的源文件列表</li><li>CPPPATH: 通常就是需要 Include 的头文件路径</li><li>LIBPATH: 通常就是需要链接的库路径</li><li>LIBS: 需要链接的库列表</li><li>CCFLAGS: 编译参数</li></ul><p><strong>attention:</strong></p><p><strong>上面有一个坑我自己碰到的，当我构建目标生成一个静态库的时候，需要链接其他的静态库，如果使用 $LIBPATH 和 $LIBS 指定链接库的话，scons 并没有链接这些库。尝试了很多方法，搜索了很多，也没有解决这个问题</strong>。</p><p><strong>最后是这样解决的。把需要链接的静态库添加到 source 参数中，和其他 cc/cpp 源文件一样放在一起，并且这些库需要使用绝对路径</strong>。</p><p>通常为了跨平台的方便，需要考虑lib 的前后缀，可以这样写：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">link_libraries = [<span class="string">'test1'</span>, <span class="string">'test2'</span>]</span><br><span class="line"><span class="keyword">for</span> lib_name <span class="keyword">in</span> link_libraries:</span><br><span class="line">    lib_name = <span class="string">"&#123;0&#125;&#123;1&#125;&#123;2&#125;"</span>.<span class="built_in">format</span>(env[<span class="string">'LIBPREFIX'</span>], lib_name, env[<span class="string">'LIBSUFFIX'</span>])</span><br><span class="line">    abs_lib_name = <span class="built_in">os</span>.<span class="built_in">path</span>.join(lib_dir, lib_name)</span><br><span class="line">    sources.append(abs_lib_name)</span><br></pre></td></tr></table></figure><h2 id="scons-命令"><a href="#scons-命令" class="headerlink" title="scons 命令"></a>scons 命令</h2><p>上面详细讲解了如何使用 python 编写构建脚本，那么写好之后怎么用呢？</p><p>常用的几个命令：</p><p><strong>编译</strong>：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scons</span></span><br></pre></td></tr></table></figure><p>如果需要并行编译：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">scons </span>-<span class="keyword">j4</span></span><br></pre></td></tr></table></figure><p><strong>清理</strong>：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scons -c</span></span><br></pre></td></tr></table></figure><p>然后就会按照你脚本里写的方式去构建目标了。</p><p>这里贴一下 <a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">我的项目</a> 编译的输出：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">$ scons</span><br><span class="line"><span class="symbol">scons:</span> Reading SConscript files ...</span><br><span class="line">workspace <span class="symbol">path:</span>/mnt/centos-share/workspace/mux</span><br><span class="line"></span><br><span class="line">headers <span class="symbol">path:</span></span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/.'</span>, <span class="string">'/mnt/centos-share/workspace/mux/third-party/include'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libs <span class="symbol">path:</span></span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/./third-party/lib'</span>, <span class="string">'/mnt/centos-share/workspace/mux/sbuild/lib'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span> load SConscript</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>libmbase.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/mbase/src/packet.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>libmsghandler.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/message_handle/src/message_handler.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>libepoll.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/epoll/src/epoll_tcp_client.cc'</span>, <span class="string">'/mnt/centos-share/workspace/mux/epoll/src/epoll_tcp_server.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>libtransport.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/transport/src/tcp_transport.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>bench_server</span><br><span class="line">[<span class="string">'bench_server.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>bench_client</span><br><span class="line">[<span class="string">'client.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>echo_server</span><br><span class="line">[<span class="string">'echo_server.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="symbol">target:</span>echo_client</span><br><span class="line">[<span class="string">'client.cc'</span>]</span><br><span class="line"></span><br><span class="line"> All Done, Please Check /mnt/centos-share/workspace/mux/sbuild</span><br><span class="line"><span class="symbol">scons:</span> done reading SConscript files.</span><br><span class="line"><span class="symbol">scons:</span> Building targets ...</span><br><span class="line">g++ -o demo/bench/bench_server.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> demo/bench/bench_server.cc</span><br><span class="line">g++ -o demo/bench/client.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> demo/bench/client.cc</span><br><span class="line">g++ -o demo/echo/client.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> demo/echo/client.cc</span><br><span class="line">g++ -o demo/echo/echo_server.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> demo/echo/echo_server.cc</span><br><span class="line">g++ -o epoll/src/epoll_tcp_client.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> epoll/src/epoll_tcp_client.cc</span><br><span class="line">g++ -o epoll/src/epoll_tcp_server.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> epoll/src/epoll_tcp_server.cc</span><br><span class="line">g++ -o mbase/src/packet.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> mbase/src/packet.cc</span><br><span class="line">g++ -o message_handle/src/message_handler.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> message_handle/src/message_handler.cc</span><br><span class="line">g++ -o transport/src/tcp_transport.o -c -ggdb -std=c++<span class="number">11</span> -I. -Ithird-party/<span class="keyword">include</span> transport/src/tcp_transport.cc</span><br><span class="line">ar rc sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libmbase</span>.<span class="title">a</span> <span class="title">mbase</span>/<span class="title">src</span>/<span class="title">packet</span>.<span class="title">o</span></span></span><br><span class="line">ranlib sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libmbase</span>.<span class="title">a</span></span></span><br><span class="line">ar rc sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libepoll</span>.<span class="title">a</span> <span class="title">epoll</span>/<span class="title">src</span>/<span class="title">epoll_tcp_client</span>.<span class="title">o</span> <span class="title">epoll</span>/<span class="title">src</span>/<span class="title">epoll_tcp_server</span>.<span class="title">o</span> <span class="title">sbuild</span>/<span class="title">lib</span>/<span class="title">libmbase</span>.<span class="title">a</span></span></span><br><span class="line">ranlib sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libepoll</span>.<span class="title">a</span></span></span><br><span class="line">ar rc sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libtransport</span>.<span class="title">a</span> <span class="title">transport</span>/<span class="title">src</span>/<span class="title">tcp_transport</span>.<span class="title">o</span> <span class="title">sbuild</span>/<span class="title">lib</span>/<span class="title">libepoll</span>.<span class="title">a</span> <span class="title">sbuild</span>/<span class="title">lib</span>/<span class="title">libmbase</span>.<span class="title">a</span></span></span><br><span class="line">ranlib sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libtransport</span>.<span class="title">a</span></span></span><br><span class="line">ar rc sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libmsghandler</span>.<span class="title">a</span> <span class="title">message_handle</span>/<span class="title">src</span>/<span class="title">message_handler</span>.<span class="title">o</span> <span class="title">sbuild</span>/<span class="title">lib</span>/<span class="title">libmbase</span>.<span class="title">a</span></span></span><br><span class="line">ranlib sbuild/<span class="class"><span class="keyword">lib</span>/<span class="title">libmsghandler</span>.<span class="title">a</span></span></span><br><span class="line">g++ -o sbuild/bin/bench_client demo/bench/client.o -Lthird-party/<span class="class"><span class="keyword">lib</span> -<span class="title">Lsbuild</span>/<span class="title">lib</span> -<span class="title">ltransport</span> -<span class="title">lmsghandler</span> -<span class="title">lepoll</span> -<span class="title">lmbase</span> -<span class="title">lpthread</span></span></span><br><span class="line">g++ -o sbuild/bin/bench_server demo/bench/bench_server.o -Lthird-party/<span class="class"><span class="keyword">lib</span> -<span class="title">Lsbuild</span>/<span class="title">lib</span> -<span class="title">ltransport</span> -<span class="title">lmsghandler</span> -<span class="title">lepoll</span> -<span class="title">lmbase</span> -<span class="title">lpthread</span></span></span><br><span class="line">g++ -o sbuild/bin/echo_client demo/echo/client.o -Lthird-party/<span class="class"><span class="keyword">lib</span> -<span class="title">Lsbuild</span>/<span class="title">lib</span> -<span class="title">ltransport</span> -<span class="title">lmsghandler</span> -<span class="title">lepoll</span> -<span class="title">lmbase</span> -<span class="title">lpthread</span></span></span><br><span class="line">g++ -o sbuild/bin/echo_server demo/echo/echo_server.o -Lthird-party/<span class="class"><span class="keyword">lib</span> -<span class="title">Lsbuild</span>/<span class="title">lib</span> -<span class="title">ltransport</span> -<span class="title">lmsghandler</span> -<span class="title">lepoll</span> -<span class="title">lmbase</span> -<span class="title">lpthread</span></span></span><br><span class="line"><span class="symbol">scons:</span> done building targets.</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">$ scons -c</span><br><span class="line"><span class="string">scons:</span> Reading SConscript files ...</span><br><span class="line">workspace <span class="string">path:</span><span class="regexp">/mnt/</span>centos-share<span class="regexp">/workspace/</span>mux</span><br><span class="line"></span><br><span class="line">headers <span class="string">path:</span></span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/.'</span>, <span class="string">'/mnt/centos-share/workspace/mux/third-party/include'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libs <span class="string">path:</span></span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/./third-party/lib'</span>, <span class="string">'/mnt/centos-share/workspace/mux/sbuild/lib'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">begin load SConscript</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>libmbase.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/mbase/src/packet.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>libmsghandler.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/message_handle/src/message_handler.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>libepoll.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/epoll/src/epoll_tcp_client.cc'</span>, <span class="string">'/mnt/centos-share/workspace/mux/epoll/src/epoll_tcp_server.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>libtransport.a</span><br><span class="line">[<span class="string">'/mnt/centos-share/workspace/mux/transport/src/tcp_transport.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>bench_server</span><br><span class="line">[<span class="string">'bench_server.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>bench_client</span><br><span class="line">[<span class="string">'client.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>echo_server</span><br><span class="line">[<span class="string">'echo_server.cc'</span>]</span><br><span class="line"></span><br><span class="line">build <span class="string">target:</span>echo_client</span><br><span class="line">[<span class="string">'client.cc'</span>]</span><br><span class="line"></span><br><span class="line"> All Done, Please Check <span class="regexp">/mnt/</span>centos-share<span class="regexp">/workspace/</span>mux/sbuild</span><br><span class="line"><span class="string">scons:</span> done reading SConscript files.</span><br><span class="line"><span class="string">scons:</span> Cleaning targets ...</span><br><span class="line">Removed demo<span class="regexp">/bench/</span>bench_server.o</span><br><span class="line">Removed demo<span class="regexp">/bench/</span>client.o</span><br><span class="line">Removed demo<span class="regexp">/echo/</span>client.o</span><br><span class="line">Removed demo<span class="regexp">/echo/</span>echo_server.o</span><br><span class="line">Removed epoll<span class="regexp">/src/</span>epoll_tcp_client.o</span><br><span class="line">Removed epoll<span class="regexp">/src/</span>epoll_tcp_server.o</span><br><span class="line">Removed mbase<span class="regexp">/src/</span>packet.o</span><br><span class="line">Removed message_handle<span class="regexp">/src/</span>message_handler.o</span><br><span class="line">Removed transport<span class="regexp">/src/</span>tcp_transport.o</span><br><span class="line">Removed sbuild<span class="regexp">/lib/</span>libmbase.a</span><br><span class="line">Removed sbuild<span class="regexp">/lib/</span>libepoll.a</span><br><span class="line">Removed sbuild<span class="regexp">/lib/</span>libtransport.a</span><br><span class="line">Removed sbuild<span class="regexp">/lib/</span>libmsghandler.a</span><br><span class="line">Removed sbuild<span class="regexp">/bin/</span>bench_client</span><br><span class="line">Removed sbuild<span class="regexp">/bin/</span>bench_server</span><br><span class="line">Removed sbuild<span class="regexp">/bin/</span>echo_client</span><br><span class="line">Removed sbuild<span class="regexp">/bin/</span>echo_server</span><br><span class="line"><span class="string">scons:</span> done cleaning targets.</span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>scons 使用 python 脚本来构建项目，如果对 python 熟悉的话，那么编写编译构建脚本将会大大提高效率，再也不用局限在 Makefile 的蛋疼语法里面了。</p><p>当然 scons 的缺点也有，据说在大型项目的时候，可能会很慢。这个我还没碰到过，因为没有用到大型项目中。</p><p>下一篇，分享下 cmake 构建 C++ 项目的一些语法和步骤。</p><p><a href="http://rebootcat.com/2020/09/02/cmake/">cmake教程|cmake入门实战</a></p><p>另外，文中涉及到的项目可以在<a href="https://github.com/smaugx/mux" target="_blank" rel="noopener">我的github</a> 找到。</p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#105;&#x6e;&#117;&#x78;&#x63;&#x6f;&#x64;&#x65;&#50;&#x6e;&#x69;&#107;&#x69;&#64;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#109;">&#108;&#105;&#x6e;&#117;&#x78;&#x63;&#x6f;&#x64;&#x65;&#50;&#x6e;&#x69;&#107;&#x69;&#64;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#109;</a></p></li></ul><p>2020-08-30 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我是一个 linux c++ 开发者，但是一直对 Makefile 的语法很是头痛，每次都记不住，所以每次写 Makefile 都很痛苦，Makefile 里需要你自己编写依赖和推导规则，这个过程能不能简单点呢？&lt;/p&gt;
&lt;p&gt;对于编译一个 C++ 工程来说，也许需要的就是头文件路径、库路径、编译参数，剩下的东西基本也不重要，这三样足够去编译一个工程了。所以有没有一个工具能简单点的去实现 C++ 项目的构建呢？&lt;/p&gt;
&lt;p&gt;答案是有的，Scons 就是答案。&lt;/p&gt;
&lt;h1 id=&quot;Scons&quot;&gt;&lt;a href=&quot;#Scons&quot; class=&quot;headerlink&quot; title=&quot;Scons&quot;&gt;&lt;/a&gt;Scons&lt;/h1&gt;&lt;h2 id=&quot;什么是-scons&quot;&gt;&lt;a href=&quot;#什么是-scons&quot; class=&quot;headerlink&quot; title=&quot;什么是 scons&quot;&gt;&lt;/a&gt;什么是 scons&lt;/h2&gt;&lt;p&gt;这里直接引用官网的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is SCons?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SCons is an Open Source software construction tool—that is, a next-generation build tool. Think of SCons as an improved, cross-platform substitute for the classic Make utility with integrated functionality similar to autoconf/automake and compiler caches such as ccache. In short, SCons is an easier, more reliable and faster way to build software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What makes SCons better?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Configuration files are Python scripts–use the power of a real programming language to solve build problems.&lt;/li&gt;
&lt;li&gt;Reliable, automatic dependency analysis built-in for C, C++ and Fortran–no more “make depend” or “make clean” to get all of the dependencies. Dependency analysis is easily extensible through user-defined dependency Scanners for other languages or file types.&lt;/li&gt;
&lt;li&gt;Built-in support for C, C++, D, Java, Fortran, Yacc, Lex, Qt and SWIG, and building TeX and LaTeX documents. Easily extensible through user-defined Builders for other languages or file types.&lt;/li&gt;
&lt;li&gt;Building from central repositories of source code and/or pre-built targets.&lt;/li&gt;
&lt;li&gt;Built-in support for fetching source files from SCCS, RCS, CVS, BitKeeper and Perforce.&lt;/li&gt;
&lt;li&gt;Built-in support for Microsoft Visual Studio .NET and past Visual Studio versions, including generation of .dsp, .dsw, .sln and .vcproj files.&lt;/li&gt;
&lt;li&gt;Reliable detection of build changes using MD5 signatures; optional, configurable support for traditional timestamps.&lt;/li&gt;
&lt;li&gt;Improved support for parallel builds–like make -j but keeps N jobs running simultaneously regardless of directory hierarchy.&lt;/li&gt;
&lt;li&gt;Integrated Autoconf-like support for finding #include files, libraries, functions and typedefs.&lt;/li&gt;
&lt;li&gt;Global view of all dependencies–no more multiple build passes or reordering targets to build everything.&lt;/li&gt;
&lt;li&gt;Ability to share built files in a cache to speed up multiple builds–like ccache but for any type of target file, not just C/C++ compilation.&lt;/li&gt;
&lt;li&gt;Designed from the ground up for cross-platform builds, and known to work on Linux, other POSIX systems (including AIX, BSD systems, HP/UX, IRIX and Solaris), Windows NT, Mac OS X, and OS/2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最大特点就是使用 Python 语法来编写编译构建脚本，并且支持依赖自动推导，支持编译 C/C++/D/Java/Fortran等项目，并且是跨平台的(因为 python 是跨平台的）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="https://rebootcat.com/categories/c/"/>
    
    
      <category term="cmake" scheme="https://rebootcat.com/tags/cmake/"/>
    
      <category term="scons" scheme="https://rebootcat.com/tags/scons/"/>
    
      <category term="c++" scheme="https://rebootcat.com/tags/c/"/>
    
      <category term="linux" scheme="https://rebootcat.com/tags/linux/"/>
    
      <category term="makefile" scheme="https://rebootcat.com/tags/makefile/"/>
    
      <category term="make" scheme="https://rebootcat.com/tags/make/"/>
    
  </entry>
  
  <entry>
    <title>自动创建阿里云抢占式实例</title>
    <link href="https://rebootcat.com/2020/08/24/auto_run_aliyun_spot/"/>
    <id>https://rebootcat.com/2020/08/24/auto_run_aliyun_spot/</id>
    <published>2020-08-24T14:23:58.000Z</published>
    <updated>2020-08-24T14:30:23.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="aliyun-spot"><a href="#aliyun-spot" class="headerlink" title="aliyun_spot"></a><a href="https://github.com/smaugx/aliyun_spot" target="_blank" rel="noopener">aliyun_spot</a></h1><p>自动创建阿里云抢占式实例。</p><h1 id="支持一下作者，购买阿里云"><a href="#支持一下作者，购买阿里云" class="headerlink" title="支持一下作者，购买阿里云"></a><a href="https://www.aliyun.com/minisite/goods?userCode=c5nuzwoj" target="_blank" rel="noopener">支持一下作者，购买阿里云</a></h1><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>阿里云抢占式实例应该属于阿里云的一种闲置资源利用，性价比非常高，每小时的价格在 0.01 ~ 0.05 每小时，具体根据不同的配置和地域有差别，流量价格小于 1元/G.</p><p>抢占式实例最高可以以<strong>一折的价格购买 ECS 实例，并能稳定持有该实例至少一个小时</strong>。一个小时后，当市场价格高于您的出价或资源供需关系变化时，<strong>抢占式实例会被自动释放</strong>，请做好数据备份工作。</p><p><strong>非常适合爬虫</strong></p><p><strong>非常适合爬虫</strong></p><p><strong>非常适合爬虫</strong></p><p>也适合程序员个人日常开发使用，上班来创建，下班释放，开销基本可以控制在在 1毛 ~ 2 毛。</p><p>对于我来说，最近在写一个爬虫，看了很多代理都很贵，免费的又不稳定，正好了解到阿里云的抢占式实例，所以非常满足我的需求。</p><p>但是要注意，这个实例是有可能被释放的，但是不用担心，比如<strong>香港地区的释放率最近（2020-08-19）小于 3%. 另外，每个人可以最大创建 100 个实例</strong>，所以还是不用太担心。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/auto_run_aliyun_spot/1.png" alt=""></p><a id="more"></a><h1 id="脚本功能"><a href="#脚本功能" class="headerlink" title="脚本功能"></a>脚本功能</h1><p>脚本仓库: <a href="https://github.com/smaugx/aliyun_spot" target="_blank" rel="noopener">https://github.com/smaugx/aliyun_spot</a></p><h2 id="自动创建阿里云抢占式实例"><a href="#自动创建阿里云抢占式实例" class="headerlink" title="自动创建阿里云抢占式实例"></a>自动创建阿里云抢占式实例</h2><p>支持以下一些参数：</p><ul><li>实例所属地域</li><li>创建的实例数量</li><li>公网出口带宽最大值</li><li>实例付费的策略和每小时最大价格</li><li>系统盘大小</li><li>释放时间（hours）</li><li>实例规格(cpu/mem/localdisk/net/ipv6)</li></ul><h2 id="手动释放一个或者多个实例"><a href="#手动释放一个或者多个实例" class="headerlink" title="手动释放一个或者多个实例"></a>手动释放一个或者多个实例</h2><p>可以使用脚本提前释放一个或者多个实例。</p><p><strong>创建的时候可以设置自动释放时间，当然也支持随时手动释放</strong>。</p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ python run_aliyunspot.py</span><br><span class="line">usage: run_aliyunspot.py [-h] [-c [CREATE]] [-r [RELEASE]] [-l [LIST]] [-s [SPOTID [SPOTID <span class="built_in">..</span>.]]]</span><br><span class="line"></span><br><span class="line">aliyunspot, 自动创建阿里云抢占式实例,支持自动/手动释放</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message <span class="keyword">and</span> exit</span><br><span class="line">  -c [CREATE], --create [CREATE]</span><br><span class="line">                        create aliyun spot<span class="built_in"> instance </span><span class="keyword">and</span> <span class="builtin-name">run</span> instance</span><br><span class="line">  -r [RELEASE], --release [RELEASE]</span><br><span class="line">                        release aliyun spot instance</span><br><span class="line">  -l [LIST], --list [LIST]</span><br><span class="line">                        list local record aliyun spot instance</span><br><span class="line">  -s [SPOTID [SPOTID <span class="built_in">..</span>.]], --spotid [SPOTID [SPOTID <span class="built_in">..</span>.]]</span><br><span class="line">                        aliyun spot instance_id <span class="keyword">for</span> release, you can give more than one</span><br></pre></td></tr></table></figure><h2 id="1-克隆仓库"><a href="#1-克隆仓库" class="headerlink" title="1 克隆仓库"></a>1 克隆仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/smaugx/aliyun_spot.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> aliyun_spot</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> virtualenv -p python3 vv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> vv/bin/activate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure><h2 id="2-调整配置"><a href="#2-调整配置" class="headerlink" title="2  调整配置"></a>2  调整配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">cp</span> test_config.<span class="keyword">py</span> config.<span class="keyword">py</span></span><br><span class="line"># 打开配置文件，根据你自己的需求修改里面的配置选项</span><br><span class="line">$ <span class="keyword">vim</span> config.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>当然你也可以不用修改其他配置，只需要把你的 <strong>access_id</strong> 和 <strong>access_secret</strong> 填进去就可以，以及 <strong>key_pair_name</strong> 填进去。（见后文章节 <strong>#阿里云官网操作#</strong> ）</p><p><strong>默认创建的是香港地区的抢占式实例，内存 500MB, 1 CPU, 系统盘 20GB, 按流量计费（1元/G), 公网出口带宽 10Mbps, 1 小时候自动释放。</strong></p><blockquote><p>2020-08-19 上述默认配置的实例价格在 ￥ 0.018 /时。</p></blockquote><p>如果你觉得这个配置(cpu/mem)无法满足你的要求，那么可以调整 <strong>instance_type</strong> 这个参数，表示实例规格，详细可以查看阿里云官网页面 <a href="https://help.aliyun.com/document_detail/25378.html" target="_blank" rel="noopener">云服务器 ECS &gt; 实例 &gt; 实例规格族</a></p><h2 id="3-创建实例"><a href="#3-创建实例" class="headerlink" title="3 创建实例"></a>3 创建实例</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ python run_aliyunspot.py -c</span><br><span class="line">will create <span class="keyword">and</span> <span class="builtin-name">run</span> aliyun spot instance, please wait<span class="built_in">..</span>.</span><br><span class="line">Success.<span class="built_in"> Instance </span>creation succeed. InstanceIds: i-j6cfhcbb3o2pepduwgfk</span><br><span class="line">Instance boot successfully: i-j6cfhcbb3o2pepduwgfk</span><br><span class="line">Instances all boot successfully</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">InstanceId:i-j6cfhcbb3o2pepduwgfk</span><br><span class="line">InstanceName:smaug-000-aliyun-8242148</span><br><span class="line">HostName:smaug-000-aliyun-8242148</span><br><span class="line">PublicIp:47.242.33.179</span><br><span class="line">KeyPairName:aliyunspot</span><br><span class="line">CreationTime:2020-08-24T13:48Z</span><br><span class="line">AutoReleaseTime:2020-08-24T22:48Z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance <span class="builtin-name">info</span> saved <span class="keyword">in</span> file:./ecs/ecs.i-j6cfhcbb3o2pepduwgfk</span><br><span class="line">now you can use ssh: ssh -i ~/.ssh/aliyunspot.pem root@47.242.33.179</span><br></pre></td></tr></table></figure><p>如上，创建成功。然后接下来就可以使用 ssh 登录：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i ~/.ssh/~/.ssh/aliyunspot.pem <span class="symbol">root@</span><span class="number">8.210</span><span class="number">.245</span><span class="number">.226</span></span><br></pre></td></tr></table></figure><h2 id="4-列出实例"><a href="#4-列出实例" class="headerlink" title="4 列出实例"></a>4 列出实例</h2><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python run_aliyunspot.py -l</span><br><span class="line"><span class="built_in">list</span> all <span class="keyword">local</span> record instance:</span><br><span class="line">[<span class="symbol">'i</span>-j6caz353cisgl3fzenwi', <span class="symbol">'i</span>-j6cbyis12fb1fpzk59fv', <span class="symbol">'i</span>-j6cfhcbb3o2pepduwgfk']</span><br></pre></td></tr></table></figure><p>注意，上面仅仅是把之前创建并保存的实例信息从文件当中读取出来，并没有与 aliyun 交互。</p><h2 id="5-释放实例"><a href="#5-释放实例" class="headerlink" title="5 释放实例"></a>5 释放实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python run_aliyunspot.py -r -s i-j6caz353cisgl3fzenwi i-j6cbyis12fb1fpzk59fv</span><br><span class="line">will <span class="keyword">release</span> aliyun spot <span class="keyword">instance</span>:</span><br><span class="line">[<span class="string">'i-j6caz353cisgl3fzenwi'</span>, <span class="string">'i-j6cbyis12fb1fpzk59fv'</span>]</span><br><span class="line">please wait...</span><br><span class="line"></span><br><span class="line"><span class="keyword">release</span> <span class="keyword">instance</span>:[<span class="string">"i-j6caz353cisgl3fzenwi"</span>, <span class="string">"i-j6cbyis12fb1fpzk59fv"</span>] done</span><br></pre></td></tr></table></figure><h1 id="阿里云官网操作"><a href="#阿里云官网操作" class="headerlink" title="阿里云官网操作"></a><a href="https://www.aliyun.com/minisite/goods?userCode=c5nuzwoj" target="_blank" rel="noopener">阿里云官网操作</a></h1><p>上面提到了几个配置是需要在阿里云官网操作的。</p><p><strong>阿里云官网的使用还是挺复杂的，因为功能太多了，花费了我至少一个上午的时间才熟悉了整个操作，完成了整个脚本</strong></p><p><strong>所以整理了这个脚本方便大家使用，对阿里云的操作只需要下面几个：</strong></p><ul><li>注册一个阿里云账号，这个不用说了吧</li><li>充值 100 元以上，比如 130 元。因为创建实例账号里至少要 100 元</li><li>点击 <a href="https://ram.console.aliyun.com/overview" target="_blank" rel="noopener">https://ram.console.aliyun.com/overview</a> 创建一个用户组，分配权限 AliyunECSFullAccess 和 AliyunVPCFullAccess</li><li>还是上一步的页面，添加 ram 子账号，添加到刚才创建的用户组，这个账号会用来编程访问 aliyun API</li><li>还是上一步的页面，为这个ram 子账号创建 AccessKey。<strong>记得保存好</strong>。</li><li>在 <a href="https://ecs.console.aliyun.com/" target="_blank" rel="noopener">https://ecs.console.aliyun.com/</a> 页面选择 网络与安全-密钥对，创建密钥对 aliyunspot (名字任意），会自动下载这个私钥，<strong>记得保存好，一般要放到 ~/.ssh 目录下，并且记得  <code>chmod 600 aliyunspot.pem</code></strong></li></ul><p>OK, 到这里基本上得到了我们脚本里需要的几个配置：</p><ul><li>access_id</li><li>access_secret</li><li>key_pair_name</li></ul><p>把上述几个配置填到 config.py 中即可。</p><h1 id="然后开始创建和管理你的实例吧！！"><a href="#然后开始创建和管理你的实例吧！！" class="headerlink" title="然后开始创建和管理你的实例吧！！"></a>然后开始创建和管理你的实例吧！！</h1><h1 id="然后开始创建和管理你的实例吧！！-1"><a href="#然后开始创建和管理你的实例吧！！-1" class="headerlink" title="然后开始创建和管理你的实例吧！！"></a>然后开始创建和管理你的实例吧！！</h1><h1 id="然后开始创建和管理你的实例吧！！-2"><a href="#然后开始创建和管理你的实例吧！！-2" class="headerlink" title="然后开始创建和管理你的实例吧！！"></a>然后开始创建和管理你的实例吧！！</h1><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#x69;&#110;&#x75;&#x78;&#x63;&#111;&#x64;&#x65;&#x32;&#110;&#x69;&#x6b;&#105;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;">&#x6c;&#x69;&#110;&#x75;&#x78;&#x63;&#111;&#x64;&#x65;&#x32;&#110;&#x69;&#x6b;&#105;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;</a></p></li></ul><p>2020-08-24 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p><h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><ul><li><a href="https://www.aliyun.com/minisite/goods?userCode=c5nuzwoj" target="_blank" rel="noopener">阿里云官网</a></li><li><a href="https://api.aliyun.com" target="_blank" rel="noopener">Aliyun OpenAPI Explorer</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;aliyun-spot&quot;&gt;&lt;a href=&quot;#aliyun-spot&quot; class=&quot;headerlink&quot; title=&quot;aliyun_spot&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/smaugx/aliyun_spot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;aliyun_spot&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;自动创建阿里云抢占式实例。&lt;/p&gt;
&lt;h1 id=&quot;支持一下作者，购买阿里云&quot;&gt;&lt;a href=&quot;#支持一下作者，购买阿里云&quot; class=&quot;headerlink&quot; title=&quot;支持一下作者，购买阿里云&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.aliyun.com/minisite/goods?userCode=c5nuzwoj&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;支持一下作者，购买阿里云&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;阿里云抢占式实例应该属于阿里云的一种闲置资源利用，性价比非常高，每小时的价格在 0.01 ~ 0.05 每小时，具体根据不同的配置和地域有差别，流量价格小于 1元/G.&lt;/p&gt;
&lt;p&gt;抢占式实例最高可以以&lt;strong&gt;一折的价格购买 ECS 实例，并能稳定持有该实例至少一个小时&lt;/strong&gt;。一个小时后，当市场价格高于您的出价或资源供需关系变化时，&lt;strong&gt;抢占式实例会被自动释放&lt;/strong&gt;，请做好数据备份工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非常适合爬虫&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非常适合爬虫&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非常适合爬虫&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也适合程序员个人日常开发使用，上班来创建，下班释放，开销基本可以控制在在 1毛 ~ 2 毛。&lt;/p&gt;
&lt;p&gt;对于我来说，最近在写一个爬虫，看了很多代理都很贵，免费的又不稳定，正好了解到阿里云的抢占式实例，所以非常满足我的需求。&lt;/p&gt;
&lt;p&gt;但是要注意，这个实例是有可能被释放的，但是不用担心，比如&lt;strong&gt;香港地区的释放率最近（2020-08-19）小于 3%. 另外，每个人可以最大创建 100 个实例&lt;/strong&gt;，所以还是不用太担心。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting_2/rebootcat/auto_run_aliyun_spot/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://rebootcat.com/categories/python/"/>
    
    
      <category term="python" scheme="https://rebootcat.com/tags/python/"/>
    
      <category term="aliyun" scheme="https://rebootcat.com/tags/aliyun/"/>
    
      <category term="spot" scheme="https://rebootcat.com/tags/spot/"/>
    
      <category term="ecs" scheme="https://rebootcat.com/tags/ecs/"/>
    
  </entry>
  
  <entry>
    <title>valgrind massif 分析内存问题</title>
    <link href="https://rebootcat.com/2020/06/16/valgrind_massif_memory_analysing/"/>
    <id>https://rebootcat.com/2020/06/16/valgrind_massif_memory_analysing/</id>
    <published>2020-06-16T00:23:58.000Z</published>
    <updated>2020-06-16T00:01:55.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Valgrind-Massif"><a href="#Valgrind-Massif" class="headerlink" title="Valgrind Massif"></a>Valgrind Massif</h1><p>valgrind 是什么，这里直接引用其他人的博客：</p><blockquote><p>Valgrind是一套Linux下，开放源代码（GPL<br>V2）的仿真调试工具的集合。Valgrind由内核（core）以及基于内核的其他调试工具组成。</p></blockquote><blockquote><p>内核类似于一个框架（framework），它模拟了一个CPU环境，并提供服务给其他工具；而其他工具则类似于插件 (plug-in)，利用内核提供的服务完成各种特定的内存调试任务。</p><p>Valgrind的体系结构如下图所示：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/valgrind_massif_memory_analysing/1.png" alt=""></p><h1 id="Massif-命令行选项"><a href="#Massif-命令行选项" class="headerlink" title="Massif 命令行选项"></a>Massif 命令行选项</h1><p>关于 massif 命令行选项，可以直接查看 valgrind 的 help 信息：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MASSIF OPTIONS</span><br><span class="line">       <span class="comment">--heap=&lt;yes|no&gt; [default: yes]</span></span><br><span class="line">           Specifies whether heap profiling should be done.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--heap-admin=&lt;size&gt; [default: 8]</span></span><br><span class="line">           If heap profiling <span class="keyword">is</span> enabled, gives <span class="keyword">the</span> <span class="built_in">number</span> <span class="keyword">of</span> administrative bytes per block <span class="keyword">to</span> use. This should be an estimate <span class="keyword">of</span> <span class="keyword">the</span> average, <span class="keyword">since</span> <span class="keyword">it</span> may vary. For example, <span class="keyword">the</span></span><br><span class="line">           allocator used <span class="keyword">by</span> glibc <span class="keyword">on</span> Linux requires somewhere <span class="keyword">between</span> <span class="number">4</span> <span class="keyword">to</span> <span class="number">15</span> bytes per block, depending <span class="keyword">on</span> various factors. That allocator also requires admin <span class="literal">space</span> <span class="keyword">for</span> freed blocks,</span><br><span class="line">           <span class="keyword">but</span> Massif cannot account <span class="keyword">for</span> this.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--stacks=&lt;yes|no&gt; [default: no]</span></span><br><span class="line">           Specifies whether stack profiling should be done. This option slows Massif down greatly, <span class="keyword">and</span> so <span class="keyword">is</span> off <span class="keyword">by</span> default. Note <span class="keyword">that</span> Massif assumes <span class="keyword">that</span> <span class="keyword">the</span> main stack has size zero</span><br><span class="line">           <span class="keyword">at</span> start-up. This <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">true</span>, <span class="keyword">but</span> doing otherwise accurately <span class="keyword">is</span> difficult. Furthermore, starting <span class="keyword">at</span> zero better indicates <span class="keyword">the</span> size <span class="keyword">of</span> <span class="keyword">the</span> part <span class="keyword">of</span> <span class="keyword">the</span> main stack <span class="keyword">that</span> a user</span><br><span class="line">           program actually has control <span class="keyword">over</span>.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--pages-as-heap=&lt;yes|no&gt; [default: no]</span></span><br><span class="line">           Tells Massif <span class="keyword">to</span> profile memory <span class="keyword">at</span> <span class="keyword">the</span> page level rather than <span class="keyword">at</span> <span class="keyword">the</span> malloc'd block level. See <span class="keyword">above</span> <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--depth=&lt;number&gt; [default: 30]</span></span><br><span class="line">           Maximum depth <span class="keyword">of</span> <span class="keyword">the</span> allocation trees recorded <span class="keyword">for</span> detailed snapshots. Increasing <span class="keyword">it</span> will make Massif <span class="built_in">run</span> somewhat more slowly, use more memory, <span class="keyword">and</span> produce bigger output</span><br><span class="line">           files.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--alloc-fn=&lt;name&gt;</span></span><br><span class="line">           Functions specified <span class="keyword">with</span> this option will be treated <span class="keyword">as</span> though they were a heap allocation function such <span class="keyword">as</span> malloc. This <span class="keyword">is</span> useful <span class="keyword">for</span> functions <span class="keyword">that</span> are wrappers <span class="keyword">to</span> malloc <span class="keyword">or</span></span><br><span class="line">           new, which can fill up <span class="keyword">the</span> allocation trees <span class="keyword">with</span> uninteresting information. This option can be specified multiple <span class="keyword">times</span> <span class="keyword">on</span> <span class="keyword">the</span> command line, <span class="keyword">to</span> <span class="built_in">name</span> multiple functions.</span><br><span class="line"></span><br><span class="line">           Note <span class="keyword">that</span> <span class="keyword">the</span> named function will only be treated this way <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">is</span> <span class="keyword">the</span> top entry <span class="keyword">in</span> a stack trace, <span class="keyword">or</span> just <span class="keyword">below</span> another function treated this way. For example, <span class="keyword">if</span> you have a</span><br><span class="line">           function malloc1 <span class="keyword">that</span> wraps malloc, <span class="keyword">and</span> malloc2 <span class="keyword">that</span> wraps malloc1, just specifying <span class="comment">--alloc-fn=malloc2 will have no effect. You need to specify --alloc-fn=malloc1 as well.</span></span><br><span class="line">           This <span class="keyword">is</span> a little inconvenient, <span class="keyword">but</span> <span class="keyword">the</span> reason <span class="keyword">is</span> <span class="keyword">that</span> checking <span class="keyword">for</span> allocation functions <span class="keyword">is</span> slow, <span class="keyword">and</span> <span class="keyword">it</span> saves a lot <span class="keyword">of</span> <span class="built_in">time</span> <span class="keyword">if</span> Massif can stop looking <span class="keyword">through</span> <span class="keyword">the</span> stack trace</span><br><span class="line">           entries <span class="keyword">as</span> soon <span class="keyword">as</span> <span class="keyword">it</span> finds one <span class="keyword">that</span> doesn't match rather than having <span class="keyword">to</span> <span class="keyword">continue</span> <span class="keyword">through</span> all <span class="keyword">the</span> entries.</span><br><span class="line"></span><br><span class="line">           Note <span class="keyword">that</span> C++ names are demangled. Note also <span class="keyword">that</span> overloaded C++ names must be written <span class="keyword">in</span> full. Single quotes may be necessary <span class="keyword">to</span> prevent <span class="keyword">the</span> shell <span class="keyword">from</span> breaking them up. For</span><br><span class="line">           example:</span><br><span class="line"></span><br><span class="line">               <span class="comment">--alloc-fn='operator new(unsigned, std::nothrow_t const&amp;)'</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">--ignore-fn=&lt;name&gt;</span></span><br><span class="line">           Any direct heap allocation (i.e. a call <span class="keyword">to</span> malloc, new, etc, <span class="keyword">or</span> a call <span class="keyword">to</span> a function named <span class="keyword">by</span> an <span class="comment">--alloc-fn option) that occurs in a function specified by this option will be</span></span><br><span class="line">           ignored. This <span class="keyword">is</span> mostly useful <span class="keyword">for</span> testing purposes. This option can be specified multiple <span class="keyword">times</span> <span class="keyword">on</span> <span class="keyword">the</span> command line, <span class="keyword">to</span> <span class="built_in">name</span> multiple functions.</span><br><span class="line"></span><br><span class="line">           Any realloc <span class="keyword">of</span> an ignored block will also be ignored, even <span class="keyword">if</span> <span class="keyword">the</span> realloc call <span class="keyword">does</span> <span class="keyword">not</span> occur <span class="keyword">in</span> an ignored function. This avoids <span class="keyword">the</span> possibility <span class="keyword">of</span> negative heap sizes <span class="keyword">if</span></span><br><span class="line">           ignored blocks are shrunk <span class="keyword">with</span> realloc.</span><br><span class="line"></span><br><span class="line">           The rules <span class="keyword">for</span> writing C++ function names are <span class="keyword">the</span> same <span class="keyword">as</span> <span class="keyword">for</span> <span class="comment">--alloc-fn above.</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">--threshold=&lt;m.n&gt; [default: 1.0]</span></span><br><span class="line">           The significance threshold <span class="keyword">for</span> heap allocations, <span class="keyword">as</span> a percentage <span class="keyword">of</span> total memory size. Allocation tree entries <span class="keyword">that</span> account <span class="keyword">for</span> <span class="keyword">less than</span> this will be aggregated. Note <span class="keyword">that</span></span><br><span class="line">           this should be specified <span class="keyword">in</span> tandem <span class="keyword">with</span> ms_print's option <span class="keyword">of</span> <span class="keyword">the</span> same <span class="built_in">name</span>.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--peak-inaccuracy=&lt;m.n&gt; [default: 1.0]</span></span><br><span class="line">           Massif <span class="keyword">does</span> <span class="keyword">not</span> necessarily <span class="built_in">record</span> <span class="keyword">the</span> actual <span class="keyword">global</span> memory allocation peak; <span class="keyword">by</span> default <span class="keyword">it</span> records a peak only when <span class="keyword">the</span> <span class="keyword">global</span> memory allocation size exceeds <span class="keyword">the</span> previous peak</span><br><span class="line">           <span class="keyword">by</span> <span class="keyword">at</span> least <span class="number">1.0</span>%. This <span class="keyword">is</span> because there can be many <span class="keyword">local</span> allocation peaks along <span class="keyword">the</span> way, <span class="keyword">and</span> doing a detailed snapshot <span class="keyword">for</span> <span class="keyword">every</span> one would be expensive <span class="keyword">and</span> wasteful, <span class="keyword">as</span> all</span><br><span class="line">           <span class="keyword">but</span> one <span class="keyword">of</span> them will be later discarded. This inaccuracy can be changed (even <span class="keyword">to</span> <span class="number">0.0</span>%) via this option, <span class="keyword">but</span> Massif will <span class="built_in">run</span> drastically slower <span class="keyword">as</span> <span class="keyword">the</span> <span class="built_in">number</span> approaches zero.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--time-unit=&lt;i|ms|B&gt; [default: i]</span></span><br><span class="line">           The <span class="built_in">time</span> unit used <span class="keyword">for</span> <span class="keyword">the</span> profiling. There are three possibilities: instructions executed (i), which <span class="keyword">is</span> good <span class="keyword">for</span> most cases; <span class="built_in">real</span> (wallclock) <span class="built_in">time</span> (ms, i.e. milliseconds),</span><br><span class="line">           which <span class="keyword">is</span> sometimes useful; <span class="keyword">and</span> bytes allocated/deallocated <span class="keyword">on</span> <span class="keyword">the</span> heap <span class="keyword">and</span>/<span class="keyword">or</span> stack (B), which <span class="keyword">is</span> useful <span class="keyword">for</span> very short-<span class="built_in">run</span> programs, <span class="keyword">and</span> <span class="keyword">for</span> testing purposes, because <span class="keyword">it</span> <span class="keyword">is</span></span><br><span class="line">           <span class="keyword">the</span> most reproducible across different machines.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--detailed-freq=&lt;n&gt; [default: 10]</span></span><br><span class="line">           Frequency <span class="keyword">of</span> detailed snapshots. With <span class="comment">--detailed-freq=1, every snapshot is detailed.</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">--max-snapshots=&lt;n&gt; [default: 100]</span></span><br><span class="line">           The maximum <span class="built_in">number</span> <span class="keyword">of</span> snapshots recorded. If <span class="keyword">set</span> <span class="keyword">to</span> N, <span class="keyword">for</span> all programs except very short-<span class="built_in">running</span> ones, <span class="keyword">the</span> final <span class="built_in">number</span> <span class="keyword">of</span> snapshots will be <span class="keyword">between</span> N/<span class="number">2</span> <span class="keyword">and</span> N.</span><br><span class="line"></span><br><span class="line">       <span class="comment">--massif-out-file=&lt;file&gt; [default: massif.out.%p]</span></span><br><span class="line">           Write <span class="keyword">the</span> profile data <span class="keyword">to</span> <span class="built_in">file</span> rather than <span class="keyword">to</span> <span class="keyword">the</span> default output <span class="built_in">file</span>, massif.out.&lt;pid&gt;. The %p <span class="keyword">and</span> %q format specifiers can be used <span class="keyword">to</span> embed <span class="keyword">the</span> process ID <span class="keyword">and</span>/<span class="keyword">or</span> <span class="keyword">the</span></span><br><span class="line">           <span class="built_in">contents</span> <span class="keyword">of</span> an environment variable <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">name</span>, <span class="keyword">as</span> <span class="keyword">is</span> <span class="keyword">the</span> case <span class="keyword">for</span> <span class="keyword">the</span> core option <span class="comment">--log-file.</span></span><br></pre></td></tr></table></figure><p>对其中几个常用的选项做一个说明：</p><a id="more"></a><ul><li><strong>–stacks</strong>: 栈内存的采样开关，默认关闭。打开后，会针对栈上的内存也进行采样，会使 massif 性能变慢；</li><li><strong>–time-unit</strong>：指定用来分析的时间单位。这个选项三个有效值：执行的指令（i），即默认值，用于大多数情况；即时（ms，单位毫秒），可用于某些特定事务；以及在堆（/或者）栈中分配/取消分配的字节（B），用于很少运行的程序，且用于测试目的，因为它最容易在不同机器中重现。这个选项在使用 ms_print 输出结果画图是游泳</li><li><strong>–detailed-freq</strong>: 针对详细内存快照的频率，默认是 10， 即每 10 个快照会有采集一个详细的内存快照</li><li><strong>–massif-out-file</strong>： 采样结束后，生成的采样文件（后续可以使用 ms_print 或者 massif-visualizer 进行分析）</li></ul><h1 id="开始采集"><a href="#开始采集" class="headerlink" title="开始采集"></a>开始采集</h1><p>经过上面的了解，接下来可以开始内存数据采集了，假设我们需要采集的二进制程序名为 xprogram:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valgrind -v <span class="attribute">--tool</span>=massif <span class="attribute">--time-unit</span>=B <span class="attribute">--detailed-freq</span>=1 <span class="attribute">--massif-out-file</span>=./massif.out  ./xprogram someargs</span><br></pre></td></tr></table></figure><p>运行一段时间后，采集到足够多的内存数据之后，我们需要停止程序，让它生成采集的数据文件，使用 kill 命令让 valgrind 程序退出。</p><blockquote><blockquote><p>attention: <strong>这里禁止使用  kill -9 模式去杀进程，不然不会产生采样文件</strong></p></blockquote></blockquote><h1 id="ms-print-分析采样文件"><a href="#ms-print-分析采样文件" class="headerlink" title="ms_print 分析采样文件"></a>ms_print 分析采样文件</h1><p>ms_print 是用来分析 massif 采样得到的内存数据文件的，使用命令为：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ms_print ./massif.<span class="keyword">out</span></span><br></pre></td></tr></table></figure><p>或者把输出保存到文件：</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ms_print ./massif.<span class="keyword">out</span> &gt; massif.<span class="literal">result</span></span><br></pre></td></tr></table></figure><p>打开 massif.result 看看长啥样：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"><span class="symbol">Command:</span>            ./xprogram someargs</span><br><span class="line">Massif <span class="symbol">arguments:</span>   --time-unit=B --massif-out-file=./massif.out</span><br><span class="line">ms_print <span class="symbol">arguments:</span> massif.out</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    GB</span><br><span class="line"><span class="number">1.279</span>^                                                                       <span class="comment">#</span></span><br><span class="line">     |                                                                       <span class="comment">#</span></span><br><span class="line">     |                                                                   @  @<span class="comment">#</span></span><br><span class="line">     |                                                                   @::@<span class="comment">#</span></span><br><span class="line">     |                                                                 @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                                                            @::  @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                                                      : ::::@: ::@<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                                             @ @@@@ :::::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                                          :  @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                                     @  ::::<span class="symbol">:</span>@<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                               @@::<span class="symbol">:</span>@@::: :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                            ::<span class="symbol">:</span>@ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                    :: @@::::: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |                 :::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |          @  :::::::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |        ::@::: : :::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |      ::::@: : : :::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |     :: ::@: : : :::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     |   @@:: ::@: : : :::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">     | ::@ :: ::@: : : :::: <span class="symbol">:</span>@ :: :: @ : <span class="symbol">:</span>@@: : :: @<span class="symbol">:</span>@ @ @: :::: <span class="symbol">:</span>@: : @<span class="symbol">:</span>@: @<span class="comment">#</span></span><br><span class="line">   0 +-----------------------------------------------------------------------&gt;GB</span><br><span class="line">     0                                                                   <span class="number">813.9</span></span><br><span class="line"></span><br><span class="line">Number of <span class="symbol">snapshots:</span> <span class="number">68</span></span><br><span class="line"> Detailed <span class="symbol">snapshots:</span> [<span class="number">2</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">46</span>, <span class="number">48</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span> (peak)]</span><br></pre></td></tr></table></figure><p>这张图大概意思就表示<strong>堆内存的分配量随着采样时间的变化</strong>。从上图可以看到堆内存一直在增长，可能存在一些内存泄露等问题。</p><p>往下看还能看到内存的分配栈：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">0</span>              <span class="number">0</span>                <span class="number">0</span>                <span class="number">0</span>             <span class="number">0</span>            <span class="number">0</span></span><br><span class="line">  <span class="number">1</span> <span class="number">20</span>,<span class="number">021</span>,<span class="number">463</span>,<span class="number">688</span>      <span class="number">133</span>,<span class="number">278</span>,<span class="number">776</span>      <span class="number">124</span>,<span class="number">687</span>,<span class="number">612</span>     <span class="number">8</span>,<span class="number">591</span>,<span class="number">164</span>            <span class="number">0</span></span><br><span class="line">  <span class="number">2</span> <span class="number">45</span>,<span class="number">201</span>,<span class="number">848</span>,<span class="number">936</span>      <span class="number">204</span>,<span class="number">228</span>,<span class="number">232</span>      <span class="number">191</span>,<span class="number">089</span>,<span class="number">596</span>    <span class="number">13</span>,<span class="number">138</span>,<span class="number">636</span>            <span class="number">0</span></span><br><span class="line"><span class="number">93.57</span>% (<span class="number">191</span>,<span class="number">089</span>,<span class="number">596</span>B) (heap allocation functions) malloc<span class="regexp">/new/</span><span class="keyword">new</span>[], --alloc-fns, etc.</span><br><span class="line">-&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xF088E6</span>: <span class="string">rocksdb:</span>:<span class="string">Arena:</span>:AllocateNewBlock(unsigned <span class="keyword">long</span>) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">| -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xF08500</span>: <span class="string">rocksdb:</span>:<span class="string">Arena:</span>:AllocateFallback(unsigned <span class="keyword">long</span>, bool) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|   -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xF0886C</span>: <span class="string">rocksdb:</span>:<span class="string">Arena:</span>:AllocateAligned(unsigned <span class="keyword">long</span>, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:Logger*) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xDE62BC</span>: <span class="string">rocksdb:</span>:<span class="string">ConcurrentArena:</span>:AllocateAligned(unsigned <span class="keyword">long</span>, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:Logger*)::&#123;lambda()</span><br><span class="line">|     | -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xDE7D9A</span>: <span class="keyword">char</span>* <span class="string">rocksdb:</span>:<span class="string">ConcurrentArena:</span>:AllocateImpl&lt;<span class="string">rocksdb:</span>:<span class="string">ConcurrentArena:</span>:AllocateAligned(unsigned <span class="keyword">long</span>, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:Logger*)::&#123;lambda()</span><br><span class="line">|     |   -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xDE6371</span>: <span class="string">rocksdb:</span>:<span class="string">ConcurrentArena:</span>:AllocateAligned(unsigned <span class="keyword">long</span>, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:Logger*) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |     -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE6FAB0</span>: <span class="string">rocksdb:</span>:InlineSkipList&lt;<span class="string">rocksdb:</span>:<span class="string">MemTableRep:</span>:KeyComparator const&amp;&gt;::AllocateNode(unsigned <span class="keyword">long</span>, <span class="keyword">int</span>) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |       -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE6F472</span>: <span class="string">rocksdb:</span>:InlineSkipList&lt;<span class="string">rocksdb:</span>:<span class="string">MemTableRep:</span>:KeyComparator const&amp;&gt;::AllocateKey(unsigned <span class="keyword">long</span>) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |         -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE6E40A</span>: <span class="string">rocksdb:</span>:(anonymous namespace)::<span class="string">SkipListRep:</span>:Allocate(unsigned <span class="keyword">long</span>, <span class="keyword">char</span>**) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |           -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xDE32E3</span>: <span class="string">rocksdb:</span>:<span class="string">MemTable:</span>:Add(unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:ValueType, <span class="string">rocksdb:</span>:Slice const&amp;, <span class="string">rocksdb:</span>:Slice const&amp;, bool, <span class="string">rocksdb:</span>:MemTablePostProcessInfo*) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |             -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE5C218</span>: <span class="string">rocksdb:</span>:<span class="string">MemTableInserter:</span>:PutCFImpl(unsigned <span class="keyword">int</span>, <span class="string">rocksdb:</span>:Slice const&amp;, <span class="string">rocksdb:</span>:Slice const&amp;, <span class="string">rocksdb:</span>:ValueType) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |               -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE5C92C</span>: <span class="string">rocksdb:</span>:<span class="string">MemTableInserter:</span>:PutCF(unsigned <span class="keyword">int</span>, <span class="string">rocksdb:</span>:Slice const&amp;, <span class="string">rocksdb:</span>:Slice const&amp;) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |                 -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE570E4</span>: <span class="string">rocksdb:</span>:<span class="string">WriteBatch:</span>:Iterate(<span class="string">rocksdb:</span>:<span class="string">WriteBatch:</span>:Handler*) const (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |                   -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xE598D5</span>: <span class="string">rocksdb:</span>:<span class="string">WriteBatchInternal:</span>:InsertInto(<span class="string">rocksdb:</span>:<span class="string">WriteThread:</span>:WriteGroup&amp;, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:ColumnFamilyMemTables*, <span class="string">rocksdb:</span>:FlushScheduler*, bool, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:DB*, bool, bool, bool) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |                     -&gt;<span class="number">41.07</span>% (<span class="number">83</span>,<span class="number">886</span>,<span class="number">080</span>B) <span class="number">0xD45AD7</span>: <span class="string">rocksdb:</span>:<span class="string">DBImpl:</span>:WriteImpl(<span class="string">rocksdb:</span>:WriteOptions const&amp;, <span class="string">rocksdb:</span>:WriteBatch*, <span class="string">rocksdb:</span>:WriteCallback*, unsigned <span class="keyword">long</span>*, unsigned <span class="keyword">long</span>, bool, unsigned <span class="keyword">long</span>*, unsigned <span class="keyword">long</span>, <span class="string">rocksdb:</span>:PreReleaseCallback*) (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |                       -&gt;<span class="number">28.75</span>% (<span class="number">58</span>,<span class="number">720</span>,<span class="number">256</span>B) <span class="number">0x1013B9C</span>: <span class="string">rocksdb:</span>:<span class="string">WriteCommittedTxn:</span>:CommitWithoutPrepareInternal() (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |                       | -&gt;<span class="number">28.75</span>% (<span class="number">58</span>,<span class="number">720</span>,<span class="number">256</span>B) <span class="number">0x1013653</span>: <span class="string">rocksdb:</span>:<span class="string">PessimisticTransaction:</span>:Commit() (<span class="keyword">in</span> <span class="regexp">/chain/</span>xtopchain)</span><br><span class="line">|     |                       |   -&gt;<span class="number">28.75</span>% (<span class="number">58</span>,<span class="number">720</span>,<span class="number">256</span>B) <span class="number">0xF40E17</span>: <span class="string">rocksdb:</span>:<span class="string">PessimisticTransactionDB:</span>:Put(<span class="string">rocksdb:</span>:WriteOptions const&amp;, <span class="string">rocksdb:</span>:ColumnFamilyHandle*, rocksdb</span><br></pre></td></tr></table></figure><p>能看到内存分配的调用堆栈情况，据此可以看到哪里分配的内存较多。</p><h1 id="massif-visualizer-可视化分析采样文件"><a href="#massif-visualizer-可视化分析采样文件" class="headerlink" title="massif-visualizer 可视化分析采样文件"></a>massif-visualizer 可视化分析采样文件</h1><p>ms_print 一定程度上不够直观，所以祭出另外一个分析内存采样数据的大杀器 – <strong>massif-visualizer</strong>，它能<strong>可视化的展示内存分配随着采样时间的变化情况，并能直观的看到内存分配的排行榜</strong>。</p><p>注意： <strong>massif-visualizer 目前好像只支持 linux 环境，并且具有桌面环境的 Linux</strong>. (mac/windows 的版本我没有找到）。</p><p>故我们采用 ubuntu-20.04-lts 作为分析环境。</p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>直接在软件中心搜索 massif-visualizer，然后安装</p><h2 id="启动软件，分析数据"><a href="#启动软件，分析数据" class="headerlink" title="启动软件，分析数据"></a>启动软件，分析数据</h2><p><strong>双击 massif-visualizer 启动软件之后，打开并选中某个 massif.out 文件</strong>，或者用命令行的方式打开：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">massif-visualizer ./massif.<span class="keyword">out</span></span><br></pre></td></tr></table></figure><p>启动后，能直观的看到内存随采样时间的变化情况：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/valgrind_massif_memory_analysing/2.png" alt=""></p><p>调整上面的选项 <strong>Stacked diagrams</strong> 值后：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/valgrind_massif_memory_analysing/3.png" alt=""></p><p>鼠标悬停之后也能看到每条曲线某个 snapshot 对应的内存分配情况。</p><p>界面右边是内存调用的堆栈：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/valgrind_massif_memory_analysing/4.png" alt=""></p><p>点击界面下面的 <strong>Allocators</strong> 按钮之后，可以看到内存分配的排行榜：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/valgrind_massif_memory_analysing/5.png" alt=""></p><p>是不是很方便？</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>其实用于分析内存分配情况的利器还可以采用 <strong>google-perftools</strong>，也是采用对内存采样的方式进行采集，然后生成不同的内存采样文件，结束之后比较两个内存采样文件，就可以分析内存分配情况，同时也能展示初内存分配的函数调用栈。不过相比较于 valgrind 的 massif 插件，<strong>google-perftools 是需要代码侵入的，并且不能直观的展示内存随采样时间的变化情况</strong>。</p><p>而 massif 采样的内存数据文件，借助 massif-visualizer 工具就能直观的感受到内存分配随采样时间的变化情况。</p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#105;&#110;&#x75;&#120;&#99;&#111;&#100;&#x65;&#x32;&#x6e;&#105;&#x6b;&#105;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#x6d;">&#x6c;&#105;&#110;&#x75;&#120;&#99;&#111;&#100;&#x65;&#x32;&#x6e;&#105;&#x6b;&#105;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#x6d;</a></p></li></ul><p>2020-06-16 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Valgrind-Massif&quot;&gt;&lt;a href=&quot;#Valgrind-Massif&quot; class=&quot;headerlink&quot; title=&quot;Valgrind Massif&quot;&gt;&lt;/a&gt;Valgrind Massif&lt;/h1&gt;&lt;p&gt;valgrind 是什么，这里直接引用其他人的博客：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Valgrind是一套Linux下，开放源代码（GPL&lt;br&gt;V2）的仿真调试工具的集合。Valgrind由内核（core）以及基于内核的其他调试工具组成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;内核类似于一个框架（framework），它模拟了一个CPU环境，并提供服务给其他工具；而其他工具则类似于插件 (plug-in)，利用内核提供的服务完成各种特定的内存调试任务。&lt;/p&gt;
&lt;p&gt;Valgrind的体系结构如下图所示：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/valgrind_massif_memory_analysing/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Massif-命令行选项&quot;&gt;&lt;a href=&quot;#Massif-命令行选项&quot; class=&quot;headerlink&quot; title=&quot;Massif 命令行选项&quot;&gt;&lt;/a&gt;Massif 命令行选项&lt;/h1&gt;&lt;p&gt;关于 massif 命令行选项，可以直接查看 valgrind 的 help 信息：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MASSIF OPTIONS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--heap=&amp;lt;yes|no&amp;gt; [default: yes]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Specifies whether heap profiling should be done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--heap-admin=&amp;lt;size&amp;gt; [default: 8]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           If heap profiling &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; enabled, gives &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; administrative bytes per block &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; use. This should be an estimate &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; average, &lt;span class=&quot;keyword&quot;&gt;since&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; may vary. For example, &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           allocator used &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; glibc &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; Linux requires somewhere &lt;span class=&quot;keyword&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; bytes per block, depending &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; various factors. That allocator also requires admin &lt;span class=&quot;literal&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; freed blocks,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; Massif cannot account &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; this.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--stacks=&amp;lt;yes|no&amp;gt; [default: no]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Specifies whether stack profiling should be done. This option slows Massif down greatly, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; so &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; off &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; default. Note &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; Massif assumes &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; main stack has size zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; start-up. This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; doing otherwise accurately &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; difficult. Furthermore, starting &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; zero better indicates &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; size &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; part &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; main stack &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; a user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           program actually has control &lt;span class=&quot;keyword&quot;&gt;over&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--pages-as-heap=&amp;lt;yes|no&amp;gt; [default: no]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Tells Massif &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; profile memory &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; page level rather than &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; malloc&#39;d block level. See &lt;span class=&quot;keyword&quot;&gt;above&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; details.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--depth=&amp;lt;number&amp;gt; [default: 30]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Maximum depth &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; allocation trees recorded &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; detailed snapshots. Increasing &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; will make Massif &lt;span class=&quot;built_in&quot;&gt;run&lt;/span&gt; somewhat more slowly, use more memory, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; produce bigger output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           files.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--alloc-fn=&amp;lt;name&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Functions specified &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; this option will be treated &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; though they were a heap allocation function such &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; malloc. This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; useful &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; functions &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; are wrappers &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; malloc &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           new, which can fill up &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; allocation trees &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; uninteresting information. This option can be specified multiple &lt;span class=&quot;keyword&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; command line, &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt; multiple functions.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Note &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; named function will only be treated this way &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; top entry &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; a stack trace, &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; just &lt;span class=&quot;keyword&quot;&gt;below&lt;/span&gt; another function treated this way. For example, &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; you have a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           function malloc1 &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; wraps malloc, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; malloc2 &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; wraps malloc1, just specifying &lt;span class=&quot;comment&quot;&gt;--alloc-fn=malloc2 will have no effect. You need to specify --alloc-fn=malloc1 as well.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; a little inconvenient, &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; reason &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; checking &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; allocation functions &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; slow, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; saves a lot &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; Massif can stop looking &lt;span class=&quot;keyword&quot;&gt;through&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; stack trace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           entries &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; soon &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; finds one &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; doesn&#39;t match rather than having &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;through&lt;/span&gt; all &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; entries.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Note &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; C++ names are demangled. Note also &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; overloaded C++ names must be written &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; full. Single quotes may be necessary &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; prevent &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; shell &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; breaking them up. For&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;comment&quot;&gt;--alloc-fn=&#39;operator new(unsigned, std::nothrow_t const&amp;amp;)&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--ignore-fn=&amp;lt;name&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Any direct heap allocation (i.e. a call &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; malloc, new, etc, &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; a call &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; a function named &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; an &lt;span class=&quot;comment&quot;&gt;--alloc-fn option) that occurs in a function specified by this option will be&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           ignored. This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; mostly useful &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; testing purposes. This option can be specified multiple &lt;span class=&quot;keyword&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; command line, &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt; multiple functions.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Any realloc &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; an ignored block will also be ignored, even &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; realloc call &lt;span class=&quot;keyword&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; occur &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; an ignored function. This avoids &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; possibility &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; negative heap sizes &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           ignored blocks are shrunk &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; realloc.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           The rules &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; writing C++ function names are &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; same &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--alloc-fn above.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--threshold=&amp;lt;m.n&amp;gt; [default: 1.0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           The significance threshold &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; heap allocations, &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; a percentage &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; total memory size. Allocation tree entries &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; account &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;less than&lt;/span&gt; this will be aggregated. Note &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           this should be specified &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; tandem &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; ms_print&#39;s option &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; same &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--peak-inaccuracy=&amp;lt;m.n&amp;gt; [default: 1.0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Massif &lt;span class=&quot;keyword&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; necessarily &lt;span class=&quot;built_in&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; actual &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; memory allocation peak; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; default &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; records a peak only when &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; memory allocation size exceeds &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; previous peak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; least &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;%. This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; because there can be many &lt;span class=&quot;keyword&quot;&gt;local&lt;/span&gt; allocation peaks along &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; way, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; doing a detailed snapshot &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;every&lt;/span&gt; one would be expensive &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; wasteful, &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; one &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; them will be later discarded. This inaccuracy can be changed (even &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;%) via this option, &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; Massif will &lt;span class=&quot;built_in&quot;&gt;run&lt;/span&gt; drastically slower &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; approaches zero.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--time-unit=&amp;lt;i|ms|B&amp;gt; [default: i]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           The &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; unit used &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; profiling. There are three possibilities: instructions executed (i), which &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; good &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; most cases; &lt;span class=&quot;built_in&quot;&gt;real&lt;/span&gt; (wallclock) &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; (ms, i.e. milliseconds),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           which &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; sometimes useful; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; bytes allocated/deallocated &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; heap &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; stack (B), which &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; useful &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; very short-&lt;span class=&quot;built_in&quot;&gt;run&lt;/span&gt; programs, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; testing purposes, because &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; most reproducible across different machines.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--detailed-freq=&amp;lt;n&amp;gt; [default: 10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Frequency &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; detailed snapshots. With &lt;span class=&quot;comment&quot;&gt;--detailed-freq=1, every snapshot is detailed.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--max-snapshots=&amp;lt;n&amp;gt; [default: 100]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           The maximum &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; snapshots recorded. If &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; N, &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; all programs except very short-&lt;span class=&quot;built_in&quot;&gt;running&lt;/span&gt; ones, &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; final &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; snapshots will be &lt;span class=&quot;keyword&quot;&gt;between&lt;/span&gt; N/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; N.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;--massif-out-file=&amp;lt;file&amp;gt; [default: massif.out.%p]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Write &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; profile data &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; rather than &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; default output &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;, massif.out.&amp;lt;pid&amp;gt;. The %p &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; %q format specifiers can be used &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; embed &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; process ID &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; an environment variable &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; case &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; core option &lt;span class=&quot;comment&quot;&gt;--log-file.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;对其中几个常用的选项做一个说明：&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://rebootcat.com/categories/linux/"/>
    
    
      <category term="valgrind" scheme="https://rebootcat.com/tags/valgrind/"/>
    
      <category term="massif" scheme="https://rebootcat.com/tags/massif/"/>
    
      <category term="ubuntun" scheme="https://rebootcat.com/tags/ubuntun/"/>
    
      <category term="memory" scheme="https://rebootcat.com/tags/memory/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之其它网络攻击</title>
    <link href="https://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/"/>
    <id>https://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/</id>
    <published>2020-04-16T03:23:58.000Z</published>
    <updated>2020-04-18T16:29:28.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p><p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p><p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p><p>同系列：</p><ul><li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li><li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></li><li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li><li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a> </li><li><a href="http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/">浅谈几种区块链网络攻击以及防御方案之其它网络攻击</a> </li></ul><h1 id="异形攻击"><a href="#异形攻击" class="headerlink" title="异形攻击"></a>异形攻击</h1><p>异形攻击又称地址污染攻击，是指诱使同类链的节点之间互相发现、互联、侵入的一种攻击手法。同类链的意思是底层 P2P 网络使用了相同或者相似的 P2P 通信协议。这尤其针对比特币和以太坊系列的公链。</p><p>众所周知，最近几年区块链行业蓬勃发展，又过于浮躁。其中很多劣质公链大量 COPY 以太坊、比特币的源码，甚至不做修改，仅仅修改下名字成为一条新的公链，这就导致大量的公链的底层是相同的或者兼容的。</p><p>那么如果攻击者执行了异形攻击，就有可能导致同类链的节点之间互相缠绕在一起，影响公链节点内部的通信和路由，进而影响到交易、共识和安全。从而让攻击者有机会施行其他的攻击，比如 DDoS 攻击，网络分裂攻击。</p><p>本质上还是由于伸手党的存在，并且不加以修饰和对节点的检测造成了异形攻击。应对办法也很简单，首先是拒绝做伸手党，即便伸手党，起码也要研究下别人的代码，做点创新和原创的东西；其次加强对本公链的节点类型的检测，比如节点地址不符合的一切拒绝，通信协议不一致的一切拒绝，通信报文头特殊字段不一致的一切拒绝等等。</p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_other_attack/1.png" style="zoom:100%;margin:auto;"/><center>配图与本文无关</center><a id="more"></a><h1 id="窃听攻击"><a href="#窃听攻击" class="headerlink" title="窃听攻击"></a>窃听攻击</h1><p>这不是区块链特有的攻击手法，本质上就是流量行为分析，通过分析流量，甚至可以把 IP 和家庭地址关联起来，从而知道某笔交易时来自某一个特定的客户端或者某个人。</p><p>区块链的去中心化带来的一个好处就是匿名，或者说相对匿名，但是攻击者通过追踪某笔交易，分析流量等措施，锁定现实世界的具体某个人，然后执行一些违法犯罪的事情。</p><h1 id="交易延展性攻击"><a href="#交易延展性攻击" class="headerlink" title="交易延展性攻击"></a>交易延展性攻击</h1><p>延展性攻击者侦听P2P网络中的交易，利用交易签名算法的特征修改原交易中的input 签名, 生成拥有一样input和output的新交易，然后广播到网络中形成双花，这样原来的交易就可能有一定的概率不能被确认，在虚拟货币交易的情况下，它可以被用来进行二次存款或双重提现。</p><p>案例</p><ol><li><p>2014年8月，在线黑市Silk Road 2遭遇交易延展性攻击，部分比特币被盗，损失约260万美元</p></li><li><p>2013年11月，GHash.io矿池对赌博网站BetCoin Dice进行多次付款欺诈，实施双重支出攻击</p></li></ol><h1 id="BGP劫持攻击"><a href="#BGP劫持攻击" class="headerlink" title="BGP劫持攻击"></a>BGP劫持攻击</h1><p>边界网关协议(BGP)是因特网的关键组成部分，用于确定路由路径。BGP劫持,即利用BGP操纵因特网路由路径，最近几年中已经变得越来越频繁。 无论是网络犯罪分子还是政府,都可以利用这种技术来达到自己的目的，如误导和拦截流量等，目前在区块链网络中节点的流量一但被接管又能对整个网络造成巨大的影响，如破坏共识机制，交易等各种信息。</p><p>而对于BGP劫持攻击中，目前有安全研究者已经证明该攻击的概念可行性，从2015年11月5日至2016年11月15日通过对节点网络的分析统计目前大多数比特币节点都托管在少数特定的几个互联网服务提供商(ISPs)，而60%的比特币连接都是在这几个ISP。所以这几个ISP可以看到60%的比特币流量，所以也能够做到对目前比特币网络的流量控制权，研究者通过劫持的场景验证了至少如下两个攻击概念是可行的，同时给出了验证的代码[8]。</p><p>分割攻击</p><p>攻击者可以利用BGP劫持来讲区块链网络划分成两个或多个不相交的网络，此时的区块链会分叉为两条或多条并行链。攻击停止后，区块链会重新统一为一条链，以最长的链为主链，其他的链将被废弃，其上的交易、奖励等全部无效。</p><p>攻击场景举例：</p><p>1) 首先，攻击者发动BGP劫持，将网络分割为两部分，一个大网络、一个小网络。</p><p>2) 在小网络中，攻击者发布交易卖出自己全部的加密货币，并兑换为法币。</p><p>3) 经过小网络的“全网确认”，这笔交易生效，攻击者获得等值的法币。</p><p>4) 攻击者释放BGP劫持，大网络与小网络互通，小网络上的一切交易被大网络否定，攻击者的加密货币全部回归到账户，而交易得来的法币，依然还在攻击者手中，完成获利。</p><h1 id="路由攻击"><a href="#路由攻击" class="headerlink" title="路由攻击"></a>路由攻击</h1><p>路由攻击往往配合其他的攻击来施行，攻击者可以先利用女巫攻击或者日蚀攻击把网络分裂，然后篡改消息发送到网络当中。最终效果是影响了网络中的通信和路由。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>其实关于区块链系统的攻击方式还有很多，本系列主要偏重于网络层面的攻击。针对不同的攻击，需要采用不同的防御方案，并且很多攻击手法并非区块链特有。随着区块链的发展，黑客的攻击也不会停止，对于公链来说，还有很多挑战。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.leiphone.com/news/201805/wujKxkTTleb6kBef.html" target="_blank" rel="noopener">疯狂“搬运”币的黑客如何攻击区块链｜干货（一）</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#105;&#x6e;&#117;&#x78;&#99;&#111;&#100;&#x65;&#x32;&#x6e;&#x69;&#107;&#105;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;">&#x6c;&#105;&#x6e;&#117;&#x78;&#99;&#111;&#100;&#x65;&#x32;&#x6e;&#x69;&#107;&#105;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;</a></p></li></ul><p>2020-04-16 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。&lt;/p&gt;
&lt;p&gt;本文就谈一下目前几种区块链网络攻击，以及其防御方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同系列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之51%攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之日蚀攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之女巫攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之其它网络攻击&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;异形攻击&quot;&gt;&lt;a href=&quot;#异形攻击&quot; class=&quot;headerlink&quot; title=&quot;异形攻击&quot;&gt;&lt;/a&gt;异形攻击&lt;/h1&gt;&lt;p&gt;异形攻击又称地址污染攻击，是指诱使同类链的节点之间互相发现、互联、侵入的一种攻击手法。同类链的意思是底层 P2P 网络使用了相同或者相似的 P2P 通信协议。这尤其针对比特币和以太坊系列的公链。&lt;/p&gt;
&lt;p&gt;众所周知，最近几年区块链行业蓬勃发展，又过于浮躁。其中很多劣质公链大量 COPY 以太坊、比特币的源码，甚至不做修改，仅仅修改下名字成为一条新的公链，这就导致大量的公链的底层是相同的或者兼容的。&lt;/p&gt;
&lt;p&gt;那么如果攻击者执行了异形攻击，就有可能导致同类链的节点之间互相缠绕在一起，影响公链节点内部的通信和路由，进而影响到交易、共识和安全。从而让攻击者有机会施行其他的攻击，比如 DDoS 攻击，网络分裂攻击。&lt;/p&gt;
&lt;p&gt;本质上还是由于伸手党的存在，并且不加以修饰和对节点的检测造成了异形攻击。应对办法也很简单，首先是拒绝做伸手党，即便伸手党，起码也要研究下别人的代码，做点创新和原创的东西；其次加强对本公链的节点类型的检测，比如节点地址不符合的一切拒绝，通信协议不一致的一切拒绝，通信报文头特殊字段不一致的一切拒绝等等。&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_other_attack/1.png&quot; style=&quot;zoom:100%;margin:auto;&quot;/&gt;

&lt;center&gt;配图与本文无关&lt;/center&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://rebootcat.com/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="https://rebootcat.com/tags/blockchain/"/>
    
      <category term="attack" scheme="https://rebootcat.com/tags/attack/"/>
    
      <category term="bitcoin" scheme="https://rebootcat.com/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</title>
    <link href="https://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/"/>
    <id>https://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/</id>
    <published>2020-04-14T03:23:58.000Z</published>
    <updated>2020-04-22T14:53:25.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p><p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p><p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p><p>同系列：</p><ul><li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li><li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></li><li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li><li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a></li><li><a href="http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/">浅谈几种区块链网络攻击以及防御方案之其它网络攻击</a></li></ul><h1 id="拒绝服务攻击（Denial-of-Service-Attack"><a href="#拒绝服务攻击（Denial-of-Service-Attack" class="headerlink" title="拒绝服务攻击（Denial of Service Attack)"></a>拒绝服务攻击（Denial of Service Attack)</h1><h1 id="分布式拒绝服务攻击（Distributed-Denial-of-Service-Attack"><a href="#分布式拒绝服务攻击（Distributed-Denial-of-Service-Attack" class="headerlink" title="分布式拒绝服务攻击（Distributed Denial of Service Attack)"></a>分布式拒绝服务攻击（Distributed Denial of Service Attack)</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>信息安全的三要素——“保密性”、“完整性”和“可用性”中，拒绝服务攻击，针对的目标正是“可用性”。该攻击方式利用目标系统网络服务功能缺陷或者直接消耗其系统资源，使得该目标系统无法提供正常的服务。</p><p>拒绝服务攻击（DoS) 问题一直得不到合理的解决，目前还是世界性难题，究其原因是因为这是由于网络协议本身的安全缺陷造成的，从而拒绝服务攻击也成为了攻击者的终极手法。攻击者进行拒绝服务攻击，实际上让服务器实现两种效果：一是迫使服务器的缓冲区满，不接收新的请求；二是使用IP欺骗，迫使服务器把合法用户的连接复位，影响合法用户的连接。</p><p>而分布式拒绝服务攻击 (DDoS) 是指攻击者采用分布式攻击手法施行 DoS 攻击，通常是控制了多台机器向目标主机或者路由器发起 DoS 攻击。</p><p>针对区块链来说，攻击者通过 DDoS 攻击试图减慢网络速度，或者迫使网络停止运作。也可用于针对矿池，使矿池脱机，或者针对特定的目标主机，使其从网络离线。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_ddos_attack/11.png" alt=""></p><a id="more"></a><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>DDoS 攻击造成的危害自不必说，中心化场景下，通常针对网站或者主机施行攻击，造成网站无法访问，影响业务运作，造成巨大经济损失；</p><p>在区块链场景下，攻击者目标通常是为了一定的利益才执行这样的攻击，导致网络速度变慢，或者影响矿工挖矿，从而方便攻击者对目标下手。</p><p>DDoS 并非是区块链特有的攻击，在中心化场景下的攻击其实相对会更多。</p><h2 id="攻击形式"><a href="#攻击形式" class="headerlink" title="攻击形式"></a>攻击形式</h2><h3 id="带宽攻击"><a href="#带宽攻击" class="headerlink" title="带宽攻击"></a>带宽攻击</h3><p>带宽攻击很好理解，通过攻击使受害者节点的网络带宽耗尽，从而造成拒绝服务的效果。</p><p>区块链系统的底层构建于 P2P 网络，其中通信上广播占据了大部分通信，一次广播通常就是大于 N 倍的收包，随着网络规模的扩大，节点数量的增多，通信的压力也会很大。</p><p>攻击者通过疯狂向节点通信端口发包，或者攻击者利用软件逻辑触发系统自动的大规模通信（比如触发同步），耗尽节点的带宽，最终从网络中离线。</p><p>而一旦离线重启之后，往往又会伴随着其他的攻击，比如 日蚀攻击，详情可以参考之前的博文： <a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></p><h3 id="CC-攻击"><a href="#CC-攻击" class="headerlink" title="CC 攻击"></a>CC 攻击</h3><p>DDoS 攻击是针对 IP 的攻击，而 CC 攻击的是服务器资源。</p><blockquote><p>CC攻击全称Challenge Collapsar，中文意思是挑战黑洞，因为以前的抵抗DDoS攻击的安全设备叫黑洞，顾名思义挑战黑洞就是说黑洞拿这种攻击没办法，新一代的抗DDoS设备已经改名为ADS(Anti-DDoS System)，基本上已经可以完美的抵御CC攻击了。CC攻击的原理是通过代理服务器或者大量肉鸡模拟多个用户访问目标网站的动态页面，制造大量的后台数据库查询动作，消耗目标CPU资源，造成拒绝服务。CC不像DDoS可以用硬件防火墙来过滤攻击，CC攻击本身的请求就是正常的请求。我们都知道网站的页面有静态和动态之分，动态网页是需要与后台数据库进行交互的，比如一些论坛用户登录的时候需要去数据库查询你的等级、权限等等，当你留言的时候又需要查询权限、同步数据等等，这就消耗很多CPU资源，造成静态网页能打开，但是需要和数据库交互的动态网页打开慢或者无法打开的现象。这种攻击方式相对于前两种实现要相对复杂一些，但是防御起来要简单的多，提供服务的企业只要尽量少用动态网页并且让一些操作提供验证码就能抵御一般的CC攻击。</p><p>CC攻击的种类有三种，直接攻击，代理攻击，僵尸网络攻击，直接攻击主要针对有重要缺陷的 WEB 应用程序，一般说来是程序写的有问题的时候才会出现这种情况，比较少见。僵尸网络攻击有点类似于 DDOS 攻击了，从 WEB 应用程序层面上已经无法防御，所以代理攻击是CC 攻击者一般会操作一批代理服务器，比方说 100 个代理，然后每个代理同时发出 10 个请求，这样 WEB 服务器同时收到 1000 个并发请求的，并且在发出请求后，立刻断掉与代理的连接，避免代理返回的数据将本身的带宽堵死，而不能发动再次请求，这时 WEB 服务器会将响应这些请求的进程进行队列，数据库服务器也同样如此，这样一来，正常请求将会被排在很后被处理，就象本来你去食堂吃饭时，一般只有不到十个人在排队，今天前面却插了一千个人，那么轮到你的机会就很小很小了，这时就出现页面打开极其缓慢或者白屏。</p></blockquote><h3 id="SYN-洪泛攻击"><a href="#SYN-洪泛攻击" class="headerlink" title="SYN 洪泛攻击"></a>SYN 洪泛攻击</h3><p>SYN Flooding 攻击是指攻击者发送了大量的 TCP/SYN 包，并且以一个假的 IP 作为发送地址到达目标主机，由于 TCP 在建立连接的时候有 3 次握手，也就是建立连接需要发送 3 个包，当目标主机收到这个 SYN 建连包之后，会回复一个 SYN-ACK 包。</p><p>但是由于攻击者恶意伪造了来源 IP，那么攻击者是收不到这个 ACK 包的，但是会导致目标主机打开了一个半开放的连接，如果攻击者发动了频繁的 SYN 洪泛攻击，那么会造成目标主机 TCP 资源消耗枯竭，导致无法与正常客户端建立连接，以达到拒绝服务的效果。</p><h3 id="Land-攻击"><a href="#Land-攻击" class="headerlink" title="Land 攻击"></a>Land 攻击</h3><p>Land 攻击是 SYN 攻击的变种，攻击者此时伪造的来源 IP 就是目标主机的 IP，也就是说这个 TCP SYN 包的来源 IP  和 目的 IP 相同，都是目标主机，那么就会导致目标主机向自己发送大量的 SYN-ACK 包，从而消耗 TCP 资源，阻止正常客户端的连接建立。</p><h2 id="攻击案例"><a href="#攻击案例" class="headerlink" title="攻击案例"></a>攻击案例</h2><h3 id="GitHub-遭受史上最大规模-DDoS-攻击"><a href="#GitHub-遭受史上最大规模-DDoS-攻击" class="headerlink" title="GitHub 遭受史上最大规模 DDoS 攻击"></a>GitHub 遭受史上最大规模 DDoS 攻击</h3><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 想必大家都不陌生，全球最大的同性交友网站。在美国东部时间 2 月 28 日下午 17:28 分，几乎一瞬间收到了 1.35 Tbps 的流量访问。这是互联网有史以来规模最大、威力最大的分布式拒绝服务攻击 （DDos)。</p><p>不到十分钟，GitHub 就不得不向 CDN 服务商 Akamai 请求协助。最终 Akamai 接管了GitHub 的所有信息流，并通过其清理中心发送数据以清除和阻止恶意数据包。8 分钟后，攻击者发现没什么效果，选择了撤退，停止了攻击。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_ddos_attack/2.png" alt=""></p><p>详情可以查看 GitHub 的官方声明： <a href="https://github.blog/2018-03-01-ddos-incident-report/" target="_blank" rel="noopener">February 28th DDoS Incident Report</a></p><p>此次的 DDoS 攻击是属于中心化世界里面的一次较为著名的攻击，而且类似于这样的攻击每天都在发生。</p><p>大家可以看一下这个网站，来自卡巴斯基实验室的数据（多观看几分钟能看到 3D 攻击画面，还是挺震撼的）： <a href="https://cybermap.kaspersky.com/cn" target="_blank" rel="noopener">网络威胁实时地图</a></p><h3 id="2016-年以太坊-DDoS-攻击"><a href="#2016-年以太坊-DDoS-攻击" class="headerlink" title="2016 年以太坊 DDoS 攻击"></a>2016 年以太坊 DDoS 攻击</h3><p>2016 年以太坊发生过一次严重的 DDoS 攻击，此次攻击也被称为 “EXTCODESIZE” 攻击。</p><p>攻击者让矿工和节点需要花费很长的时间 （20 ~ 60 秒) 来处理一些区块。造成这次攻击的原因是一个 EXTCODESIZE 的操作码，它具有相当低的 gas 价格，需要节点从磁盘读取状态信息。攻击交易调用此操作码的频率大约是 50000 次每区块。这样的后果就是，网络大大放缓了，但没有共识故障或是内存超载发生。</p><p>因为此次攻击事件，很多媒体都宣告了以太坊的末日。可见在区块链世界里，DDoS 攻击的后果是比较严重的。</p><h3 id="以太坊-Fomo3D，黑客拿走-2200-万"><a href="#以太坊-Fomo3D，黑客拿走-2200-万" class="headerlink" title="以太坊 Fomo3D，黑客拿走 2200 万"></a>以太坊 Fomo3D，黑客拿走 2200 万</h3><p>Fomo3D 是以太坊上一个比较火爆的 Dapp，是一个类似于资金盘的游戏。此次攻击过程还是挺有趣的，各位可以往下看。</p><p>首先，介绍一下 Fomo3D 这个游戏的规则：</p><blockquote><p>规则1： 每个人参与游戏需要购买一个 Key</p><p>规则2： 在一轮游戏中，谁是最后一个购买 Key 的人，则可以拿走奖池中的大奖</p><p>规则3： 只要有人购买一个 Key, 游戏倒计时就会增加 30 秒</p><p>规则4： 游戏启动从 24 小时倒计时</p></blockquote><p>规则里面最吸引人的一条是，只要你是最后一个购买的人，你就是最终的大奖得主，是不是很有 Du博 的感觉？</p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_ddos_attack/3.png" style="zoom:100%;margin:auto;"/><p>所以看到规则后，你会怎么做？</p><p>正常人一般都是在倒数的最后几分钟或者几秒钟去购买 Key，这样的话自己也许是倒计时结束后最后一个购买的人。但是这个想法是大多数人的想法，我们毕竟只是普通玩家。</p><p>那么稍微高级一点的玩家呢，比如程序员，可能会写个脚本，自动化的方式来购买 Key，速度是不是比手工快多了。</p><p><strong>那么来看看黑客玩家是怎么做的</strong>？</p><p>我们都知道，购买 Key 之后，只要后面没有人再购买，你就是大奖得主，基于本文的探讨，如果你以前没有听说个这个事件的话，那么此刻你是不是已经有了一些想法？对的，没错，就是利用 DDoS 攻击，在你购买成功后，马上施行攻击，拖慢整个网络，造成矿工无法打包或者打包很慢，那么势必会影响到其他交易的正常进行。如果你比较幸运，正好导致其他正在购买 Key 的人的交易失败了，那么你就是大奖得主。</p><p>但是说起来容易，实际做起来还是不太容易操作的。因为你要能确保你购买成功后的  DDos 攻击能让后续的交易都失败，不然弄巧成拙，帮助了某个漏网之鱼，别人恰好因为你的攻击成为了最后一个购买的人。</p><p>了解以太坊的人应该听说过 gas 机制，可以理解为一个交易的手续费，而矿工通常会优先打包 gas 费用较高的交易，那么这位黑客利用自己的智能合约创建了大量的交易，并且具有高额的 gas 费用，几乎垄断了以太坊网络的所有算力，这样就造成了以太坊拥堵了接近 3 分钟，进而使其他的玩家无法打包购买 Key 的交易，从而成为大奖得主。</p><p>该黑客此前还尝试过多次这样的攻击，直至最后一次才成功。</p><p>是不是还是很有趣的？区块链公链本身具有比较致命的缺陷就是 tps 很低，单位时间处理的交易有限。后续的交易只能在排队，尤其是在网络被攻击拖慢的情况下，交易成功的时间会大大拉长。</p><h2 id="DDoS-防御方案"><a href="#DDoS-防御方案" class="headerlink" title="DDoS 防御方案"></a>DDoS 防御方案</h2><h3 id="高防服务器"><a href="#高防服务器" class="headerlink" title="高防服务器"></a>高防服务器</h3><p>高防服务器就是指能独立硬防御 50Gbps 以上的服务器，本身就能抑制一定的 DDoS 攻击。这个没什么好说的，买就是了，只是比较贵。</p><h3 id="CDN-加速"><a href="#CDN-加速" class="headerlink" title="CDN 加速"></a>CDN 加速</h3><p>CDN 本身就就有大带宽，多节点的优势，并且隐藏了真实的网站 IP。通过把流量分配到多地多节点降低攻击负载，防止源站崩溃。</p><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>防火墙能防御 DDoS 和其他的一些攻击。防火墙有软件防火墙和硬件防火墙之分。必要可以两者结合。</p><h3 id="攻击检测和溯源"><a href="#攻击检测和溯源" class="headerlink" title="攻击检测和溯源"></a>攻击检测和溯源</h3><p>通过分析攻击的方法和手段，追踪攻击的路由，检测出恶意的 IP 和路由，做好相应的屏蔽，保护主机。</p><h3 id="黑名单机制"><a href="#黑名单机制" class="headerlink" title="黑名单机制"></a>黑名单机制</h3><p>通过建立黑名单机制，限制黑名单的访问。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>DDoS 攻击每天都在发生，对于区块链系统来说，由于接入的节点性能参差不齐以及无许可的特征，想要利用中心化的防御机制去做好 DDoS 防御可能还是有难度。况且由于区块链本身的弊端，性能瓶颈，更容易被攻击者利用。</p><h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p><a href="https://bcsec.org/index/detail/tag/2/id/332" target="_blank" rel="noopener">BlockChain中DDos攻击的深入剖析</a></p><p><a href="https://www.safedog.cn/news.html?id=1550" target="_blank" rel="noopener">DDOS攻击疯狂危害大 谈谈如何防御攻击</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#x69;&#110;&#117;&#120;&#99;&#111;&#100;&#x65;&#x32;&#x6e;&#x69;&#107;&#105;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#x6c;&#x69;&#110;&#117;&#120;&#99;&#111;&#100;&#x65;&#x32;&#x6e;&#x69;&#107;&#105;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></p></li></ul><p>2020-04-14 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。&lt;/p&gt;
&lt;p&gt;本文就谈一下目前几种区块链网络攻击，以及其防御方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同系列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之51%攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之日蚀攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之女巫攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之其它网络攻击&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;拒绝服务攻击（Denial-of-Service-Attack&quot;&gt;&lt;a href=&quot;#拒绝服务攻击（Denial-of-Service-Attack&quot; class=&quot;headerlink&quot; title=&quot;拒绝服务攻击（Denial of Service Attack)&quot;&gt;&lt;/a&gt;拒绝服务攻击（Denial of Service Attack)&lt;/h1&gt;&lt;h1 id=&quot;分布式拒绝服务攻击（Distributed-Denial-of-Service-Attack&quot;&gt;&lt;a href=&quot;#分布式拒绝服务攻击（Distributed-Denial-of-Service-Attack&quot; class=&quot;headerlink&quot; title=&quot;分布式拒绝服务攻击（Distributed Denial of Service Attack)&quot;&gt;&lt;/a&gt;分布式拒绝服务攻击（Distributed Denial of Service Attack)&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;信息安全的三要素——“保密性”、“完整性”和“可用性”中，拒绝服务攻击，针对的目标正是“可用性”。该攻击方式利用目标系统网络服务功能缺陷或者直接消耗其系统资源，使得该目标系统无法提供正常的服务。&lt;/p&gt;
&lt;p&gt;拒绝服务攻击（DoS) 问题一直得不到合理的解决，目前还是世界性难题，究其原因是因为这是由于网络协议本身的安全缺陷造成的，从而拒绝服务攻击也成为了攻击者的终极手法。攻击者进行拒绝服务攻击，实际上让服务器实现两种效果：一是迫使服务器的缓冲区满，不接收新的请求；二是使用IP欺骗，迫使服务器把合法用户的连接复位，影响合法用户的连接。&lt;/p&gt;
&lt;p&gt;而分布式拒绝服务攻击 (DDoS) 是指攻击者采用分布式攻击手法施行 DoS 攻击，通常是控制了多台机器向目标主机或者路由器发起 DoS 攻击。&lt;/p&gt;
&lt;p&gt;针对区块链来说，攻击者通过 DDoS 攻击试图减慢网络速度，或者迫使网络停止运作。也可用于针对矿池，使矿池脱机，或者针对特定的目标主机，使其从网络离线。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_ddos_attack/11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://rebootcat.com/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="https://rebootcat.com/tags/blockchain/"/>
    
      <category term="attack" scheme="https://rebootcat.com/tags/attack/"/>
    
      <category term="bitcoin" scheme="https://rebootcat.com/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之女巫攻击</title>
    <link href="https://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/"/>
    <id>https://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/</id>
    <published>2020-04-13T02:23:58.000Z</published>
    <updated>2020-04-22T14:53:10.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p><p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p><p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p><p>同系列：</p><ul><li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li><li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a> </li><li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li><li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a> </li><li><a href="http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/">浅谈几种区块链网络攻击以及防御方案之其它网络攻击</a></li></ul><h1 id="女巫攻击（Sybil-Attack）"><a href="#女巫攻击（Sybil-Attack）" class="headerlink" title="女巫攻击（Sybil Attack）"></a>女巫攻击（Sybil Attack）</h1><h2 id="什么是女巫攻击"><a href="#什么是女巫攻击" class="headerlink" title="什么是女巫攻击"></a>什么是女巫攻击</h2><p>“女巫”这个词我们应该不陌生，通常指邪恶的化身，并且拥有可怕的魔法。</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_sybil_attack/1.png" alt=""></p><a id="more"></a><p>对于区块链来说，女巫攻击指攻击者将一个节点伪装成多个节点进入 P2P 网络中，在 P2P 网络中具有多重身份。通常用于恶意刷票、恶意刷排名、恶意刷信誉等网络活动，或者在一些网络活动中通过数量优势进行造假。</p><p>女巫攻击与日蚀攻击由类似的地方，但日蚀攻击的着眼点在于某一个确定的节点，而女巫攻击的着眼点在于整个网络。通过伪造身份进入网络，干扰路由，干扰信息传递等。</p><blockquote><p>关于日蚀攻击可以看这篇博文 <a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></p></blockquote><h2 id="如何防御女巫攻击"><a href="#如何防御女巫攻击" class="headerlink" title="如何防御女巫攻击"></a>如何防御女巫攻击</h2><p>女巫攻击的特点就是利用一个节点伪造多重身份信息进入网络，所以一般来说提高进入 P2P 网络的门槛就能有效避免女巫攻击。</p><h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><p>身份验证很好理解，进入这个网络的任何节点都需要做验证，验证通过才能进入网络。这就像去参加一个秘密会以，你需要邀请函才能进入。</p><p>但是如何做身份验证呢？通常有两种方式：</p><ul><li>去中心化身份认证</li><li>中心化身份认证（第三方身份认证）</li></ul><p>但基于去中心化系统的匿名性，一般不推荐采用中心化的身份认证方式。所以在进入网络之时，通常需要网络当中已经存在较长时间或者信誉较高的多数节点共同达成认证公式，才能被允许进入。</p><h3 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h3><p>进入网络是需要成本的，不能够随意的加入退出。所以可以利用类似 POW 的方式对节点入网做一定的工作量证明，提高节点准入门槛。</p><h3 id="特征向量"><a href="#特征向量" class="headerlink" title="特征向量"></a>特征向量</h3><p>在 <a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a> 一文中谈到针对日蚀攻击的防御方案，其中有一个防御方案是采用限制本地路由表中来自同一个 IP 段的节点数量。</p><p>其实这种方式是可能造成误杀的，因为并非来自同一个 IP 段的节点就可能是恶意节点。所以我们可能需要一种更加准确的方式去分析一个节点的行为，区分一个节点。</p><p>我们在做大数据的时候，往往需要通过很多特征向量来区分出是不是同一个用户，同样的在P2P网络中，我们也可以通过这种特征向量来区分这个节点是不是伪造的节点。当然这种方式不能完全避免女巫攻击，但是可以有效的减少女巫攻击。这种是有成熟产品的，像SybilGuard 和 the Advogato Trust Metric。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>女巫攻击相对来说成本是很低的，但是可能获取的收益是比较高的。通常这种攻击也会结合一些日蚀攻击，或者 DDOS 攻击进行。所以真正的区块链网络攻击，多半会结合多种攻击手段一起进行。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/superfjj/article/details/89894076?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1&utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1" target="_blank" rel="noopener">女巫攻击及其防范</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#105;&#110;&#x75;&#x78;&#x63;&#x6f;&#x64;&#x65;&#50;&#x6e;&#x69;&#107;&#105;&#x40;&#103;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#x6c;&#105;&#110;&#x75;&#x78;&#x63;&#x6f;&#x64;&#x65;&#50;&#x6e;&#x69;&#107;&#105;&#x40;&#103;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p></li></ul><p>2020-04-12 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。&lt;/p&gt;
&lt;p&gt;本文就谈一下目前几种区块链网络攻击，以及其防御方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同系列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之51%攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之日蚀攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之女巫攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之其它网络攻击&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;女巫攻击（Sybil-Attack）&quot;&gt;&lt;a href=&quot;#女巫攻击（Sybil-Attack）&quot; class=&quot;headerlink&quot; title=&quot;女巫攻击（Sybil Attack）&quot;&gt;&lt;/a&gt;女巫攻击（Sybil Attack）&lt;/h1&gt;&lt;h2 id=&quot;什么是女巫攻击&quot;&gt;&lt;a href=&quot;#什么是女巫攻击&quot; class=&quot;headerlink&quot; title=&quot;什么是女巫攻击&quot;&gt;&lt;/a&gt;什么是女巫攻击&lt;/h2&gt;&lt;p&gt;“女巫”这个词我们应该不陌生，通常指邪恶的化身，并且拥有可怕的魔法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_sybil_attack/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://rebootcat.com/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="https://rebootcat.com/tags/blockchain/"/>
    
      <category term="attack" scheme="https://rebootcat.com/tags/attack/"/>
    
      <category term="bitcoin" scheme="https://rebootcat.com/tags/bitcoin/"/>
    
      <category term="ethereum" scheme="https://rebootcat.com/tags/ethereum/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之日蚀攻击</title>
    <link href="https://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/"/>
    <id>https://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/</id>
    <published>2020-04-12T03:23:58.000Z</published>
    <updated>2020-04-22T14:52:56.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p><p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p><p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p><p>同系列：</p><ul><li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li><li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></li><li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li><li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a> </li><li><a href="http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/">浅谈几种区块链网络攻击以及防御方案之其它网络攻击</a></li></ul><h1 id="日蚀攻击（Eclipse-Attack"><a href="#日蚀攻击（Eclipse-Attack" class="headerlink" title="日蚀攻击（Eclipse Attack)"></a>日蚀攻击（Eclipse Attack)</h1><h2 id="P2P-网络"><a href="#P2P-网络" class="headerlink" title="P2P 网络"></a>P2P 网络</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在介绍什么是日蚀攻击之前，有必要先对区块链系统的底层 P2P 网络做一个简单的介绍，因为日蚀攻击就是利用了 P2P 网络的特性来进行的攻击。</p><p>P2P 即 Peer to Peer，中文意思是对等网络，它是分布式系统和计算机网络相结合的产物。对等的意思就是网络中的节点角色、地位是平等的，任何节点具有极强的自由，可以任意加入、离开网络。这跟传统的 C/S 模型的结构有很大区别，任何节点既是 client ，也是 server，或者说网络中没有 server 节点，任何节点 down 掉不会对整个网络产生致命的影响，具有极强的伸缩性。</p><p>P2P 网络从诞生到现在经过了几个阶段，分别是混合式 P2P，无结构化 P2P以及结构化 P2P。</p><ul><li>混合式：顾名思义，P2P 网络混合了传统的 C/S 模型，网络中有角色充当 server 角色</li><li>无结构化：也就是网状结构模型，纯分布式网络，典型代表就是比特币网络，节点之间以一种随机的，松散的方式组织在一起</li><li>结构化：节点按照一定规则组织在一起，路由算法比较精准，比如 DHT 算法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/2.png" alt=""></p><center>混合式</center><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/1.png" alt=""></p><center>无结构化</center>![](https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/3.png)<center>结构化(kademlia算法)</center><h3 id="路由表（邻居表）"><a href="#路由表（邻居表）" class="headerlink" title="路由表（邻居表）"></a>路由表（邻居表）</h3><p>P2P 网络里一个比较重要的概念就是路由表，或者说邻居表。路由表里面保存了网络里面的一些节点，具体数量从几个到几十个不等。路由表中的这些节点可以看做是这个节点与这个 P2P 网络建立关联的重要依据，或者说表示节点到这个 P2P 网络的一些入口。这个节点想要发送任何信息需要先转发给路由表中的节点，再由它们负责转发消息。这就是路由表的作用。</p><p>那么无论是哪一种结构的 P2P 网络，每个节点都有一个类似于路由表的概念，本质上就是跟这个网络中的多个节点建立了一些联系，然后后续的所有收发包都交由这些邻居代为收发。</p><p>所以对于 P2P 网络里的一个节点来说，它看不到网络的全貌，只能看到网络的局部信息。并且由于路由表的存在，哪怕路由表中只保存了一个入口节点，这个节点也能服务于整个 P2P 网络，其他节点也能通过一定的方式找到这个节点。</p><h3 id="NAT-穿透"><a href="#NAT-穿透" class="headerlink" title="NAT 穿透"></a>NAT 穿透</h3><p>NAT 穿透不是 P2P 网络的一个必要特性，如果 P2P 网络中都是公网节点（具有公网IP）,其实是不需要 NAT 穿透的。那么如果有一些私网节点（局域网节点）也加入到了这个 P2P 网络中，由于不能互通，导致其他节点无法发现这些私网节点，最后带来的结果就是这个私网节点能够成功发送信息到这个 P2P 网络中，但是可能却无法收到来自 P2P 网络里的消息。注意这里的用词是可能，因为存在一些场景是有可能收到的。</p><p>关于 NAT 穿透我有另外的博客介绍 NAT 穿透方面的东西，这里就不做展开讲了。</p><h2 id="什么是日蚀攻击"><a href="#什么是日蚀攻击" class="headerlink" title="什么是日蚀攻击"></a>什么是日蚀攻击</h2><p>上面介绍了关于 P2P 网络的一些知识和概念，下面开始正式介绍日蚀攻击。</p><p><strong>日蚀，同日食，是指月球运动到地球和太阳的中间，如果三者正好在一条直线上，月球就会挡住太阳射向地球的光，月球身后的黑影正好落到地球上，这时发生日食现象</strong>。月球就切断了地球和太阳之间的（太阳光）联系。<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/4.png" alt=""></p><p>再来看什么是日蚀攻击，<strong>日蚀攻击针对特定的某个节点，通过一些方法，填满被攻击节点的路由表，以便切断它们与其他对等点的所有入站/出站通信（这会有效地窒息受害者）</strong>。上面提到路由表的概念，路由表里的节点是这个 P2P 网络的入口节点，任何收发消息都要经过路由表中的节点。攻击者通过某种方式填满了被攻击的节点，理论上就是控制了这个节点进出网络的信息，造成被攻击节点被 “伪隔离”的现象。</p><p>我觉得用日蚀来形象化的比喻这种攻击还是很合适的，本质上就是隔离了这个节点或者说用恶意节点包围了受害节点。</p><p>那么会造成什么后果呢？</p><ul><li><strong>阻止受害节点查看真实的区块链信息</strong></li><li><strong>隔离网络中多个节点，以达到分裂网络的可能</strong></li><li><strong>用少于 51% 的算力发起 51% 攻击</strong></li></ul><p>上面的几点其实比较好理解的，受害节点被恶意节点包围之后，恶意节点可以选择性的给受害节点发包或者篡改真实的数据包，本质上就是让这个节点误以为自己还在这个网络中挖矿，然而真实情况是它已经从网络中隔离开来了。</p><p>如果受害节点很多的情况，从整个网络全局来看就是被隔离成多个部分，网络实际上已经被分裂了。那么就可以实施分裂网络的 51%攻击，只需要用比原来 51%攻击更少的算力就行。</p><p>关于 51%攻击可以查看这篇博文 <a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/">浅谈几种区块链网络攻击以及防御方案之51%攻击</a>。</p><h2 id="如何发起日蚀攻击"><a href="#如何发起日蚀攻击" class="headerlink" title="如何发起日蚀攻击"></a>如何发起日蚀攻击</h2><p>由于每种区块链底层的 P2P 网络模型可能不一样，所以就以以太坊为例来做说明。</p><h3 id="以太坊-kademlia网络原理"><a href="#以太坊-kademlia网络原理" class="headerlink" title="以太坊 kademlia网络原理"></a>以太坊 kademlia网络原理</h3><p>以太坊底层的 P2P 网络采用的是 kademlia 算法，kademlia 网络是一种结构化的 P2P 网络，网络中的节点按照一定的规则组织在一起。</p><p><strong>kademlia 算法中的核心特点是用异或来定义两个节点的距离，这种距离与实际的物理距离没有任何关系</strong>。</p><p>每个节点的路由表会保存不同距离的节点，这个距离的最小值当然是 0，也就是它自己，这个距离的最大值跟节点 ID 的长度有关系（NodeID）。NodeID 是一段具有特定长度的字符串，每个节点具有唯一的 NodeID，用 NodeID 来作为这个节点在 P2P 网络中的身份信息。比如：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">NodeID:</span>   DEA25B0AF6CC5EA9DA4961DBC5FFEB97</span><br></pre></td></tr></table></figure><p>假设 NodeID 长度为 N bit(对于上面的 NodeID 来说 N 为 32 * 8 = 256），那么这个距离的最大值就是 N -1，即距离范围在 [0, N)。</p><p>kademlia 网络中的节点的路由表中会保存每一个距离的节点，数量在 1 个以上，这个值称为为 α 值。也就是说与自己的 NodeID 距离为 1 的会保存 α 个，距离为 2 的会保存 α 个，以此类推，直到距离为 N-1 的节点会保存 α 个。<strong>实际情况是距离越大，能找到符合要求的节点的概率也就越大</strong>，想一想为什么？</p><p>这里每一个距离称为一个 Bucket，每一个 Bucket 里保存着 [0, α] 个距离匹配的节点。</p><p>通过上述对 kademlia 算法的简要描述可以得出一个结论，<strong>知道一个节点的 NodeID，就能够计算出这个节点的路由表中的每一个 Bucket 中应该填入什么样的 NodeID</strong>。而这就是日蚀攻击的核心依据。</p><h3 id="发起日蚀攻击"><a href="#发起日蚀攻击" class="headerlink" title="发起日蚀攻击"></a>发起日蚀攻击</h3><p>当我们知道目标节点的 NodeID 之后，就可以通过一定的方式去伪造生成满足不同 Bucket 的 NodeID，当这个目标节点重启之后，马上以这些 NodeID 启动节点去连接目标节点，由于 kademlia 的特性，这些特意伪造的 NodeID 肯定会被填入目标节点的路由表中，从而把路由表占满，以达到日蚀攻击的目的。</p><p>至于让目标节点重启，可以等待目标节点自动重启或者采用 DOS 攻击迫使目标节点重启，当重启之后马上进行上面的操作就可以完成日蚀攻击。</p><p>当成功发起日蚀攻击之后，随后就能隔离节点，篡改目标节点的收发数据包了。</p><h2 id="如何防御日蚀攻击"><a href="#如何防御日蚀攻击" class="headerlink" title="如何防御日蚀攻击"></a>如何防御日蚀攻击</h2><p>根据上述的讨论知道，想要避免日蚀攻击由很多种办法：（可能只适用于 kademlia 网络）</p><ul><li>提高节点进入网络的准入门槛</li></ul><p>节点进入 P2P 网络需要一定的门槛，不论是以时间为代价还是以 Stake 或是工作证明为代价，这样就能有效防止大批量伪造节点进入网络，从而从源头上避免日蚀攻击</p><ul><li>针对同一个 IP 段的节点做连接限制</li></ul><p>攻击者很可能利用有限的 IP （1 ~ 2 个）伪造大量节点，发起日蚀攻击，那么对于目标节点来说，看到的节点都是来自于这个 IP，多半可以说明这是恶意节点。那么只需要对来自同一个 IP 段的节点做一定数量的限制，比如 最多 2 个，那么也能显著提高攻击者的攻击成本</p><ul><li>对节点主动建立连接和被动建立连接的数量做一定的均衡</li></ul><p>发起日蚀攻击，需要主动占满目标节点的路由表，也就是主动与目标节点建立连接，即便不是这样，也有方法让目标节点主动建立连接到恶意节点。所以对于进出的连接数，做一定的均衡能有效避免日蚀攻击的发生</p><ul><li>NodeID 重启之后变化</li></ul><p>进行日蚀攻击的前提是需要知道目标节点的 NodeID，并且迫使目标节点重启，然后以事先根据目标节点 NodeID 计算好的伪造节点发起连接，达成日蚀攻击。所以如果节点重启之后 NodeID 变为与原来不再一致，那么攻击者事先计算伪造的节点就变得毫无可用之地了。</p><ul><li>其他辅助措施</li></ul><p>比如节点实时检测，发现恶意节点进行广播，并采取一定的惩罚措施等。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>最后我们再来简单对比一下比特币和以太坊对日蚀攻击的反应。</p><p>由于以太坊采用的是结构化的 P2P 网络，并且采用了 kademlia 算法，那么知道了 NodeID，基本上就大致能知道这个路由表中应该填入一些什么类型的节点；</p><p>而对于比特币来说，由于比特币的 P2P 网络采用的是无结构的模型，节点之间以随机，松散的方式进行组织。想要通过类似以太坊日蚀攻击的方法去攻击比特币网络，不太行得通，因为比特币节点不关心你的 NodeID。但是还是有办法迫使比特币节点只与恶意节点建立连接的。</p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#105;&#x6e;&#x75;&#120;&#99;&#111;&#100;&#x65;&#50;&#110;&#105;&#x6b;&#105;&#x40;&#x67;&#109;&#97;&#105;&#x6c;&#46;&#99;&#111;&#109;">&#108;&#105;&#x6e;&#x75;&#120;&#99;&#111;&#100;&#x65;&#50;&#110;&#105;&#x6b;&#105;&#x40;&#x67;&#109;&#97;&#105;&#x6c;&#46;&#99;&#111;&#109;</a></p></li></ul><p>2020-04-12 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。&lt;/p&gt;
&lt;p&gt;本文就谈一下目前几种区块链网络攻击，以及其防御方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同系列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之51%攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之日蚀攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之女巫攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之其它网络攻击&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;日蚀攻击（Eclipse-Attack&quot;&gt;&lt;a href=&quot;#日蚀攻击（Eclipse-Attack&quot; class=&quot;headerlink&quot; title=&quot;日蚀攻击（Eclipse Attack)&quot;&gt;&lt;/a&gt;日蚀攻击（Eclipse Attack)&lt;/h1&gt;&lt;h2 id=&quot;P2P-网络&quot;&gt;&lt;a href=&quot;#P2P-网络&quot; class=&quot;headerlink&quot; title=&quot;P2P 网络&quot;&gt;&lt;/a&gt;P2P 网络&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;在介绍什么是日蚀攻击之前，有必要先对区块链系统的底层 P2P 网络做一个简单的介绍，因为日蚀攻击就是利用了 P2P 网络的特性来进行的攻击。&lt;/p&gt;
&lt;p&gt;P2P 即 Peer to Peer，中文意思是对等网络，它是分布式系统和计算机网络相结合的产物。对等的意思就是网络中的节点角色、地位是平等的，任何节点具有极强的自由，可以任意加入、离开网络。这跟传统的 C/S 模型的结构有很大区别，任何节点既是 client ，也是 server，或者说网络中没有 server 节点，任何节点 down 掉不会对整个网络产生致命的影响，具有极强的伸缩性。&lt;/p&gt;
&lt;p&gt;P2P 网络从诞生到现在经过了几个阶段，分别是混合式 P2P，无结构化 P2P以及结构化 P2P。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;混合式：顾名思义，P2P 网络混合了传统的 C/S 模型，网络中有角色充当 server 角色&lt;/li&gt;
&lt;li&gt;无结构化：也就是网状结构模型，纯分布式网络，典型代表就是比特币网络，节点之间以一种随机的，松散的方式组织在一起&lt;/li&gt;
&lt;li&gt;结构化：节点按照一定规则组织在一起，路由算法比较精准，比如 DHT 算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center&gt;混合式&lt;/center&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://rebootcat.com/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="https://rebootcat.com/tags/blockchain/"/>
    
      <category term="attack" scheme="https://rebootcat.com/tags/attack/"/>
    
      <category term="bitcoin" scheme="https://rebootcat.com/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之51&amp;#37攻击</title>
    <link href="https://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/"/>
    <id>https://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/</id>
    <published>2020-04-11T03:23:58.000Z</published>
    <updated>2020-04-22T14:52:46.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p><p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p><p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p><p>同系列：</p><ul><li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li><li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></li><li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li><li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a> </li><li><a href="http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/">浅谈几种区块链网络攻击以及防御方案之其它网络攻击</a></li></ul><h1 id="51-攻击"><a href="#51-攻击" class="headerlink" title="51%攻击"></a>51%攻击</h1><p>在了解什么是 51%攻击前，先简单科普下区块链的几个概念，这里主要以比特币为例作说明。</p><h2 id="什么是挖矿？"><a href="#什么是挖矿？" class="headerlink" title="什么是挖矿？"></a>什么是挖矿？</h2><p>其实挖矿这个词描述得有点太过于形象了，以至于弄得反而很生涩。当然区块链世界里还有很多玩概念的东西，背后道理其实反而没那么复杂。</p><p>在比特币网络里，大家共同在维护一张账目表，参与记账的节点可以称之为矿工，其中矿工需要做的事情就是拼命竞争记账的权利，这个竞争记账权的过程可以称之为挖矿，当一个节点得到这个记账权之后，可以描述为这个节点挖到矿了。那么节点为什么会拼命的竞争这个记账权呢？因为比特币会对挖到矿的节点有奖励。这个奖励是基于区块高度的，最开始是每个区块奖励 50btc，每产生 210000 个区块为一个减半间隔，减半间隔之后奖励会减半。比如目前（2020.04）区块奖励是 12.5btc。</p><p>上面这段话里面有两个点需要解释：</p><ol><li><strong>为什么节点要竞争这个记账权</strong>？</li><li><strong>区块高度又是什么</strong>？</li></ol><p>针对第一个问题，如果用比较白话的方式讲的话就是，在分布式去信任的系统中，由于有激励的存在，大家都想拿到这个记账权，但是这个记账权在同一时刻（这里用词不一定表示某一刻，更多的形容相对的同一时刻）只允许其中一个节点拿到，并且由这个节点对交易进行记录。这样才能保证这张账本是唯一的，大家看到的是一样的账本。不然大家都来记账的话，这张账本就乱了，这就是称之为 ”共识“ 的由来。</p><p>针对第二个问题，很好理解，区块高度或者说时钟高度，其实是用来描述一个区块的序号的，从创世区块 0 开始依次递增。不用过分纠结，本身是一个很简单的东西，或者叫区块序号更容易理解【手动滑稽】,可以看一下下图：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/1.png" alt=""></p><a id="more"></a><p>我们打开 <a href="https://btc.com/" target="_blank" rel="noopener">BTC.com</a>, 可以看到比特币网络的一些信息，比如区块高度，目前最新的已经到了 625408，区块奖励是 12.57869736btc。我们选择一个区块高度（比如 625400), 可以看到这个区块的信息：<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/2.png" alt=""></p><p>可以看到这个区块高度是 625400, 这个区块里有 243 笔交易，确认数是 9等。这里需要重点关注一下 <strong>确认数</strong> 这个概念，后面会用到这个概念。</p><h2 id="共识"><a href="#共识" class="headerlink" title="共识"></a>共识</h2><p>上面提到比特币网络里参与记账的节点竞争记账权的过程称为挖矿，那么除了上面抛出来的两个问题之外，还有一个问题没有解决。</p><p>那就是<strong>节点通过什么方式竞争，怎么竞争</strong>？</p><p>竞争的方式就称之为共识，描述分布式去中心化的系统中大家通过共识算法达成统一某个行为或是认知的这种行为，即大家达成了共识，本次由 A 节点进行记账，下次由 B 节点进行记账。</p><p>共识算法应该能保证大家能在一定时间内形成共识，同时兼具安全性以及公平性。这样的话参与记账的节点才能有机会获得奖励，才能鼓励大家参与这个网络。</p><p>对于比特币来说，采用的是 POW 作为共识算法，即 Proof Of Work（工作量证明）。工作量证明算法是一种应对拒绝服务攻击和其他服务滥用的经济对策。它要求发起者进行一定量的耗时适当的复杂运算，并且这个结果能够快速被其他节点进行验证。</p><p>比特币节点需要计算一个 hash，具体过程是对一个随机数加上交易数据做 hash，然后穷举这个随机数，使得 hash 之后的值能满足一定的条件，比如前缀是 ‘0000’。谁先计算出来，谁就在本次记账权的竞争中胜出，然后对交易打包，广播区块，获得区块奖励。显然这里的穷举需要耗费大量的算力，并且计算满足条件的  hash 值不是一件容易的事，基本上可以保证很难有在同一时刻（相对同一时刻）两个或者多个节点都找到了这个满足条件的 hash 值，这也就保证了共识的稳定性。</p><p>到这里基本上可以明白一个道理，<strong>谁拥有越多的算力，谁得到这个记账权的概率就越大，获得的奖励就会越多</strong>。</p><h2 id="最长链原则"><a href="#最长链原则" class="headerlink" title="最长链原则"></a>最长链原则</h2><p>区块链世界中有很多概念还是很不好理解的，慢慢来，比如这个最长链原则。</p><p>在分布式去中心化的系统中，由于网络传输的延迟或者网络故障等不可预知的一些因素，会导致大家收到的交易或者数据是不一致的。在几轮记账之后，势必会出现一些节点看到的区块链和其他节点看到的区块链不一致。</p><p>由于大家看到的区块链不一致，也就是有长有短的区块链。比特币规定任何矿工在看到更长的区块链的时候，应该立即停止短的区块链上的挖矿，大家共同围绕这最长的这条链进行挖矿。</p><p>如果不了解区块链原理的同学可能会一头雾水，是的，这里的概念还是比较难理解的。下面举一个例子作为说明：</p><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/3.png" alt=""></p><p>上图可以看到在区块2 之后分叉了，变成了两条链，区块链网络中的一部分节点看到的链是上面这条区块链，另外一部分看到的是下面这条区块链。</p><p><strong>矿工在挖矿的时候，或者说节点在做记账权竞争的时候，需要计算 hash，这里会用到最后一个区块的信息，当挖到区块的时候，新产生的区块里会记录上一个区块的一些信息，这样就把整个区块就串起来了，形成一条链</strong>。</p><p>假设 A 节点看到的是上面一条链，并且基于这条链进行挖矿，在挖矿的过程中收到了下面一条链的区块7 的数据包，校验发现这个区块的高度相比自己的区块6’ 更高，也就是说收到了一条新的更长的区块链，那么诚实的矿工应该马上停止正在进行的基于区块6‘ 的挖矿，转而基于区块7 进行挖矿。一定时间之后上面这条链就废弃了，网络中没有任何节点会保存这条链的信息，大家看到的都是一条最长的区块链。</p><p>设想一下，如果 A 节点仍然基于区块6’ 进行挖矿，那么即便挖到了区块，收到的奖励最后也会无效。</p><p>这里可能会有人有疑惑，为什么要制定这个最长链原则？大家为什么又要遵守这个规则？从安全角度讲，最长链原则更安全，更难推翻重写；从其他角度讲，这个规则就是区块链世界里的公理，而公理就是指对一些基本的假定，比特币就是这么规定的，不用过分纠结。</p><p>细心的同学可能会注意到上面的一个问题，A 节点放弃自己的链，那么这条链从区块3‘ 开始到区块6’ 里面的数据是不是都无效了？里面的交易呢？</p><p><strong>答案是的，里面的交易都无效了，因为一个区块是对一堆交易的打包，而对于同一笔交易来说，转账发起方会把这笔交易广播给所有人，也就是对于一笔交易来说，每个矿工都可能会收到这条交易并且放到自己的交易池。那么针对作废的区块3‘ 到区块6’ 里面的交易，虽然在这条链上无效了，但是这些交易也会被其他节点看到，说不定已经被其他节点挖到区块并且记录到下面这条区块链里了</strong>。所以针对某笔交易来说，并没有丢失。</p><h2 id="何为51-攻击"><a href="#何为51-攻击" class="headerlink" title="何为51%攻击"></a>何为51%攻击</h2><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/4.png" alt=""><br>在通过上述文章的讲解之后，明白了 ”挖矿“ 的概念，”共识“ 的概念以及 ”最长链原则“ 的概念。接下来可以正式开始介绍 51% 攻击了。</p><p>51% 攻击是指如果攻击者拥有全网 51% 的算力，那么他就能够利用算力优势搞一些动作。<strong>这里的 51% 是一个概称，实际上运气好的话可能不需要这么多的算力就能发动 51%攻击，比如 45%算力就有成功的可能性</strong>。</p><p>那么我们来探讨下攻击者会利用 51%攻击做什么事？</p><h3 id="双花攻击或者做空比特币"><a href="#双花攻击或者做空比特币" class="headerlink" title="双花攻击或者做空比特币"></a>双花攻击或者做空比特币</h3><p>攻击者拥有全网超过 51% 算力之后，首先是成功挖矿的概率增大了，由于成功挖矿的概率增大，那么攻击者就能够对挖到的区块进行修改。假设攻击者是理性的，为了利益考虑，那么他会修改区块中关于自己的交易记录，以便双重支付，区块中其他的交易，由于没有发起者的签名，攻击者是不能够去修改的，也就是说攻击者没法做到把别人的币转给自己。</p><p>具体做法就是把自己的币转到交易所，卖出后出金提现，然后利用 51% 攻击去修改这笔交易，转到自己的另外一个钱包地址中，由于有算力优势，并且遵循最长链原则，那么之前转到交易所的交易记录被认为是无效的，区块链中记录的是后面这笔交易。也就是同一笔钱花了两次，最终损失的是交易所。这里不一定是交易所，也可能是其他人或者商家等。</p><p>但是双花是有可能被检测出来的，还记得上文提到的 “<strong>确认数</strong>” 吗？那么确认数是什么？</p><p>区块链是由一个个区块形象的连接在一起，形成链状。当其中某笔交易发生的时候，会被打包到区块中，然后形成区块链，每追加一个区块，确认数加 1。计算方法很简单，<strong>用当前最长链的最新区块高度减去某笔交易所在的区块高度即为确认数</strong>。这里需要注意的由于有分叉的可能（参考上面的两条不同长度的链），这笔交易在不同的链里面高度是不一样的，所以正确获得某笔交易所在的区块高度是通过交易哈希去获取的。</p><p>比如下图：<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/55.png" alt=""></p><p>同样是区块高度为 625400 的区块，经过编写博文这么一段时间来，确认数从 9 变成了 25，说明 625400 这个区块之后新增加了 14 个区块。</p><p>节点会对区块进行校验的，对于双花攻击，节点是有可能在 6 个确认周期内发现一笔交易被双重支付了，从而对交易发起者进行一些惩罚。所以为了预防双花，一般可以增加确认数，对比比特币来说， 6 个确认周期是比较合适的。</p><p>那么此次成本和收益怎么样呢？成本就是你需要掌握全网 51% 以上的算力，这个本身就是一个很大的成本；收益就是一笔钱被花费了两次，那么这笔钱有多少就很关键了，如果少的话攻击者肯定是犯糊涂了才会发起这个 51% 攻击，如果这笔钱很大呢？在对交易进行验证的过程肯定也会更加严格，包括在交易所出金提现也是会重重验证，想要快速的脱身恐怕很难。</p><p>所以发起 51%攻击不可能是因为一次双花攻击。那么做空比特币呢？</p><p>比特币遭到 51%攻击之后势必会导致比特币乃至整个加密货币市场的市值损失，然后攻击者通过比特币期货做空比特币获益。这里其实还是跟获益的大小有关系，如果获益比较小，收益都赶不上发起攻击的成本；如果获益很大，则在实际操作套现过程中会变得很困难，至少是不顺利，风险很大。</p><p>上面的讨论基于一个假设是攻击者控制了全网 51% 的算力只持续了一段时间，攻击者的目的也只是想要发起双重支付攻击或者做空比特币，并且快速套现脱身，那么如果攻击者控制了全网 51% 以上的算力持续了很长一段时间呢？</p><h3 id="摧毁比特币系统"><a href="#摧毁比特币系统" class="headerlink" title="摧毁比特币系统"></a>摧毁比特币系统</h3><p>先说我个人的看法，<strong>对比特币发起 51%攻击，比特币系统不会崩溃，而且还能恢复，但比特币市值就不好说了，甚至整个加密货币的市值很可能损失 0 ~ 90% 以上</strong>。<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/6.png" alt=""></p><p>如果攻击者拥有超过 51% 以上的算力，实际攻击的时候肯定不止 51%，比如达到了70% ~ 90%，并且攻击者控制持续了一段比较长的时间，那么攻击者能够反复进行双花攻击。实际过程可能是这样的：</p><p>首先攻击者需要在攻击发起之前买到一定量的比特币，或者说拥有一定量的比特币，那么出售这些比特币，然后利用算力优势发起双花攻击，抹掉出售自己比特币的这些交易记录，相当于自己的比特币与出售之前没什么变化，再次出售这些比特币，然后重复这个过程。</p><p>在这个过程中，势必会引起市场的警觉，导致比特币价格一路下跌，只要比特币价格没有跌倒 0，说明有人还愿意收比特币，那么这个攻击就可以持续。直至比特币归零或者其他防御解决方案比如硬分叉重新恢复了比特币网络。这个时候的加密货币市场，肯定是一片哀鸿。</p><p>但是从技术层面来讲，即便比特币归零了，比特币网络依然还能够通过诚实的矿工加入，利用全球闲置的大量算力，重新恢复比特币网络。至于比特币价格，这个不做讨论。也就是说 51%攻击能阻断或者影响比特币系统一段时间，但是攻击停止之后还是能够恢复的。这里就不得不提 POW 这个共识的优点了。</p><p><strong>本来 POW 是消耗了大量的电力来做算力竞速的，但是在比特币系统接近崩溃的时候，只要有算力的加入，整个区块链网络就能恢复起来</strong>。</p><p>然而，如果是<strong>使用了 POS 的区块链系统，如果发生类似的 51% 攻击，由于共识算法是以 Stake 作为依据的，那么新节点加入并不能带来任何起色，整个网络基本上不可能恢复了</strong>。但是这里有个悖论就是拥有 51% 以上 Stake 的攻击者为什么要发起这个攻击？导致自己的币不值钱？真的是人傻钱多，不在乎钱，就想干死这个区块链系统？【黑人问号脸】</p><h2 id="51-攻击悖论"><a href="#51-攻击悖论" class="headerlink" title="51%攻击悖论"></a>51%攻击悖论</h2><p>其实上面有提到过，发起 51%攻击的成本很高，尤其是想持续一段时间的攻击。那么收益的大小就很关键，但是无论怎么算，收益本身并不高并且风险巨大。</p><p>相比拥有 51% 算力诚实的参与比特币挖矿得到的奖励来说，可能都达不到。而且真实场景下，想要发起 51%攻击，门槛很高，并且不可能做到无人察觉。</p><p>所以这也就是为什么 <strong>51%攻击基本上不可能</strong>的原因。但是，，，<strong>结合其他的攻击手段，可以降低 51%攻击的算力门槛</strong>，比如日蚀攻击，这个在下一篇博文中 <a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a> 会做介绍。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>关于 51%攻击，大家基本上只需要了解就行了，对于区块链系统来说，基本上不用担心这种攻击，因为有悖论的存在。真正需要关心的是门槛较低，风险较低，收益较高的攻击。</p><p>另外，使用 POW 的缺点是很明显的，但是在安全方面又有着很独特的作用，不得不佩服中本聪对比特币系统的设计！！！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://privacycanada.net/cryptocurrency/51-attack/" target="_blank" rel="noopener">51% Attack</a></p><p><a href="https://mp.weixin.qq.com/s/u0BaKzalYTw8o4vXqBuA_g" target="_blank" rel="noopener">51%攻击解析</a></p><p><a href="https://www.chainnode.com/tutorial/1949" target="_blank" rel="noopener">什么是比特币51%攻击？</a></p><p><a href="https://www.zhihu.com/question/21970544" target="_blank" rel="noopener">是否仅需一次51%攻击，比特币体系即会崩溃？</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#x69;&#x6e;&#117;&#x78;&#99;&#111;&#x64;&#101;&#x32;&#110;&#x69;&#x6b;&#105;&#x40;&#x67;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#109;">&#x6c;&#x69;&#x6e;&#117;&#x78;&#99;&#111;&#x64;&#101;&#x32;&#110;&#x69;&#x6b;&#105;&#x40;&#x67;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#109;</a></p></li></ul><p>2020-04-11 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。&lt;/p&gt;
&lt;p&gt;本文就谈一下目前几种区块链网络攻击，以及其防御方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同系列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之51%攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之日蚀攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之女巫攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/&quot;&gt;浅谈几种区块链网络攻击以及防御方案之其它网络攻击&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;51-攻击&quot;&gt;&lt;a href=&quot;#51-攻击&quot; class=&quot;headerlink&quot; title=&quot;51%攻击&quot;&gt;&lt;/a&gt;51%攻击&lt;/h1&gt;&lt;p&gt;在了解什么是 51%攻击前，先简单科普下区块链的几个概念，这里主要以比特币为例作说明。&lt;/p&gt;
&lt;h2 id=&quot;什么是挖矿？&quot;&gt;&lt;a href=&quot;#什么是挖矿？&quot; class=&quot;headerlink&quot; title=&quot;什么是挖矿？&quot;&gt;&lt;/a&gt;什么是挖矿？&lt;/h2&gt;&lt;p&gt;其实挖矿这个词描述得有点太过于形象了，以至于弄得反而很生涩。当然区块链世界里还有很多玩概念的东西，背后道理其实反而没那么复杂。&lt;/p&gt;
&lt;p&gt;在比特币网络里，大家共同在维护一张账目表，参与记账的节点可以称之为矿工，其中矿工需要做的事情就是拼命竞争记账的权利，这个竞争记账权的过程可以称之为挖矿，当一个节点得到这个记账权之后，可以描述为这个节点挖到矿了。那么节点为什么会拼命的竞争这个记账权呢？因为比特币会对挖到矿的节点有奖励。这个奖励是基于区块高度的，最开始是每个区块奖励 50btc，每产生 210000 个区块为一个减半间隔，减半间隔之后奖励会减半。比如目前（2020.04）区块奖励是 12.5btc。&lt;/p&gt;
&lt;p&gt;上面这段话里面有两个点需要解释：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;为什么节点要竞争这个记账权&lt;/strong&gt;？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;区块高度又是什么&lt;/strong&gt;？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;针对第一个问题，如果用比较白话的方式讲的话就是，在分布式去信任的系统中，由于有激励的存在，大家都想拿到这个记账权，但是这个记账权在同一时刻（这里用词不一定表示某一刻，更多的形容相对的同一时刻）只允许其中一个节点拿到，并且由这个节点对交易进行记录。这样才能保证这张账本是唯一的，大家看到的是一样的账本。不然大家都来记账的话，这张账本就乱了，这就是称之为 ”共识“ 的由来。&lt;/p&gt;
&lt;p&gt;针对第二个问题，很好理解，区块高度或者说时钟高度，其实是用来描述一个区块的序号的，从创世区块 0 开始依次递增。不用过分纠结，本身是一个很简单的东西，或者叫区块序号更容易理解【手动滑稽】,可以看一下下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://rebootcat.com/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="https://rebootcat.com/tags/blockchain/"/>
    
      <category term="attack" scheme="https://rebootcat.com/tags/attack/"/>
    
      <category term="bitcoin" scheme="https://rebootcat.com/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>python采集bandwidth信息</title>
    <link href="https://rebootcat.com/2018/05/21/analyze_bandwidth/"/>
    <id>https://rebootcat.com/2018/05/21/analyze_bandwidth/</id>
    <published>2018-05-21T03:23:58.000Z</published>
    <updated>2020-09-20T01:30:46.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python脚本采集bandwidth"><a href="#python脚本采集bandwidth" class="headerlink" title="python脚本采集bandwidth"></a>python脚本采集bandwidth</h1><p>经常要做一些 linux 系统上的性能分析或者采集 cpu/mem/bandwidth 上报到监控系统。</p><p>分享一个我平常常用到的 bandwidth 采集脚本，原理是分析 /proc/net/dev 文件， 脚本如下：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#脚本探测网卡流入带宽,循环输出</span></span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">import pdb</span><br><span class="line"></span><br><span class="line">filename = './bandwidth.log'</span><br><span class="line"></span><br><span class="line">'''</span><br><span class="line">[root@~]$ cat /proc/net/dev</span><br><span class="line">Inter-|   Receive                                                |  Transmit</span><br><span class="line"> face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed</span><br><span class="line">    lo:<span class="number"> 1144779885672 </span>14057281982   <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>        <span class="number"> 0 </span>       <span class="number"> 0 </span>1144779885672<span class="number"> 14057281982 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>     <span class="number"> 0 </span>         0</span><br><span class="line">  eth0:      <span class="number"> 0 </span>     <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>        <span class="number"> 0 </span>       <span class="number"> 0 </span>      <span class="number"> 0 </span>     <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>     <span class="number"> 0 </span>         0</span><br><span class="line">  eth1:      <span class="number"> 0 </span>     <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>        <span class="number"> 0 </span>       <span class="number"> 0 </span>      <span class="number"> 0 </span>     <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>     <span class="number"> 0 </span>         0</span><br><span class="line">  eth2:<span class="number"> 26686495240 </span>203608963   <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>        <span class="number"> 0 </span>       <span class="number"> 1 </span>78529414436<span class="number"> 193724479 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>     <span class="number"> 0 </span>         0</span><br><span class="line">  eth3:<span class="number"> 10038847365 </span>82467612   <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>        <span class="number"> 0 </span>       <span class="number"> 0 </span>26209215795<span class="number"> 64571217 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>     <span class="number"> 0 </span>         0</span><br><span class="line"> bond0:<span class="number"> 36725342605 </span>286076575   <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>        <span class="number"> 0 </span>       <span class="number"> 1 </span>104738630231<span class="number"> 258295696 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>  <span class="number"> 0 </span>   <span class="number"> 0 </span>     <span class="number"> 0 </span>         0</span><br><span class="line">'''</span><br><span class="line"></span><br><span class="line">def get_rx(interface = 'eth0'):</span><br><span class="line">  rsbytes = []</span><br><span class="line">  cmd = 'cat /proc/net/dev'</span><br><span class="line">  r = os.popen(cmd).readlines()</span><br><span class="line">  if len(r) &lt; 4:</span><br><span class="line">    print "error: can't find eth interface"</span><br><span class="line">    return rsbytes</span><br><span class="line">  interface_dict = &#123;&#125;</span><br><span class="line">  for i in xrange(2,len(r),1): <span class="comment">#从 lo 开始</span></span><br><span class="line">    interface_name = r[i].split()[0].split(':')[0]</span><br><span class="line">    interface_dict[interface_name] = i</span><br><span class="line"></span><br><span class="line">  if interface in interface_dict:</span><br><span class="line">    position = interface_dict.get(interface)</span><br><span class="line">    recvbytes = r[position].split()[1]</span><br><span class="line">    sendbytes = r[position].split()[9]</span><br><span class="line">    rsbytes.append(int(recvbytes))</span><br><span class="line">    rsbytes.append(int(sendbytes))</span><br><span class="line"></span><br><span class="line">  return rsbytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def iftop_interface(interface = 'eth0'):</span><br><span class="line">  begin = int(time.time())</span><br><span class="line">  beginrs = get_rx(interface)</span><br><span class="line">  if not beginrs:</span><br><span class="line">    print 'error: can not find interface %s' % interface</span><br><span class="line">    return</span><br><span class="line">  while True:</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    endrs = get_rx(interface)</span><br><span class="line">    end = int(time.time())</span><br><span class="line">    rxrate = float((endrs[0] - beginrs[0])) / (end - begin)  * 8</span><br><span class="line">    sxrate = float((endrs[1] - beginrs[1])) / (end - begin)  * 8</span><br><span class="line">    tl = time.localtime(end)</span><br><span class="line">    date = time.strftime('%m-%d %H:%M:%S', tl)</span><br><span class="line">    cout = "%s  [recv(rate) = %s Mbps] [send(rate) = %s Mbps] \n" % (date,rxrate / 1000000,sxrate / 1000000)</span><br><span class="line"></span><br><span class="line">    fout = open(filename,'a')</span><br><span class="line">    fout.write(cout)</span><br><span class="line">    fout.close()</span><br><span class="line"></span><br><span class="line">    print cout</span><br><span class="line"></span><br><span class="line">    <span class="comment">#重新赋值，进入再次循环</span></span><br><span class="line">    begin,beginrs = end,endrs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">  iftop_interface('ens33')</span><br></pre></td></tr></table></figure><p>默认的网卡名字是 <strong>eth0</strong>，有些机器可能会不一样，只需要修改成你自己机器的网卡名称就行。</p><p>脚本可以直接在 <a href="https://github.com/smaugx/dailytools/blob/master/netif.py" target="_blank" rel="noopener">我的github</a> 进行下载。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>欢迎关注下我的其他脚本，平常可能会用到的一些脚本，整理了一下。</p><p><a href="https://github.com/smaugx/dailytools" target="_blank" rel="noopener">https://github.com/smaugx/dailytools</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#108;&#105;&#x6e;&#x75;&#x78;&#99;&#x6f;&#100;&#x65;&#50;&#110;&#x69;&#x6b;&#105;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;">&#108;&#105;&#x6e;&#x75;&#x78;&#99;&#x6f;&#100;&#x65;&#50;&#110;&#x69;&#x6b;&#105;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;</a></p></li></ul><p>2018-05-21 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python脚本采集bandwidth&quot;&gt;&lt;a href=&quot;#python脚本采集bandwidth&quot; class=&quot;headerlink&quot; title=&quot;python脚本采集bandwidth&quot;&gt;&lt;/a&gt;python脚本采集bandwidth&lt;/h1&gt;&lt;p&gt;经常
      
    
    </summary>
    
    
      <category term="python" scheme="https://rebootcat.com/categories/python/"/>
    
    
      <category term="python" scheme="https://rebootcat.com/tags/python/"/>
    
      <category term="bandwidth" scheme="https://rebootcat.com/tags/bandwidth/"/>
    
      <category term="net" scheme="https://rebootcat.com/tags/net/"/>
    
      <category term="linux" scheme="https://rebootcat.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python采集cpu信息</title>
    <link href="https://rebootcat.com/2018/05/20/analyze_cpu/"/>
    <id>https://rebootcat.com/2018/05/20/analyze_cpu/</id>
    <published>2018-05-20T03:23:58.000Z</published>
    <updated>2020-09-20T01:31:47.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python脚本采集cpu"><a href="#python脚本采集cpu" class="headerlink" title="python脚本采集cpu"></a>python脚本采集cpu</h1><p>经常要做一些 linux 系统上的性能分析或者采集 cpu/mem/bandwidth 上报到监控系统。</p><p>分享一个我平常常用到的 cpu 采集脚本，原理是分析 /proc/stat 文件， 脚本如下：</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">class <span class="type">CpuWatch</span>(<span class="keyword">object</span>):</span><br><span class="line">    def __init__(self, time_step):</span><br><span class="line">        self.cpufile_ = '/<span class="keyword">proc</span>/stat'</span><br><span class="line">        self.watch_time_step_ = time_step  <span class="comment"># 60 s</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 采集cpu信息</span></span><br><span class="line">    def read_cpu(self):</span><br><span class="line">        cpu_info = &#123;&#125;</span><br><span class="line">        cpufile = self.cpufile_</span><br><span class="line">        <span class="keyword">with</span> open(cpufile, 'r') <span class="keyword">as</span> fin:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> fin:</span><br><span class="line">                line_fields = line.split()</span><br><span class="line">                <span class="keyword">if</span> line_fields[<span class="number">0</span>] != <span class="string">"cpu"</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                total = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> field <span class="keyword">in</span> line_fields:</span><br><span class="line">                    <span class="keyword">if</span> field == <span class="string">"cpu"</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    total += <span class="built_in">int</span>(field)</span><br><span class="line"></span><br><span class="line">                cpu_info = &#123;</span><br><span class="line">                    <span class="string">"User"</span>: <span class="built_in">int</span>(line_fields[<span class="number">1</span>]),</span><br><span class="line">                    <span class="string">"Sys"</span>: <span class="built_in">int</span>(line_fields[<span class="number">3</span>]),</span><br><span class="line">                    <span class="string">"Idle"</span>: <span class="built_in">int</span>(line_fields[<span class="number">4</span>]),</span><br><span class="line">                    <span class="string">"Steal"</span>: <span class="built_in">int</span>(line_fields[<span class="number">8</span>]),</span><br><span class="line">                    <span class="string">"Wait"</span>: <span class="built_in">int</span>(line_fields[<span class="number">5</span>]),</span><br><span class="line">                    <span class="string">"Total"</span>: total</span><br><span class="line">                &#125;</span><br><span class="line">            fin.close()</span><br><span class="line">        <span class="keyword">return</span> cpu_info</span><br><span class="line"></span><br><span class="line">    def get_avg_cpu(self, cpu_info_old, cpu_info):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cpu_info_old <span class="keyword">or</span> <span class="keyword">not</span> cpu_info:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">None</span></span><br><span class="line"></span><br><span class="line">        <span class="literal">result</span> = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">set</span>(cpu_info.keys()) != <span class="built_in">set</span>(cpu_info_old.keys()):</span><br><span class="line">            <span class="keyword">return</span> <span class="type">None</span></span><br><span class="line"></span><br><span class="line">        delta_total = cpu_info[<span class="string">"Total"</span>]  -   cpu_info_old[<span class="string">"Total"</span>]</span><br><span class="line">        delta_user  = cpu_info[<span class="string">"User"</span>]   -   cpu_info_old[<span class="string">"User"</span>]</span><br><span class="line">        delta_sys   = cpu_info[<span class="string">"Sys"</span>]    -   cpu_info_old[<span class="string">"Sys"</span>]</span><br><span class="line">        delta_idle  = cpu_info[<span class="string">"Idle"</span>]   -   cpu_info_old[<span class="string">"Idle"</span>]</span><br><span class="line">        delta_wait  = cpu_info[<span class="string">"Wait"</span>]   -   cpu_info_old[<span class="string">"Wait"</span>]</span><br><span class="line">        delta_steal = cpu_info[<span class="string">"Steal"</span>]  -   cpu_info_old[<span class="string">"Steal"</span>]</span><br><span class="line"></span><br><span class="line">        last_cpu_info = cpu_info</span><br><span class="line">        <span class="literal">result</span> = &#123;</span><br><span class="line">            <span class="string">"cpu_user"</span>: <span class="built_in">int</span>(<span class="built_in">float</span>(delta_user)/<span class="built_in">float</span>(delta_total) * <span class="number">100</span>),</span><br><span class="line">            <span class="string">"cpu_sys"</span>: <span class="built_in">int</span>(<span class="built_in">float</span>(delta_sys)/<span class="built_in">float</span>(delta_total) * <span class="number">100</span>),</span><br><span class="line">            <span class="string">"cpu_wait"</span>: <span class="built_in">int</span>(<span class="built_in">float</span>(delta_wait)/<span class="built_in">float</span>(delta_total) * <span class="number">100</span>),</span><br><span class="line">            <span class="string">"cpu_steal"</span>: <span class="built_in">int</span>(<span class="built_in">float</span>(delta_steal)/<span class="built_in">float</span>(delta_total) * <span class="number">100</span>),</span><br><span class="line">            <span class="string">"cpu_idle"</span>: <span class="built_in">int</span>(<span class="built_in">float</span>(delta_idle)/<span class="built_in">float</span>(delta_total) * <span class="number">100</span>),</span><br><span class="line">            <span class="string">"cpu_util"</span>: <span class="built_in">int</span>(<span class="built_in">float</span>(delta_total - delta_idle - delta_wait - delta_steal)/<span class="built_in">float</span>(delta_total) * <span class="number">100</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        print(<span class="literal">result</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">result</span></span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        cpu_info_old = &#123;&#125;</span><br><span class="line">        <span class="keyword">while</span> <span class="type">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cpu_info_old:</span><br><span class="line">                cpu_info_old = self.read_cpu()</span><br><span class="line">            time.sleep(self.watch_time_step_)</span><br><span class="line">            cpu_info = self.read_cpu()</span><br><span class="line"></span><br><span class="line">            <span class="literal">result</span> = self.get_avg_cpu(cpu_info_old, cpu_info)</span><br><span class="line">            cpu_info_old = copy.deepcopy(cpu_info)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == '__main__':</span><br><span class="line">    cpu_watcher = <span class="type">CpuWatch</span>(time_step = <span class="number">5</span>)</span><br><span class="line">    cpu_watcher.run()</span><br></pre></td></tr></table></figure><p>脚本可以直接在 <a href="https://github.com/smaugx/dailytools/blob/master/cpu.py" target="_blank" rel="noopener">我的github</a> 进行下载。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>欢迎关注下我的其他脚本，平常可能会用到的一些脚本，整理了一下。</p><p><a href="https://github.com/smaugx/dailytools" target="_blank" rel="noopener">https://github.com/smaugx/dailytools</a></p><p>Blog:</p><ul><li><p><a href="http://rebootcat.com">rebootcat.com</a></p></li><li><p>email: <a href="mailto:&#x6c;&#105;&#x6e;&#x75;&#x78;&#x63;&#111;&#100;&#101;&#x32;&#110;&#105;&#107;&#105;&#x40;&#x67;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#x6c;&#105;&#x6e;&#x75;&#x78;&#x63;&#111;&#100;&#101;&#x32;&#110;&#105;&#107;&#105;&#x40;&#x67;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p></li></ul><p>2018-05-20 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python脚本采集cpu&quot;&gt;&lt;a href=&quot;#python脚本采集cpu&quot; class=&quot;headerlink&quot; title=&quot;python脚本采集cpu&quot;&gt;&lt;/a&gt;python脚本采集cpu&lt;/h1&gt;&lt;p&gt;经常要做一些 linux 系统上的性能分析或者采集 
      
    
    </summary>
    
    
      <category term="python" scheme="https://rebootcat.com/categories/python/"/>
    
    
      <category term="python" scheme="https://rebootcat.com/tags/python/"/>
    
      <category term="cpu" scheme="https://rebootcat.com/tags/cpu/"/>
    
      <category term="linux" scheme="https://rebootcat.com/tags/linux/"/>
    
  </entry>
  
</feed>
